
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCOMMArightTIMESEQDIVEQMODEQrightPLUSEQMINUSEQrightEQUALSleftORleftANDleftEQNOTEQleftGREATERTHANGREATERTHANEQLESSTHANLESSTHANEQleftPLUSMINUSleftTIMESDIVIDEMODADDRESS AND ASSERT BREAK CHAR CHAR_CONST COMMA DIVEQ DIVIDE ELSE EQ EQUALS FLOAT FLOAT_CONST FOR GREATERTHAN GREATERTHANEQ ID IF INT INT_CONST LBRACE LBRACKET LESSTHAN LESSTHANEQ LPAREN MINUS MINUSEQ MINUSMINUS MOD MODEQ NOT NOTEQ OR PLUS PLUSEQ PLUSPLUS PRINT RBRACE RBRACKET READ RETURN RPAREN SEMI STRING TIMES TIMESEQ VOID WHILE\n        program : global_declaration_list\n        \n        global_declaration_list : global_declaration\n                                | global_declaration_list global_declaration\n        \n        global_declaration : function_definition\n        \n        global_declaration : declaration\n        \n        function_definition : type_specifier declarator declaration_list_opt compound_statement\n        \n        function_definition : declarator declaration_list_opt compound_statement\n        \n        type_specifier : VOID\n                       | CHAR\n                       | INT\n                       | FLOAT\n        \n        declaration_list_opt : declaration_list\n                             | empty\n        \n        declaration_list : declaration\n                         | declaration_list declaration\n        \n        declarator : direct_declarator\n        \n        declarator : pointer direct_declarator\n        \n        pointer : TIMES\n                | TIMES pointer\n        \n        direct_declarator : identifier\n        \n        direct_declarator : LPAREN declarator RPAREN \n        \n        direct_declarator : direct_declarator LBRACKET constant_expression_opt RBRACKET\n        \n        direct_declarator : direct_declarator LPAREN parameter_list RPAREN\n                          | direct_declarator LPAREN identifier_list_opt RPAREN\n        \n        identifier : ID\n        \n        identifier_list_opt : identifier_list\n                            | empty\n        \n        identifier_list : identifier\n                        | identifier_list COMMA identifier\n        \n        constant_expression_opt : constant_expression\n                                | empty\n        \n        constant_expression : binary_expression\n        \n        binary_expression : cast_expression\n                          | binary_expression TIMES binary_expression\n                          | binary_expression DIVIDE binary_expression\n                          | binary_expression MOD binary_expression\n                          | binary_expression PLUS binary_expression\n                          | binary_expression MINUS binary_expression\n                          | binary_expression LESSTHAN binary_expression\n                          | binary_expression LESSTHANEQ binary_expression\n                          | binary_expression GREATERTHANEQ binary_expression\n                          | binary_expression GREATERTHAN binary_expression\n                          | binary_expression EQ binary_expression\n                          | binary_expression NOTEQ binary_expression\n                          | binary_expression AND binary_expression\n                          | binary_expression OR binary_expression\n        \n        cast_expression : unary_expression\n        \n        cast_expression : LPAREN type_specifier RPAREN cast_expression\n        \n        unary_expression : postfix_expression\n        \n        unary_expression : PLUSPLUS unary_expression\n                         | MINUSMINUS unary_expression\n                         | unary_operator cast_expression\n        \n        postfix_expression : primary_expression\n        \n        postfix_expression : postfix_expression LBRACKET expression RBRACKET\n        \n        postfix_expression : postfix_expression LPAREN RPAREN\n                           | postfix_expression LPAREN argument_expression RPAREN\n        \n        postfix_expression : postfix_expression PLUSPLUS\n                           | postfix_expression MINUSMINUS\n        \n        primary_expression : identifier\n                           | constant\n        \n        primary_expression : LPAREN expression RPAREN\n        \n        constant : INT_CONST\n        \n        constant : CHAR_CONST       \n        \n        constant : FLOAT_CONST\n        \n        constant : STRING\n        \n        expression : assignment_expression\n        \n        expression : expression COMMA assignment_expression\n        \n        argument_expression : assignment_expression\n                            | argument_expression COMMA assignment_expression\n        \n        assignment_expression : binary_expression\n                              | unary_expression assignment_operator assignment_expression\n        \n        assignment_operator : EQUALS\n                            | TIMESEQ\n                            | DIVEQ\n                            | MODEQ\n                            | PLUSEQ\n                            | MINUSEQ\n         \n        unary_operator : AND\n                       | TIMES\n                       | PLUS\n                       | MINUS\n                       | NOT\n                       | ADDRESS\n         parameter_list : parameter_declaration\n                           | parameter_list COMMA parameter_declaration\n         parameter_declaration : type_specifier declarator \n         declaration : decl_body SEMI\n         decl_body  : type_specifier init_declarator_list_opt\n         init_declarator_list_opt : init_declarator_list \n                                     | empty\n         init_declarator_list : init_declarator \n                                 | init_declarator_list COMMA init_declarator\n         init_declarator : declarator\n                            | declarator EQUALS initializer \n         initializer : assignment_expression  initializer : LBRACE initializer_list RBRACE \n                        | LBRACE initializer_list COMMA RBRACE \n         initializer_list : initializer \n                             | initializer_list COMMA initializer\n        \n        compound_statement : LBRACE block_item_list_opt RBRACE\n        \n        block_item_list_opt : block_item_list\n                            | empty\n         block_item_list : block_item \n                            | block_item_list block_item\n        \n        block_item : declaration\n                   | statement\n         statement : expression_statement\n                      | compound_statement\n                      | selection_statement\n                      | interation_statement\n                      | jump_statement\n                      | assert_statement\n                      | print_statement\n                      | read_statement \n         expression_statement : expression_opt SEMI  expression_opt : expression \n                           | empty\n         selection_statement : IF LPAREN expression RPAREN statement                         \n         selection_statement : IF LPAREN expression RPAREN statement ELSE statement                   \n         interation_statement : WHILE LPAREN expression RPAREN statement                           \n         interation_statement : FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement                         \n         interation_statement : FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement                          \n         jump_statement : BREAK SEMI                     \n         jump_statement : RETURN expression_opt SEMI             \n         assert_statement : ASSERT expression SEMI\n         print_statement : PRINT LPAREN expression_opt RPAREN SEMI\n         read_statement : READ LPAREN argument_expression RPAREN SEMI                         \n        empty :'
    
_lr_action_items = {'VOID':([0,2,3,4,5,7,13,15,18,19,20,26,28,30,32,33,39,40,41,53,74,75,83,85,86,87,88,89,90,91,92,93,94,95,107,131,132,133,145,146,148,152,153,187,188,204,205,208,209,213,217,218,],[9,9,-2,-4,-5,9,-16,-20,-25,-3,9,9,-14,-87,9,-17,-7,9,-15,9,-21,-6,9,-103,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-22,-23,9,-24,-100,-104,-115,9,-123,-124,-125,-118,-120,-126,-127,-119,-122,-121,]),'CHAR':([0,2,3,4,5,7,13,15,18,19,20,26,28,30,32,33,39,40,41,53,74,75,83,85,86,87,88,89,90,91,92,93,94,95,107,131,132,133,145,146,148,152,153,187,188,204,205,208,209,213,217,218,],[10,10,-2,-4,-5,10,-16,-20,-25,-3,10,10,-14,-87,10,-17,-7,10,-15,10,-21,-6,10,-103,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-22,-23,10,-24,-100,-104,-115,10,-123,-124,-125,-118,-120,-126,-127,-119,-122,-121,]),'INT':([0,2,3,4,5,7,13,15,18,19,20,26,28,30,32,33,39,40,41,53,74,75,83,85,86,87,88,89,90,91,92,93,94,95,107,131,132,133,145,146,148,152,153,187,188,204,205,208,209,213,217,218,],[11,11,-2,-4,-5,11,-16,-20,-25,-3,11,11,-14,-87,11,-17,-7,11,-15,11,-21,-6,11,-103,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-22,-23,11,-24,-100,-104,-115,11,-123,-124,-125,-118,-120,-126,-127,-119,-122,-121,]),'FLOAT':([0,2,3,4,5,7,13,15,18,19,20,26,28,30,32,33,39,40,41,53,74,75,83,85,86,87,88,89,90,91,92,93,94,95,107,131,132,133,145,146,148,152,153,187,188,204,205,208,209,213,217,218,],[12,12,-2,-4,-5,12,-16,-20,-25,-3,12,12,-14,-87,12,-17,-7,12,-15,12,-21,-6,12,-103,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-22,-23,12,-24,-100,-104,-115,12,-123,-124,-125,-118,-120,-126,-127,-119,-122,-121,]),'LPAREN':([0,2,3,4,5,6,9,10,11,12,13,14,15,16,17,18,19,29,30,31,33,35,37,38,39,40,48,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,74,75,78,83,85,86,87,88,89,90,91,92,93,94,95,97,99,100,102,103,104,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,125,126,128,131,133,138,139,140,141,142,143,144,145,146,148,149,150,151,152,153,156,157,171,172,174,180,186,187,188,192,193,194,197,198,199,204,205,207,208,209,210,211,213,215,216,217,218,],[16,16,-2,-4,-5,16,-8,-9,-10,-11,32,16,-20,16,-18,-25,-3,16,-87,53,32,-19,53,16,-7,53,-79,-80,-81,-78,53,124,128,128,53,-53,-82,-83,-59,-60,-62,-63,-64,-65,16,-21,-6,53,53,-103,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,149,151,152,53,53,156,157,-22,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-57,-58,53,-23,-24,53,-72,-73,-74,-75,-76,-77,-100,-104,-115,53,53,53,53,-123,53,53,53,-61,-55,53,53,-124,-125,-54,-56,53,53,53,53,-118,-120,53,-126,-127,53,53,-119,53,53,-122,-121,]),'TIMES':([0,2,3,4,5,6,9,10,11,12,16,17,18,19,29,30,31,37,38,39,40,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,75,78,79,80,83,85,86,87,88,89,90,91,92,93,94,95,102,103,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,125,126,127,128,129,130,138,139,140,141,142,143,144,145,146,148,149,150,151,152,153,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,180,186,187,188,191,192,193,194,197,198,199,204,205,207,208,209,210,211,213,215,216,217,218,],[17,17,-2,-4,-5,17,-8,-9,-10,-11,17,17,-25,-3,17,-87,48,48,17,-7,48,108,-33,-79,-80,-81,-78,-47,48,-49,48,48,48,-53,-82,-83,-59,-60,-62,-63,-64,-65,17,-6,48,108,-47,48,-103,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-57,-58,-50,48,-51,-52,48,-72,-73,-74,-75,-76,-77,-100,-104,-115,48,48,48,48,-123,48,48,-34,-35,-36,108,108,108,108,108,108,108,108,108,108,48,-61,-55,48,48,-124,-125,-48,-54,-56,48,48,48,48,-118,-120,48,-126,-127,48,48,-119,48,48,-122,-121,]),'ID':([0,2,3,4,5,6,9,10,11,12,14,16,17,19,29,30,31,32,35,37,38,39,40,48,49,50,51,53,55,56,57,59,60,72,75,78,83,85,86,87,88,89,90,91,92,93,94,95,102,103,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,128,134,138,139,140,141,142,143,144,145,146,148,149,150,151,152,153,156,157,171,180,186,187,188,194,197,198,199,204,205,207,208,209,210,211,213,215,216,217,218,],[18,18,-2,-4,-5,18,-8,-9,-10,-11,18,18,-18,-3,18,-87,18,18,-19,18,18,-7,18,-79,-80,-81,-78,18,18,18,18,-82,-83,18,-6,18,18,-103,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-72,-73,-74,-75,-76,-77,-100,-104,-115,18,18,18,18,-123,18,18,18,18,18,-124,-125,18,18,18,18,-118,-120,18,-126,-127,18,18,-119,18,18,-122,-121,]),'$end':([1,2,3,4,5,19,30,39,75,145,],[0,-1,-2,-4,-5,-3,-87,-7,-6,-100,]),'SEMI':([6,8,9,10,11,12,13,15,18,20,21,22,23,24,29,30,33,40,42,47,52,54,58,61,62,63,64,65,66,74,76,77,79,80,81,83,84,85,86,87,88,89,90,91,92,93,94,95,96,98,101,102,106,107,125,126,127,129,130,131,133,145,146,147,148,152,153,154,155,158,159,160,161,162,163,164,165,166,167,168,169,170,172,174,179,181,183,185,186,187,188,191,192,193,195,197,198,199,200,201,202,204,205,206,208,209,210,213,215,216,217,218,],[-128,30,-8,-9,-10,-11,-16,-20,-25,-93,-88,-89,-90,-91,-128,-87,-17,-128,-93,-33,-47,-49,-53,-59,-60,-62,-63,-64,-65,-21,-94,-95,-70,-47,-92,-128,-117,-103,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,148,-116,153,-128,-66,-22,-57,-58,-50,-51,-52,-23,-24,-100,-104,-117,-115,-128,-123,187,188,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-61,-55,-96,-71,-67,199,-128,-124,-125,-48,-54,-56,-97,-128,-128,-128,207,208,209,-118,-120,211,-126,-127,-128,-119,-128,-128,-122,-121,]),'LBRACE':([7,13,15,18,20,25,26,27,28,30,33,36,37,40,41,74,78,83,85,86,87,88,89,90,91,92,93,94,95,107,131,133,145,146,148,153,180,187,188,197,198,204,205,208,209,210,213,215,216,217,218,],[-128,-16,-20,-25,-128,40,-12,-13,-14,-87,-17,40,78,40,-15,-21,78,40,-103,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-22,-23,-24,-100,-104,-115,-123,78,-124,-125,40,40,-118,-120,-126,-127,40,-119,40,40,-122,-121,]),'RPAREN':([9,10,11,12,13,15,18,32,33,34,47,52,54,58,61,62,63,64,65,66,67,68,69,70,71,73,74,79,80,98,106,107,121,122,124,125,126,127,129,130,131,133,135,147,156,158,159,160,161,162,163,164,165,166,167,168,169,170,172,174,175,176,177,178,181,182,183,184,189,190,191,192,193,203,207,211,212,214,],[-8,-9,-10,-11,-16,-20,-25,-128,-17,74,-33,-47,-49,-53,-59,-60,-62,-63,-64,-65,131,133,-84,-26,-27,-28,-21,-70,-47,-116,-66,-22,171,172,174,-57,-58,-50,-51,-52,-23,-24,-86,-117,-128,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-61,-55,193,-68,-85,-29,-71,197,-67,198,201,202,-48,-54,-56,-69,-128,-128,215,216,]),'EQUALS':([13,15,18,20,33,42,52,54,58,61,62,63,64,65,66,74,80,107,125,126,127,129,130,131,133,172,174,191,192,193,],[-16,-20,-25,37,-17,37,-47,-49,-53,-59,-60,-62,-63,-64,-65,-21,139,-22,-57,-58,-50,-51,-52,-23,-24,-61,-55,-48,-54,-56,]),'COMMA':([13,15,18,20,22,24,33,42,47,52,54,58,61,62,63,64,65,66,67,69,70,73,74,76,77,79,80,81,98,106,107,122,125,126,127,129,130,131,133,135,136,137,155,158,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,175,176,177,178,179,181,182,183,184,190,191,192,193,195,196,203,],[-16,-20,-25,-93,38,-91,-17,-93,-33,-47,-49,-53,-59,-60,-62,-63,-64,-65,132,-84,134,-28,-21,-94,-95,-70,-47,-92,150,-66,-22,150,-57,-58,-50,-51,-52,-23,-24,-86,180,-98,150,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-61,150,-55,194,-68,-85,-29,-96,-71,150,-67,150,194,-48,-54,-56,-97,-99,-69,]),'LBRACKET':([13,15,18,33,54,58,61,62,63,64,65,66,74,107,125,126,131,133,172,174,192,193,],[31,-20,-25,31,123,-53,-59,-60,-62,-63,-64,-65,-21,-22,-57,-58,-23,-24,-61,-55,-54,-56,]),'PLUSPLUS':([18,30,31,37,40,48,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,78,83,85,86,87,88,89,90,91,92,93,94,95,102,103,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,125,126,128,138,139,140,141,142,143,144,145,146,148,149,150,151,152,153,156,157,171,172,174,180,186,187,188,192,193,194,197,198,199,204,205,207,208,209,210,211,213,215,216,217,218,],[-25,-87,55,55,55,-79,-80,-81,-78,55,125,55,55,55,-53,-82,-83,-59,-60,-62,-63,-64,-65,55,55,-103,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-57,-58,55,55,-72,-73,-74,-75,-76,-77,-100,-104,-115,55,55,55,55,-123,55,55,55,-61,-55,55,55,-124,-125,-54,-56,55,55,55,55,-118,-120,55,-126,-127,55,55,-119,55,55,-122,-121,]),'MINUSMINUS':([18,30,31,37,40,48,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,78,83,85,86,87,88,89,90,91,92,93,94,95,102,103,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,125,126,128,138,139,140,141,142,143,144,145,146,148,149,150,151,152,153,156,157,171,172,174,180,186,187,188,192,193,194,197,198,199,204,205,207,208,209,210,211,213,215,216,217,218,],[-25,-87,56,56,56,-79,-80,-81,-78,56,126,56,56,56,-53,-82,-83,-59,-60,-62,-63,-64,-65,56,56,-103,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-57,-58,56,56,-72,-73,-74,-75,-76,-77,-100,-104,-115,56,56,56,56,-123,56,56,56,-61,-55,56,56,-124,-125,-54,-56,56,56,56,56,-118,-120,56,-126,-127,56,56,-119,56,56,-122,-121,]),'DIVIDE':([18,46,47,52,54,58,61,62,63,64,65,66,79,80,125,126,127,129,130,158,159,160,161,162,163,164,165,166,167,168,169,170,172,174,191,192,193,],[-25,109,-33,-47,-49,-53,-59,-60,-62,-63,-64,-65,109,-47,-57,-58,-50,-51,-52,-34,-35,-36,109,109,109,109,109,109,109,109,109,109,-61,-55,-48,-54,-56,]),'MOD':([18,46,47,52,54,58,61,62,63,64,65,66,79,80,125,126,127,129,130,158,159,160,161,162,163,164,165,166,167,168,169,170,172,174,191,192,193,],[-25,110,-33,-47,-49,-53,-59,-60,-62,-63,-64,-65,110,-47,-57,-58,-50,-51,-52,-34,-35,-36,110,110,110,110,110,110,110,110,110,110,-61,-55,-48,-54,-56,]),'PLUS':([18,30,31,37,40,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,78,79,80,83,85,86,87,88,89,90,91,92,93,94,95,102,103,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,125,126,127,128,129,130,138,139,140,141,142,143,144,145,146,148,149,150,151,152,153,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,180,186,187,188,191,192,193,194,197,198,199,204,205,207,208,209,210,211,213,215,216,217,218,],[-25,-87,49,49,49,111,-33,-79,-80,-81,-78,-47,49,-49,49,49,49,-53,-82,-83,-59,-60,-62,-63,-64,-65,49,111,-47,49,-103,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-57,-58,-50,49,-51,-52,49,-72,-73,-74,-75,-76,-77,-100,-104,-115,49,49,49,49,-123,49,49,-34,-35,-36,-37,-38,111,111,111,111,111,111,111,111,49,-61,-55,49,49,-124,-125,-48,-54,-56,49,49,49,49,-118,-120,49,-126,-127,49,49,-119,49,49,-122,-121,]),'MINUS':([18,30,31,37,40,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,78,79,80,83,85,86,87,88,89,90,91,92,93,94,95,102,103,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,125,126,127,128,129,130,138,139,140,141,142,143,144,145,146,148,149,150,151,152,153,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,180,186,187,188,191,192,193,194,197,198,199,204,205,207,208,209,210,211,213,215,216,217,218,],[-25,-87,50,50,50,112,-33,-79,-80,-81,-78,-47,50,-49,50,50,50,-53,-82,-83,-59,-60,-62,-63,-64,-65,50,112,-47,50,-103,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-57,-58,-50,50,-51,-52,50,-72,-73,-74,-75,-76,-77,-100,-104,-115,50,50,50,50,-123,50,50,-34,-35,-36,-37,-38,112,112,112,112,112,112,112,112,50,-61,-55,50,50,-124,-125,-48,-54,-56,50,50,50,50,-118,-120,50,-126,-127,50,50,-119,50,50,-122,-121,]),'LESSTHAN':([18,46,47,52,54,58,61,62,63,64,65,66,79,80,125,126,127,129,130,158,159,160,161,162,163,164,165,166,167,168,169,170,172,174,191,192,193,],[-25,113,-33,-47,-49,-53,-59,-60,-62,-63,-64,-65,113,-47,-57,-58,-50,-51,-52,-34,-35,-36,-37,-38,-39,-40,-41,-42,113,113,113,113,-61,-55,-48,-54,-56,]),'LESSTHANEQ':([18,46,47,52,54,58,61,62,63,64,65,66,79,80,125,126,127,129,130,158,159,160,161,162,163,164,165,166,167,168,169,170,172,174,191,192,193,],[-25,114,-33,-47,-49,-53,-59,-60,-62,-63,-64,-65,114,-47,-57,-58,-50,-51,-52,-34,-35,-36,-37,-38,-39,-40,-41,-42,114,114,114,114,-61,-55,-48,-54,-56,]),'GREATERTHANEQ':([18,46,47,52,54,58,61,62,63,64,65,66,79,80,125,126,127,129,130,158,159,160,161,162,163,164,165,166,167,168,169,170,172,174,191,192,193,],[-25,115,-33,-47,-49,-53,-59,-60,-62,-63,-64,-65,115,-47,-57,-58,-50,-51,-52,-34,-35,-36,-37,-38,-39,-40,-41,-42,115,115,115,115,-61,-55,-48,-54,-56,]),'GREATERTHAN':([18,46,47,52,54,58,61,62,63,64,65,66,79,80,125,126,127,129,130,158,159,160,161,162,163,164,165,166,167,168,169,170,172,174,191,192,193,],[-25,116,-33,-47,-49,-53,-59,-60,-62,-63,-64,-65,116,-47,-57,-58,-50,-51,-52,-34,-35,-36,-37,-38,-39,-40,-41,-42,116,116,116,116,-61,-55,-48,-54,-56,]),'EQ':([18,46,47,52,54,58,61,62,63,64,65,66,79,80,125,126,127,129,130,158,159,160,161,162,163,164,165,166,167,168,169,170,172,174,191,192,193,],[-25,117,-33,-47,-49,-53,-59,-60,-62,-63,-64,-65,117,-47,-57,-58,-50,-51,-52,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,117,117,-61,-55,-48,-54,-56,]),'NOTEQ':([18,46,47,52,54,58,61,62,63,64,65,66,79,80,125,126,127,129,130,158,159,160,161,162,163,164,165,166,167,168,169,170,172,174,191,192,193,],[-25,118,-33,-47,-49,-53,-59,-60,-62,-63,-64,-65,118,-47,-57,-58,-50,-51,-52,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,118,118,-61,-55,-48,-54,-56,]),'AND':([18,30,31,37,40,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,78,79,80,83,85,86,87,88,89,90,91,92,93,94,95,102,103,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,125,126,127,128,129,130,138,139,140,141,142,143,144,145,146,148,149,150,151,152,153,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,180,186,187,188,191,192,193,194,197,198,199,204,205,207,208,209,210,211,213,215,216,217,218,],[-25,-87,51,51,51,119,-33,-79,-80,-81,-78,-47,51,-49,51,51,51,-53,-82,-83,-59,-60,-62,-63,-64,-65,51,119,-47,51,-103,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-57,-58,-50,51,-51,-52,51,-72,-73,-74,-75,-76,-77,-100,-104,-115,51,51,51,51,-123,51,51,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,119,51,-61,-55,51,51,-124,-125,-48,-54,-56,51,51,51,51,-118,-120,51,-126,-127,51,51,-119,51,51,-122,-121,]),'OR':([18,46,47,52,54,58,61,62,63,64,65,66,79,80,125,126,127,129,130,158,159,160,161,162,163,164,165,166,167,168,169,170,172,174,191,192,193,],[-25,120,-33,-47,-49,-53,-59,-60,-62,-63,-64,-65,120,-47,-57,-58,-50,-51,-52,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-61,-55,-48,-54,-56,]),'RBRACKET':([18,31,43,44,45,46,47,52,54,58,61,62,63,64,65,66,79,80,106,125,126,127,129,130,158,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,181,183,191,192,193,],[-25,-128,107,-30,-31,-32,-33,-47,-49,-53,-59,-60,-62,-63,-64,-65,-70,-47,-66,-57,-58,-50,-51,-52,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-61,192,-55,-71,-67,-48,-54,-56,]),'TIMESEQ':([18,52,54,58,61,62,63,64,65,66,80,125,126,127,129,130,172,174,191,192,193,],[-25,-47,-49,-53,-59,-60,-62,-63,-64,-65,140,-57,-58,-50,-51,-52,-61,-55,-48,-54,-56,]),'DIVEQ':([18,52,54,58,61,62,63,64,65,66,80,125,126,127,129,130,172,174,191,192,193,],[-25,-47,-49,-53,-59,-60,-62,-63,-64,-65,141,-57,-58,-50,-51,-52,-61,-55,-48,-54,-56,]),'MODEQ':([18,52,54,58,61,62,63,64,65,66,80,125,126,127,129,130,172,174,191,192,193,],[-25,-47,-49,-53,-59,-60,-62,-63,-64,-65,142,-57,-58,-50,-51,-52,-61,-55,-48,-54,-56,]),'PLUSEQ':([18,52,54,58,61,62,63,64,65,66,80,125,126,127,129,130,172,174,191,192,193,],[-25,-47,-49,-53,-59,-60,-62,-63,-64,-65,143,-57,-58,-50,-51,-52,-61,-55,-48,-54,-56,]),'MINUSEQ':([18,52,54,58,61,62,63,64,65,66,80,125,126,127,129,130,172,174,191,192,193,],[-25,-47,-49,-53,-59,-60,-62,-63,-64,-65,144,-57,-58,-50,-51,-52,-61,-55,-48,-54,-56,]),'RBRACE':([18,30,40,47,52,54,58,61,62,63,64,65,66,77,79,80,82,83,84,85,86,87,88,89,90,91,92,93,94,95,125,126,127,129,130,136,137,145,146,148,153,158,159,160,161,162,163,164,165,166,167,168,169,170,172,174,179,180,181,187,188,191,192,193,195,196,204,205,208,209,213,217,218,],[-25,-87,-128,-33,-47,-49,-53,-59,-60,-62,-63,-64,-65,-95,-70,-47,145,-101,-102,-103,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-57,-58,-50,-51,-52,179,-98,-100,-104,-115,-123,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-61,-55,-96,195,-71,-124,-125,-48,-54,-56,-97,-99,-118,-120,-126,-127,-119,-122,-121,]),'IF':([30,40,83,85,86,87,88,89,90,91,92,93,94,95,145,146,148,153,187,188,197,198,204,205,208,209,210,213,215,216,217,218,],[-87,97,97,-103,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-100,-104,-115,-123,-124,-125,97,97,-118,-120,-126,-127,97,-119,97,97,-122,-121,]),'WHILE':([30,40,83,85,86,87,88,89,90,91,92,93,94,95,145,146,148,153,187,188,197,198,204,205,208,209,210,213,215,216,217,218,],[-87,99,99,-103,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-100,-104,-115,-123,-124,-125,99,99,-118,-120,-126,-127,99,-119,99,99,-122,-121,]),'FOR':([30,40,83,85,86,87,88,89,90,91,92,93,94,95,145,146,148,153,187,188,197,198,204,205,208,209,210,213,215,216,217,218,],[-87,100,100,-103,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-100,-104,-115,-123,-124,-125,100,100,-118,-120,-126,-127,100,-119,100,100,-122,-121,]),'BREAK':([30,40,83,85,86,87,88,89,90,91,92,93,94,95,145,146,148,153,187,188,197,198,204,205,208,209,210,213,215,216,217,218,],[-87,101,101,-103,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-100,-104,-115,-123,-124,-125,101,101,-118,-120,-126,-127,101,-119,101,101,-122,-121,]),'RETURN':([30,40,83,85,86,87,88,89,90,91,92,93,94,95,145,146,148,153,187,188,197,198,204,205,208,209,210,213,215,216,217,218,],[-87,102,102,-103,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-100,-104,-115,-123,-124,-125,102,102,-118,-120,-126,-127,102,-119,102,102,-122,-121,]),'ASSERT':([30,40,83,85,86,87,88,89,90,91,92,93,94,95,145,146,148,153,187,188,197,198,204,205,208,209,210,213,215,216,217,218,],[-87,103,103,-103,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-100,-104,-115,-123,-124,-125,103,103,-118,-120,-126,-127,103,-119,103,103,-122,-121,]),'PRINT':([30,40,83,85,86,87,88,89,90,91,92,93,94,95,145,146,148,153,187,188,197,198,204,205,208,209,210,213,215,216,217,218,],[-87,104,104,-103,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-100,-104,-115,-123,-124,-125,104,104,-118,-120,-126,-127,104,-119,104,104,-122,-121,]),'READ':([30,40,83,85,86,87,88,89,90,91,92,93,94,95,145,146,148,153,187,188,197,198,204,205,208,209,210,213,215,216,217,218,],[-87,105,105,-103,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-100,-104,-115,-123,-124,-125,105,105,-118,-120,-126,-127,105,-119,105,105,-122,-121,]),'NOT':([30,31,37,40,48,49,50,51,53,55,56,57,59,60,78,83,85,86,87,88,89,90,91,92,93,94,95,102,103,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,128,138,139,140,141,142,143,144,145,146,148,149,150,151,152,153,156,157,171,180,186,187,188,194,197,198,199,204,205,207,208,209,210,211,213,215,216,217,218,],[-87,59,59,59,-79,-80,-81,-78,59,59,59,59,-82,-83,59,59,-103,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-72,-73,-74,-75,-76,-77,-100,-104,-115,59,59,59,59,-123,59,59,59,59,59,-124,-125,59,59,59,59,-118,-120,59,-126,-127,59,59,-119,59,59,-122,-121,]),'ADDRESS':([30,31,37,40,48,49,50,51,53,55,56,57,59,60,78,83,85,86,87,88,89,90,91,92,93,94,95,102,103,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,128,138,139,140,141,142,143,144,145,146,148,149,150,151,152,153,156,157,171,180,186,187,188,194,197,198,199,204,205,207,208,209,210,211,213,215,216,217,218,],[-87,60,60,60,-79,-80,-81,-78,60,60,60,60,-82,-83,60,60,-103,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-72,-73,-74,-75,-76,-77,-100,-104,-115,60,60,60,60,-123,60,60,60,60,60,-124,-125,60,60,60,60,-118,-120,60,-126,-127,60,60,-119,60,60,-122,-121,]),'INT_CONST':([30,31,37,40,48,49,50,51,53,55,56,57,59,60,78,83,85,86,87,88,89,90,91,92,93,94,95,102,103,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,128,138,139,140,141,142,143,144,145,146,148,149,150,151,152,153,156,157,171,180,186,187,188,194,197,198,199,204,205,207,208,209,210,211,213,215,216,217,218,],[-87,63,63,63,-79,-80,-81,-78,63,63,63,63,-82,-83,63,63,-103,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-72,-73,-74,-75,-76,-77,-100,-104,-115,63,63,63,63,-123,63,63,63,63,63,-124,-125,63,63,63,63,-118,-120,63,-126,-127,63,63,-119,63,63,-122,-121,]),'CHAR_CONST':([30,31,37,40,48,49,50,51,53,55,56,57,59,60,78,83,85,86,87,88,89,90,91,92,93,94,95,102,103,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,128,138,139,140,141,142,143,144,145,146,148,149,150,151,152,153,156,157,171,180,186,187,188,194,197,198,199,204,205,207,208,209,210,211,213,215,216,217,218,],[-87,64,64,64,-79,-80,-81,-78,64,64,64,64,-82,-83,64,64,-103,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-72,-73,-74,-75,-76,-77,-100,-104,-115,64,64,64,64,-123,64,64,64,64,64,-124,-125,64,64,64,64,-118,-120,64,-126,-127,64,64,-119,64,64,-122,-121,]),'FLOAT_CONST':([30,31,37,40,48,49,50,51,53,55,56,57,59,60,78,83,85,86,87,88,89,90,91,92,93,94,95,102,103,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,128,138,139,140,141,142,143,144,145,146,148,149,150,151,152,153,156,157,171,180,186,187,188,194,197,198,199,204,205,207,208,209,210,211,213,215,216,217,218,],[-87,65,65,65,-79,-80,-81,-78,65,65,65,65,-82,-83,65,65,-103,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-72,-73,-74,-75,-76,-77,-100,-104,-115,65,65,65,65,-123,65,65,65,65,65,-124,-125,65,65,65,65,-118,-120,65,-126,-127,65,65,-119,65,65,-122,-121,]),'STRING':([30,31,37,40,48,49,50,51,53,55,56,57,59,60,78,83,85,86,87,88,89,90,91,92,93,94,95,102,103,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,128,138,139,140,141,142,143,144,145,146,148,149,150,151,152,153,156,157,171,180,186,187,188,194,197,198,199,204,205,207,208,209,210,211,213,215,216,217,218,],[-87,66,66,66,-79,-80,-81,-78,66,66,66,66,-82,-83,66,66,-103,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-72,-73,-74,-75,-76,-77,-100,-104,-115,66,66,66,66,-123,66,66,66,66,66,-124,-125,66,66,66,66,-118,-120,66,-126,-127,66,66,-119,66,66,-122,-121,]),'ELSE':([88,89,90,91,92,93,94,95,145,148,153,187,188,204,205,208,209,213,217,218,],[-107,-108,-109,-110,-111,-112,-113,-114,-100,-115,-123,-124,-125,210,-120,-126,-127,-119,-122,-121,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global_declaration_list':([0,],[2,]),'global_declaration':([0,2,],[3,19,]),'function_definition':([0,2,],[4,4,]),'declaration':([0,2,7,20,26,40,83,152,],[5,5,28,28,41,86,86,186,]),'type_specifier':([0,2,7,20,26,32,40,53,83,132,152,],[6,6,29,29,29,72,29,121,29,72,29,]),'declarator':([0,2,6,16,29,38,72,],[7,7,20,34,42,42,135,]),'decl_body':([0,2,7,20,26,40,83,152,],[8,8,8,8,8,8,8,8,]),'direct_declarator':([0,2,6,14,16,29,38,72,],[13,13,13,33,13,13,13,13,]),'pointer':([0,2,6,16,17,29,38,72,],[14,14,14,14,35,14,14,14,]),'identifier':([0,2,6,14,16,29,31,32,37,38,40,53,55,56,57,72,78,83,102,103,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,128,134,138,149,150,151,152,156,157,171,180,186,194,197,198,199,207,210,211,215,216,],[15,15,15,15,15,15,61,73,61,15,61,61,61,61,61,15,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,178,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'init_declarator_list_opt':([6,29,],[21,21,]),'init_declarator_list':([6,29,],[22,22,]),'empty':([6,7,20,29,31,32,40,83,102,152,156,186,197,198,199,207,210,211,215,216,],[23,27,27,23,45,71,84,147,147,147,147,147,147,147,147,147,147,147,147,147,]),'init_declarator':([6,29,38,],[24,24,81,]),'declaration_list_opt':([7,20,],[25,36,]),'declaration_list':([7,20,],[26,26,]),'compound_statement':([25,36,40,83,197,198,210,215,216,],[39,75,89,89,89,89,89,89,89,]),'constant_expression_opt':([31,],[43,]),'constant_expression':([31,],[44,]),'binary_expression':([31,37,40,53,78,83,102,103,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,128,138,149,150,151,152,156,157,180,186,194,197,198,199,207,210,211,215,216,],[46,79,79,79,79,79,79,79,158,159,160,161,162,163,164,165,166,167,168,169,170,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'cast_expression':([31,37,40,53,57,78,83,102,103,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,128,138,149,150,151,152,156,157,171,180,186,194,197,198,199,207,210,211,215,216,],[47,47,47,47,130,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,191,47,47,47,47,47,47,47,47,47,47,47,]),'unary_expression':([31,37,40,53,55,56,57,78,83,102,103,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,128,138,149,150,151,152,156,157,171,180,186,194,197,198,199,207,210,211,215,216,],[52,80,80,80,127,129,52,80,80,80,80,52,52,52,52,52,52,52,52,52,52,52,52,52,80,80,80,80,80,80,80,80,80,80,52,80,80,80,80,80,80,80,80,80,80,80,]),'postfix_expression':([31,37,40,53,55,56,57,78,83,102,103,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,128,138,149,150,151,152,156,157,171,180,186,194,197,198,199,207,210,211,215,216,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'unary_operator':([31,37,40,53,55,56,57,78,83,102,103,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,128,138,149,150,151,152,156,157,171,180,186,194,197,198,199,207,210,211,215,216,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'primary_expression':([31,37,40,53,55,56,57,78,83,102,103,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,128,138,149,150,151,152,156,157,171,180,186,194,197,198,199,207,210,211,215,216,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'constant':([31,37,40,53,55,56,57,78,83,102,103,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,128,138,149,150,151,152,156,157,171,180,186,194,197,198,199,207,210,211,215,216,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'parameter_list':([32,],[67,]),'identifier_list_opt':([32,],[68,]),'parameter_declaration':([32,132,],[69,177,]),'identifier_list':([32,],[70,]),'initializer':([37,78,180,],[76,137,196,]),'assignment_expression':([37,40,53,78,83,102,103,123,124,128,138,149,150,151,152,156,157,180,186,194,197,198,199,207,210,211,215,216,],[77,106,106,77,106,106,106,106,176,106,181,106,183,106,106,106,176,77,106,203,106,106,106,106,106,106,106,106,]),'block_item_list_opt':([40,],[82,]),'block_item_list':([40,],[83,]),'block_item':([40,83,],[85,146,]),'statement':([40,83,197,198,210,215,216,],[87,87,204,205,213,217,218,]),'expression_statement':([40,83,197,198,210,215,216,],[88,88,88,88,88,88,88,]),'selection_statement':([40,83,197,198,210,215,216,],[90,90,90,90,90,90,90,]),'interation_statement':([40,83,197,198,210,215,216,],[91,91,91,91,91,91,91,]),'jump_statement':([40,83,197,198,210,215,216,],[92,92,92,92,92,92,92,]),'assert_statement':([40,83,197,198,210,215,216,],[93,93,93,93,93,93,93,]),'print_statement':([40,83,197,198,210,215,216,],[94,94,94,94,94,94,94,]),'read_statement':([40,83,197,198,210,215,216,],[95,95,95,95,95,95,95,]),'expression_opt':([40,83,102,152,156,186,197,198,199,207,210,211,215,216,],[96,96,154,185,189,200,96,96,206,212,96,214,96,96,]),'expression':([40,53,83,102,103,123,128,149,151,152,156,186,197,198,199,207,210,211,215,216,],[98,122,98,98,155,173,122,182,184,98,98,98,98,98,98,98,98,98,98,98,]),'initializer_list':([78,],[136,]),'assignment_operator':([80,],[138,]),'argument_expression':([124,157,],[175,190,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> global_declaration_list','program',1,'p_program','uc_parser.py',149),
  ('global_declaration_list -> global_declaration','global_declaration_list',1,'p_global_declaration_list','uc_parser.py',156),
  ('global_declaration_list -> global_declaration_list global_declaration','global_declaration_list',2,'p_global_declaration_list','uc_parser.py',157),
  ('global_declaration -> function_definition','global_declaration',1,'p_global_declaration_1','uc_parser.py',163),
  ('global_declaration -> declaration','global_declaration',1,'p_global_declaration_2','uc_parser.py',169),
  ('function_definition -> type_specifier declarator declaration_list_opt compound_statement','function_definition',4,'p_function_definition_1','uc_parser.py',175),
  ('function_definition -> declarator declaration_list_opt compound_statement','function_definition',3,'p_function_definition_2','uc_parser.py',182),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','uc_parser.py',189),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','uc_parser.py',190),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','uc_parser.py',191),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','uc_parser.py',192),
  ('declaration_list_opt -> declaration_list','declaration_list_opt',1,'p_declaration_list_opt','uc_parser.py',199),
  ('declaration_list_opt -> empty','declaration_list_opt',1,'p_declaration_list_opt','uc_parser.py',200),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','uc_parser.py',206),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','uc_parser.py',207),
  ('declarator -> direct_declarator','declarator',1,'p_declarator_1','uc_parser.py',213),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator_2','uc_parser.py',219),
  ('pointer -> TIMES','pointer',1,'p_pointer','uc_parser.py',225),
  ('pointer -> TIMES pointer','pointer',2,'p_pointer','uc_parser.py',226),
  ('direct_declarator -> identifier','direct_declarator',1,'p_direct_declarator_1','uc_parser.py',241),
  ('direct_declarator -> LPAREN declarator RPAREN','direct_declarator',3,'p_direct_declarator_2','uc_parser.py',248),
  ('direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET','direct_declarator',4,'p_direct_declarator_3','uc_parser.py',254),
  ('direct_declarator -> direct_declarator LPAREN parameter_list RPAREN','direct_declarator',4,'p_direct_declarator_4','uc_parser.py',263),
  ('direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN','direct_declarator',4,'p_direct_declarator_4','uc_parser.py',264),
  ('identifier -> ID','identifier',1,'p_identifier','uc_parser.py',272),
  ('identifier_list_opt -> identifier_list','identifier_list_opt',1,'p_identifier_list_opt','uc_parser.py',280),
  ('identifier_list_opt -> empty','identifier_list_opt',1,'p_identifier_list_opt','uc_parser.py',281),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','uc_parser.py',287),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','uc_parser.py',288),
  ('constant_expression_opt -> constant_expression','constant_expression_opt',1,'p_constant_expression_opt','uc_parser.py',298),
  ('constant_expression_opt -> empty','constant_expression_opt',1,'p_constant_expression_opt','uc_parser.py',299),
  ('constant_expression -> binary_expression','constant_expression',1,'p_constant_expression','uc_parser.py',305),
  ('binary_expression -> cast_expression','binary_expression',1,'p_binary_expression','uc_parser.py',311),
  ('binary_expression -> binary_expression TIMES binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',312),
  ('binary_expression -> binary_expression DIVIDE binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',313),
  ('binary_expression -> binary_expression MOD binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',314),
  ('binary_expression -> binary_expression PLUS binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',315),
  ('binary_expression -> binary_expression MINUS binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',316),
  ('binary_expression -> binary_expression LESSTHAN binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',317),
  ('binary_expression -> binary_expression LESSTHANEQ binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',318),
  ('binary_expression -> binary_expression GREATERTHANEQ binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',319),
  ('binary_expression -> binary_expression GREATERTHAN binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',320),
  ('binary_expression -> binary_expression EQ binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',321),
  ('binary_expression -> binary_expression NOTEQ binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',322),
  ('binary_expression -> binary_expression AND binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',323),
  ('binary_expression -> binary_expression OR binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',324),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression_1','uc_parser.py',333),
  ('cast_expression -> LPAREN type_specifier RPAREN cast_expression','cast_expression',4,'p_cast_expression_2','uc_parser.py',339),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression_1','uc_parser.py',345),
  ('unary_expression -> PLUSPLUS unary_expression','unary_expression',2,'p_unary_expression_2','uc_parser.py',351),
  ('unary_expression -> MINUSMINUS unary_expression','unary_expression',2,'p_unary_expression_2','uc_parser.py',352),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression_2','uc_parser.py',353),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression_1','uc_parser.py',359),
  ('postfix_expression -> postfix_expression LBRACKET expression RBRACKET','postfix_expression',4,'p_postfix_expression_2','uc_parser.py',365),
  ('postfix_expression -> postfix_expression LPAREN RPAREN','postfix_expression',3,'p_postfix_expression_3','uc_parser.py',371),
  ('postfix_expression -> postfix_expression LPAREN argument_expression RPAREN','postfix_expression',4,'p_postfix_expression_3','uc_parser.py',372),
  ('postfix_expression -> postfix_expression PLUSPLUS','postfix_expression',2,'p_postfix_expression_4','uc_parser.py',378),
  ('postfix_expression -> postfix_expression MINUSMINUS','postfix_expression',2,'p_postfix_expression_4','uc_parser.py',379),
  ('primary_expression -> identifier','primary_expression',1,'p_primary_expression_1','uc_parser.py',385),
  ('primary_expression -> constant','primary_expression',1,'p_primary_expression_1','uc_parser.py',386),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression_2','uc_parser.py',392),
  ('constant -> INT_CONST','constant',1,'p_constant_1','uc_parser.py',398),
  ('constant -> CHAR_CONST','constant',1,'p_constant_2','uc_parser.py',404),
  ('constant -> FLOAT_CONST','constant',1,'p_constant_3','uc_parser.py',410),
  ('constant -> STRING','constant',1,'p_constant_4','uc_parser.py',416),
  ('expression -> assignment_expression','expression',1,'p_expression_1','uc_parser.py',422),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression_2','uc_parser.py',428),
  ('argument_expression -> assignment_expression','argument_expression',1,'p_argument_expression','uc_parser.py',438),
  ('argument_expression -> argument_expression COMMA assignment_expression','argument_expression',3,'p_argument_expression','uc_parser.py',439),
  ('assignment_expression -> binary_expression','assignment_expression',1,'p_assignment_expression','uc_parser.py',451),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','uc_parser.py',452),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','uc_parser.py',461),
  ('assignment_operator -> TIMESEQ','assignment_operator',1,'p_assignment_operator','uc_parser.py',462),
  ('assignment_operator -> DIVEQ','assignment_operator',1,'p_assignment_operator','uc_parser.py',463),
  ('assignment_operator -> MODEQ','assignment_operator',1,'p_assignment_operator','uc_parser.py',464),
  ('assignment_operator -> PLUSEQ','assignment_operator',1,'p_assignment_operator','uc_parser.py',465),
  ('assignment_operator -> MINUSEQ','assignment_operator',1,'p_assignment_operator','uc_parser.py',466),
  ('unary_operator -> AND','unary_operator',1,'p_unary_operator','uc_parser.py',472),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator','uc_parser.py',473),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','uc_parser.py',474),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','uc_parser.py',475),
  ('unary_operator -> NOT','unary_operator',1,'p_unary_operator','uc_parser.py',476),
  ('unary_operator -> ADDRESS','unary_operator',1,'p_unary_operator','uc_parser.py',477),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','uc_parser.py',482),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','uc_parser.py',483),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','uc_parser.py',492),
  ('declaration -> decl_body SEMI','declaration',2,'p_declaration','uc_parser.py',500),
  ('decl_body -> type_specifier init_declarator_list_opt','decl_body',2,'p_decl_body','uc_parser.py',505),
  ('init_declarator_list_opt -> init_declarator_list','init_declarator_list_opt',1,'p_init_declarator_list_opt','uc_parser.py',517),
  ('init_declarator_list_opt -> empty','init_declarator_list_opt',1,'p_init_declarator_list_opt','uc_parser.py',518),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','uc_parser.py',523),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','uc_parser.py',524),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','uc_parser.py',529),
  ('init_declarator -> declarator EQUALS initializer','init_declarator',3,'p_init_declarator','uc_parser.py',530),
  ('initializer -> assignment_expression','initializer',1,'p_initializer_1','uc_parser.py',535),
  ('initializer -> LBRACE initializer_list RBRACE','initializer',3,'p_initializer_2','uc_parser.py',539),
  ('initializer -> LBRACE initializer_list COMMA RBRACE','initializer',4,'p_initializer_2','uc_parser.py',540),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','uc_parser.py',548),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','uc_parser.py',549),
  ('compound_statement -> LBRACE block_item_list_opt RBRACE','compound_statement',3,'p_compound_statement','uc_parser.py',559),
  ('block_item_list_opt -> block_item_list','block_item_list_opt',1,'p_block_item_list_opt','uc_parser.py',565),
  ('block_item_list_opt -> empty','block_item_list_opt',1,'p_block_item_list_opt','uc_parser.py',566),
  ('block_item_list -> block_item','block_item_list',1,'p_block_item_list','uc_parser.py',571),
  ('block_item_list -> block_item_list block_item','block_item_list',2,'p_block_item_list','uc_parser.py',572),
  ('block_item -> declaration','block_item',1,'p_block_item','uc_parser.py',578),
  ('block_item -> statement','block_item',1,'p_block_item','uc_parser.py',579),
  ('statement -> expression_statement','statement',1,'p_statement','uc_parser.py',584),
  ('statement -> compound_statement','statement',1,'p_statement','uc_parser.py',585),
  ('statement -> selection_statement','statement',1,'p_statement','uc_parser.py',586),
  ('statement -> interation_statement','statement',1,'p_statement','uc_parser.py',587),
  ('statement -> jump_statement','statement',1,'p_statement','uc_parser.py',588),
  ('statement -> assert_statement','statement',1,'p_statement','uc_parser.py',589),
  ('statement -> print_statement','statement',1,'p_statement','uc_parser.py',590),
  ('statement -> read_statement','statement',1,'p_statement','uc_parser.py',591),
  ('expression_statement -> expression_opt SEMI','expression_statement',2,'p_expression_statement','uc_parser.py',596),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt','uc_parser.py',603),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','uc_parser.py',604),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement_1','uc_parser.py',609),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement_2','uc_parser.py',614),
  ('interation_statement -> WHILE LPAREN expression RPAREN statement','interation_statement',5,'p_interation_statement_1','uc_parser.py',619),
  ('interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement','interation_statement',9,'p_interation_statement_2','uc_parser.py',624),
  ('interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement','interation_statement',8,'p_interation_statement_3','uc_parser.py',629),
  ('jump_statement -> BREAK SEMI','jump_statement',2,'p_jump_statement_1','uc_parser.py',634),
  ('jump_statement -> RETURN expression_opt SEMI','jump_statement',3,'p_jump_statement_2','uc_parser.py',639),
  ('assert_statement -> ASSERT expression SEMI','assert_statement',3,'p_assert_statement_2','uc_parser.py',644),
  ('print_statement -> PRINT LPAREN expression_opt RPAREN SEMI','print_statement',5,'p_print_statement','uc_parser.py',649),
  ('read_statement -> READ LPAREN argument_expression RPAREN SEMI','read_statement',5,'p_read_statement','uc_parser.py',654),
  ('empty -> <empty>','empty',0,'p_empty','uc_parser.py',659),
]
