Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> global_declaration_list
Rule 2     global_declaration_list -> global_declaration
Rule 3     global_declaration_list -> global_declaration_list global_declaration
Rule 4     global_declaration -> function_definition
Rule 5     global_declaration -> declaration
Rule 6     function_definition -> type_specifier declarator declaration_list_opt compound_statement
Rule 7     function_definition -> declarator declaration_list_opt compound_statement
Rule 8     type_specifier -> VOID
Rule 9     type_specifier -> CHAR
Rule 10    type_specifier -> INT
Rule 11    type_specifier -> FLOAT
Rule 12    declaration_list_opt -> declaration_list
Rule 13    declaration_list_opt -> empty
Rule 14    declaration_list -> declaration
Rule 15    declaration_list -> declaration_list declaration
Rule 16    declarator -> direct_declarator
Rule 17    declarator -> pointer direct_declarator
Rule 18    pointer -> TIMES
Rule 19    pointer -> TIMES pointer
Rule 20    direct_declarator -> identifier
Rule 21    direct_declarator -> LPAREN declarator RPAREN
Rule 22    direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET
Rule 23    direct_declarator -> direct_declarator LPAREN parameter_list RPAREN
Rule 24    direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN
Rule 25    identifier -> ID
Rule 26    identifier_list_opt -> identifier_list
Rule 27    identifier_list_opt -> empty
Rule 28    identifier_list -> identifier
Rule 29    identifier_list -> identifier_list COMMA identifier
Rule 30    constant_expression_opt -> constant_expression
Rule 31    constant_expression_opt -> empty
Rule 32    constant_expression -> binary_expression
Rule 33    binary_expression -> cast_expression
Rule 34    binary_expression -> binary_expression TIMES binary_expression
Rule 35    binary_expression -> binary_expression DIVIDE binary_expression
Rule 36    binary_expression -> binary_expression MOD binary_expression
Rule 37    binary_expression -> binary_expression PLUS binary_expression
Rule 38    binary_expression -> binary_expression MINUS binary_expression
Rule 39    binary_expression -> binary_expression LESSTHAN binary_expression
Rule 40    binary_expression -> binary_expression LESSTHANEQ binary_expression
Rule 41    binary_expression -> binary_expression GREATERTHANEQ binary_expression
Rule 42    binary_expression -> binary_expression GREATERTHAN binary_expression
Rule 43    binary_expression -> binary_expression EQ binary_expression
Rule 44    binary_expression -> binary_expression NOTEQ binary_expression
Rule 45    binary_expression -> binary_expression AND binary_expression
Rule 46    binary_expression -> binary_expression OR binary_expression
Rule 47    cast_expression -> unary_expression
Rule 48    cast_expression -> LPAREN type_specifier RPAREN cast_expression
Rule 49    unary_expression -> postfix_expression
Rule 50    unary_expression -> PLUSPLUS unary_expression
Rule 51    unary_expression -> MINUSMINUS unary_expression
Rule 52    unary_expression -> unary_operator cast_expression
Rule 53    postfix_expression -> primary_expression
Rule 54    postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 55    postfix_expression -> postfix_expression LPAREN RPAREN
Rule 56    postfix_expression -> postfix_expression LPAREN argument_expression RPAREN
Rule 57    postfix_expression -> postfix_expression PLUSPLUS
Rule 58    postfix_expression -> postfix_expression MINUSMINUS
Rule 59    primary_expression -> identifier
Rule 60    primary_expression -> constant
Rule 61    primary_expression -> LPAREN expression RPAREN
Rule 62    constant -> INT_CONST
Rule 63    constant -> CHAR_CONST
Rule 64    constant -> FLOAT_CONST
Rule 65    constant -> STRING
Rule 66    expression -> assignment_expression
Rule 67    expression -> expression COMMA assignment_expression
Rule 68    argument_expression -> assignment_expression
Rule 69    argument_expression -> argument_expression COMMA assignment_expression
Rule 70    assignment_expression -> binary_expression
Rule 71    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 72    assignment_operator -> EQUALS
Rule 73    assignment_operator -> TIMESEQ
Rule 74    assignment_operator -> DIVEQ
Rule 75    assignment_operator -> MODEQ
Rule 76    assignment_operator -> PLUSEQ
Rule 77    assignment_operator -> MINUSEQ
Rule 78    unary_operator -> AND
Rule 79    unary_operator -> TIMES
Rule 80    unary_operator -> PLUS
Rule 81    unary_operator -> MINUS
Rule 82    unary_operator -> NOT
Rule 83    unary_operator -> ADDRESS
Rule 84    parameter_list -> parameter_declaration
Rule 85    parameter_list -> parameter_list COMMA parameter_declaration
Rule 86    parameter_declaration -> type_specifier declarator
Rule 87    declaration -> decl_body SEMI
Rule 88    decl_body -> type_specifier init_declarator_list_opt
Rule 89    init_declarator_list_opt -> init_declarator_list
Rule 90    init_declarator_list_opt -> empty
Rule 91    init_declarator_list -> init_declarator
Rule 92    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 93    init_declarator -> declarator
Rule 94    init_declarator -> declarator EQUALS initializer
Rule 95    initializer -> assignment_expression
Rule 96    initializer -> LBRACE initializer_list RBRACE
Rule 97    initializer -> LBRACE initializer_list COMMA RBRACE
Rule 98    initializer_list -> initializer
Rule 99    initializer_list -> initializer_list COMMA initializer
Rule 100   compound_statement -> LBRACE block_item_list_opt RBRACE
Rule 101   block_item_list_opt -> block_item_list
Rule 102   block_item_list_opt -> empty
Rule 103   block_item_list -> block_item
Rule 104   block_item_list -> block_item_list block_item
Rule 105   block_item -> declaration
Rule 106   block_item -> statement
Rule 107   statement -> expression_statement
Rule 108   statement -> compound_statement
Rule 109   statement -> selection_statement
Rule 110   statement -> interation_statement
Rule 111   statement -> jump_statement
Rule 112   statement -> assert_statement
Rule 113   statement -> print_statement
Rule 114   statement -> read_statement
Rule 115   expression_statement -> expression_opt SEMI
Rule 116   expression_opt -> expression
Rule 117   expression_opt -> empty
Rule 118   selection_statement -> IF LPAREN expression RPAREN statement
Rule 119   selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 120   interation_statement -> WHILE LPAREN expression RPAREN statement
Rule 121   interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
Rule 122   interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
Rule 123   jump_statement -> BREAK SEMI
Rule 124   jump_statement -> RETURN expression_opt SEMI
Rule 125   assert_statement -> ASSERT expression SEMI
Rule 126   print_statement -> PRINT LPAREN expression_opt RPAREN SEMI
Rule 127   read_statement -> READ LPAREN argument_expression RPAREN SEMI
Rule 128   empty -> <empty>

Terminals, with rules where they appear

ADDRESS              : 83
AND                  : 45 78
ASSERT               : 125
BREAK                : 123
CHAR                 : 9
CHAR_CONST           : 63
COMMA                : 29 67 69 85 92 97 99
DIVEQ                : 74
DIVIDE               : 35
ELSE                 : 119
EQ                   : 43
EQUALS               : 72 94
FLOAT                : 11
FLOAT_CONST          : 64
FOR                  : 121 122
GREATERTHAN          : 42
GREATERTHANEQ        : 41
ID                   : 25
IF                   : 118 119
INT                  : 10
INT_CONST            : 62
LBRACE               : 96 97 100
LBRACKET             : 22 54
LESSTHAN             : 39
LESSTHANEQ           : 40
LPAREN               : 21 23 24 48 55 56 61 118 119 120 121 122 126 127
MINUS                : 38 81
MINUSEQ              : 77
MINUSMINUS           : 51 58
MOD                  : 36
MODEQ                : 75
NOT                  : 82
NOTEQ                : 44
OR                   : 46
PLUS                 : 37 80
PLUSEQ               : 76
PLUSPLUS             : 50 57
PRINT                : 126
RBRACE               : 96 97 100
RBRACKET             : 22 54
READ                 : 127
RETURN               : 124
RPAREN               : 21 23 24 48 55 56 61 118 119 120 121 122 126 127
SEMI                 : 87 115 121 121 122 123 124 125 126 127
STRING               : 65
TIMES                : 18 19 34 79
TIMESEQ              : 73
VOID                 : 8
WHILE                : 120
error                : 

Nonterminals, with rules where they appear

argument_expression  : 56 69 127
assert_statement     : 112
assignment_expression : 66 67 68 69 71 95
assignment_operator  : 71
binary_expression    : 32 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 70
block_item           : 103 104
block_item_list      : 101 104
block_item_list_opt  : 100
cast_expression      : 33 48 52
compound_statement   : 6 7 108
constant             : 60
constant_expression  : 30
constant_expression_opt : 22
decl_body            : 87
declaration          : 5 14 15 105 122
declaration_list     : 12 15
declaration_list_opt : 6 7
declarator           : 6 7 21 86 93 94
direct_declarator    : 16 17 22 23 24
empty                : 13 27 31 90 102 117
expression           : 54 61 67 116 118 119 120 125
expression_opt       : 115 121 121 121 122 122 124 126
expression_statement : 107
function_definition  : 4
global_declaration   : 2 3
global_declaration_list : 1 3
identifier           : 20 28 29 59
identifier_list      : 26 29
identifier_list_opt  : 24
init_declarator      : 91 92
init_declarator_list : 89 92
init_declarator_list_opt : 88
initializer          : 94 98 99
initializer_list     : 96 97 99
interation_statement : 110
jump_statement       : 111
parameter_declaration : 84 85
parameter_list       : 23 85
pointer              : 17 19
postfix_expression   : 49 54 55 56 57 58
primary_expression   : 53
print_statement      : 113
program              : 0
read_statement       : 114
selection_statement  : 109
statement            : 106 118 119 119 120 121 122
type_specifier       : 6 48 86 88
unary_expression     : 47 50 51 71
unary_operator       : 52

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . global_declaration_list
    (2) global_declaration_list -> . global_declaration
    (3) global_declaration_list -> . global_declaration_list global_declaration
    (4) global_declaration -> . function_definition
    (5) global_declaration -> . declaration
    (6) function_definition -> . type_specifier declarator declaration_list_opt compound_statement
    (7) function_definition -> . declarator declaration_list_opt compound_statement
    (87) declaration -> . decl_body SEMI
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT
    (16) declarator -> . direct_declarator
    (17) declarator -> . pointer direct_declarator
    (88) decl_body -> . type_specifier init_declarator_list_opt
    (20) direct_declarator -> . identifier
    (21) direct_declarator -> . LPAREN declarator RPAREN
    (22) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (23) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (24) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (18) pointer -> . TIMES
    (19) pointer -> . TIMES pointer
    (25) identifier -> . ID

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    LPAREN          shift and go to state 16
    TIMES           shift and go to state 17
    ID              shift and go to state 18

    program                        shift and go to state 1
    global_declaration_list        shift and go to state 2
    global_declaration             shift and go to state 3
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    type_specifier                 shift and go to state 6
    declarator                     shift and go to state 7
    decl_body                      shift and go to state 8
    direct_declarator              shift and go to state 13
    pointer                        shift and go to state 14
    identifier                     shift and go to state 15

state 1

    (0) S' -> program .



state 2

    (1) program -> global_declaration_list .
    (3) global_declaration_list -> global_declaration_list . global_declaration
    (4) global_declaration -> . function_definition
    (5) global_declaration -> . declaration
    (6) function_definition -> . type_specifier declarator declaration_list_opt compound_statement
    (7) function_definition -> . declarator declaration_list_opt compound_statement
    (87) declaration -> . decl_body SEMI
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT
    (16) declarator -> . direct_declarator
    (17) declarator -> . pointer direct_declarator
    (88) decl_body -> . type_specifier init_declarator_list_opt
    (20) direct_declarator -> . identifier
    (21) direct_declarator -> . LPAREN declarator RPAREN
    (22) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (23) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (24) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (18) pointer -> . TIMES
    (19) pointer -> . TIMES pointer
    (25) identifier -> . ID

    $end            reduce using rule 1 (program -> global_declaration_list .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    LPAREN          shift and go to state 16
    TIMES           shift and go to state 17
    ID              shift and go to state 18

    global_declaration             shift and go to state 19
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    type_specifier                 shift and go to state 6
    declarator                     shift and go to state 7
    decl_body                      shift and go to state 8
    direct_declarator              shift and go to state 13
    pointer                        shift and go to state 14
    identifier                     shift and go to state 15

state 3

    (2) global_declaration_list -> global_declaration .

    VOID            reduce using rule 2 (global_declaration_list -> global_declaration .)
    CHAR            reduce using rule 2 (global_declaration_list -> global_declaration .)
    INT             reduce using rule 2 (global_declaration_list -> global_declaration .)
    FLOAT           reduce using rule 2 (global_declaration_list -> global_declaration .)
    LPAREN          reduce using rule 2 (global_declaration_list -> global_declaration .)
    TIMES           reduce using rule 2 (global_declaration_list -> global_declaration .)
    ID              reduce using rule 2 (global_declaration_list -> global_declaration .)
    $end            reduce using rule 2 (global_declaration_list -> global_declaration .)


state 4

    (4) global_declaration -> function_definition .

    VOID            reduce using rule 4 (global_declaration -> function_definition .)
    CHAR            reduce using rule 4 (global_declaration -> function_definition .)
    INT             reduce using rule 4 (global_declaration -> function_definition .)
    FLOAT           reduce using rule 4 (global_declaration -> function_definition .)
    LPAREN          reduce using rule 4 (global_declaration -> function_definition .)
    TIMES           reduce using rule 4 (global_declaration -> function_definition .)
    ID              reduce using rule 4 (global_declaration -> function_definition .)
    $end            reduce using rule 4 (global_declaration -> function_definition .)


state 5

    (5) global_declaration -> declaration .

    VOID            reduce using rule 5 (global_declaration -> declaration .)
    CHAR            reduce using rule 5 (global_declaration -> declaration .)
    INT             reduce using rule 5 (global_declaration -> declaration .)
    FLOAT           reduce using rule 5 (global_declaration -> declaration .)
    LPAREN          reduce using rule 5 (global_declaration -> declaration .)
    TIMES           reduce using rule 5 (global_declaration -> declaration .)
    ID              reduce using rule 5 (global_declaration -> declaration .)
    $end            reduce using rule 5 (global_declaration -> declaration .)


state 6

    (6) function_definition -> type_specifier . declarator declaration_list_opt compound_statement
    (88) decl_body -> type_specifier . init_declarator_list_opt
    (16) declarator -> . direct_declarator
    (17) declarator -> . pointer direct_declarator
    (89) init_declarator_list_opt -> . init_declarator_list
    (90) init_declarator_list_opt -> . empty
    (20) direct_declarator -> . identifier
    (21) direct_declarator -> . LPAREN declarator RPAREN
    (22) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (23) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (24) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (18) pointer -> . TIMES
    (19) pointer -> . TIMES pointer
    (91) init_declarator_list -> . init_declarator
    (92) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (128) empty -> .
    (25) identifier -> . ID
    (93) init_declarator -> . declarator
    (94) init_declarator -> . declarator EQUALS initializer

    LPAREN          shift and go to state 16
    TIMES           shift and go to state 17
    SEMI            reduce using rule 128 (empty -> .)
    ID              shift and go to state 18

    declarator                     shift and go to state 20
    init_declarator_list_opt       shift and go to state 21
    direct_declarator              shift and go to state 13
    pointer                        shift and go to state 14
    init_declarator_list           shift and go to state 22
    empty                          shift and go to state 23
    identifier                     shift and go to state 15
    init_declarator                shift and go to state 24

state 7

    (7) function_definition -> declarator . declaration_list_opt compound_statement
    (12) declaration_list_opt -> . declaration_list
    (13) declaration_list_opt -> . empty
    (14) declaration_list -> . declaration
    (15) declaration_list -> . declaration_list declaration
    (128) empty -> .
    (87) declaration -> . decl_body SEMI
    (88) decl_body -> . type_specifier init_declarator_list_opt
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT

    LBRACE          reduce using rule 128 (empty -> .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    declaration_list_opt           shift and go to state 25
    declaration_list               shift and go to state 26
    empty                          shift and go to state 27
    declaration                    shift and go to state 28
    decl_body                      shift and go to state 8
    type_specifier                 shift and go to state 29

state 8

    (87) declaration -> decl_body . SEMI

    SEMI            shift and go to state 30


state 9

    (8) type_specifier -> VOID .

    LPAREN          reduce using rule 8 (type_specifier -> VOID .)
    TIMES           reduce using rule 8 (type_specifier -> VOID .)
    ID              reduce using rule 8 (type_specifier -> VOID .)
    SEMI            reduce using rule 8 (type_specifier -> VOID .)
    RPAREN          reduce using rule 8 (type_specifier -> VOID .)


state 10

    (9) type_specifier -> CHAR .

    LPAREN          reduce using rule 9 (type_specifier -> CHAR .)
    TIMES           reduce using rule 9 (type_specifier -> CHAR .)
    ID              reduce using rule 9 (type_specifier -> CHAR .)
    SEMI            reduce using rule 9 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 9 (type_specifier -> CHAR .)


state 11

    (10) type_specifier -> INT .

    LPAREN          reduce using rule 10 (type_specifier -> INT .)
    TIMES           reduce using rule 10 (type_specifier -> INT .)
    ID              reduce using rule 10 (type_specifier -> INT .)
    SEMI            reduce using rule 10 (type_specifier -> INT .)
    RPAREN          reduce using rule 10 (type_specifier -> INT .)


state 12

    (11) type_specifier -> FLOAT .

    LPAREN          reduce using rule 11 (type_specifier -> FLOAT .)
    TIMES           reduce using rule 11 (type_specifier -> FLOAT .)
    ID              reduce using rule 11 (type_specifier -> FLOAT .)
    SEMI            reduce using rule 11 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 11 (type_specifier -> FLOAT .)


state 13

    (16) declarator -> direct_declarator .
    (22) direct_declarator -> direct_declarator . LBRACKET constant_expression_opt RBRACKET
    (23) direct_declarator -> direct_declarator . LPAREN parameter_list RPAREN
    (24) direct_declarator -> direct_declarator . LPAREN identifier_list_opt RPAREN

    VOID            reduce using rule 16 (declarator -> direct_declarator .)
    CHAR            reduce using rule 16 (declarator -> direct_declarator .)
    INT             reduce using rule 16 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 16 (declarator -> direct_declarator .)
    LBRACE          reduce using rule 16 (declarator -> direct_declarator .)
    EQUALS          reduce using rule 16 (declarator -> direct_declarator .)
    COMMA           reduce using rule 16 (declarator -> direct_declarator .)
    SEMI            reduce using rule 16 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 16 (declarator -> direct_declarator .)
    LBRACKET        shift and go to state 31
    LPAREN          shift and go to state 32


state 14

    (17) declarator -> pointer . direct_declarator
    (20) direct_declarator -> . identifier
    (21) direct_declarator -> . LPAREN declarator RPAREN
    (22) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (23) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (24) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (25) identifier -> . ID

    LPAREN          shift and go to state 16
    ID              shift and go to state 18

    direct_declarator              shift and go to state 33
    identifier                     shift and go to state 15

state 15

    (20) direct_declarator -> identifier .

    LBRACKET        reduce using rule 20 (direct_declarator -> identifier .)
    LPAREN          reduce using rule 20 (direct_declarator -> identifier .)
    VOID            reduce using rule 20 (direct_declarator -> identifier .)
    CHAR            reduce using rule 20 (direct_declarator -> identifier .)
    INT             reduce using rule 20 (direct_declarator -> identifier .)
    FLOAT           reduce using rule 20 (direct_declarator -> identifier .)
    LBRACE          reduce using rule 20 (direct_declarator -> identifier .)
    EQUALS          reduce using rule 20 (direct_declarator -> identifier .)
    COMMA           reduce using rule 20 (direct_declarator -> identifier .)
    SEMI            reduce using rule 20 (direct_declarator -> identifier .)
    RPAREN          reduce using rule 20 (direct_declarator -> identifier .)


state 16

    (21) direct_declarator -> LPAREN . declarator RPAREN
    (16) declarator -> . direct_declarator
    (17) declarator -> . pointer direct_declarator
    (20) direct_declarator -> . identifier
    (21) direct_declarator -> . LPAREN declarator RPAREN
    (22) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (23) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (24) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (18) pointer -> . TIMES
    (19) pointer -> . TIMES pointer
    (25) identifier -> . ID

    LPAREN          shift and go to state 16
    TIMES           shift and go to state 17
    ID              shift and go to state 18

    declarator                     shift and go to state 34
    direct_declarator              shift and go to state 13
    pointer                        shift and go to state 14
    identifier                     shift and go to state 15

state 17

    (18) pointer -> TIMES .
    (19) pointer -> TIMES . pointer
    (18) pointer -> . TIMES
    (19) pointer -> . TIMES pointer

    LPAREN          reduce using rule 18 (pointer -> TIMES .)
    ID              reduce using rule 18 (pointer -> TIMES .)
    TIMES           shift and go to state 17

    pointer                        shift and go to state 35

state 18

    (25) identifier -> ID .

    LBRACKET        reduce using rule 25 (identifier -> ID .)
    LPAREN          reduce using rule 25 (identifier -> ID .)
    VOID            reduce using rule 25 (identifier -> ID .)
    CHAR            reduce using rule 25 (identifier -> ID .)
    INT             reduce using rule 25 (identifier -> ID .)
    FLOAT           reduce using rule 25 (identifier -> ID .)
    LBRACE          reduce using rule 25 (identifier -> ID .)
    EQUALS          reduce using rule 25 (identifier -> ID .)
    COMMA           reduce using rule 25 (identifier -> ID .)
    SEMI            reduce using rule 25 (identifier -> ID .)
    RPAREN          reduce using rule 25 (identifier -> ID .)
    PLUSPLUS        reduce using rule 25 (identifier -> ID .)
    MINUSMINUS      reduce using rule 25 (identifier -> ID .)
    TIMES           reduce using rule 25 (identifier -> ID .)
    DIVIDE          reduce using rule 25 (identifier -> ID .)
    MOD             reduce using rule 25 (identifier -> ID .)
    PLUS            reduce using rule 25 (identifier -> ID .)
    MINUS           reduce using rule 25 (identifier -> ID .)
    LESSTHAN        reduce using rule 25 (identifier -> ID .)
    LESSTHANEQ      reduce using rule 25 (identifier -> ID .)
    GREATERTHANEQ   reduce using rule 25 (identifier -> ID .)
    GREATERTHAN     reduce using rule 25 (identifier -> ID .)
    EQ              reduce using rule 25 (identifier -> ID .)
    NOTEQ           reduce using rule 25 (identifier -> ID .)
    AND             reduce using rule 25 (identifier -> ID .)
    OR              reduce using rule 25 (identifier -> ID .)
    RBRACKET        reduce using rule 25 (identifier -> ID .)
    TIMESEQ         reduce using rule 25 (identifier -> ID .)
    DIVEQ           reduce using rule 25 (identifier -> ID .)
    MODEQ           reduce using rule 25 (identifier -> ID .)
    PLUSEQ          reduce using rule 25 (identifier -> ID .)
    MINUSEQ         reduce using rule 25 (identifier -> ID .)
    RBRACE          reduce using rule 25 (identifier -> ID .)


state 19

    (3) global_declaration_list -> global_declaration_list global_declaration .

    VOID            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    CHAR            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    INT             reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    FLOAT           reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    LPAREN          reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    TIMES           reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    ID              reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    $end            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)


state 20

    (6) function_definition -> type_specifier declarator . declaration_list_opt compound_statement
    (93) init_declarator -> declarator .
    (94) init_declarator -> declarator . EQUALS initializer
    (12) declaration_list_opt -> . declaration_list
    (13) declaration_list_opt -> . empty
    (14) declaration_list -> . declaration
    (15) declaration_list -> . declaration_list declaration
    (128) empty -> .
    (87) declaration -> . decl_body SEMI
    (88) decl_body -> . type_specifier init_declarator_list_opt
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT

    COMMA           reduce using rule 93 (init_declarator -> declarator .)
    SEMI            reduce using rule 93 (init_declarator -> declarator .)
    EQUALS          shift and go to state 37
    LBRACE          reduce using rule 128 (empty -> .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    type_specifier                 shift and go to state 29
    declaration_list_opt           shift and go to state 36
    declaration_list               shift and go to state 26
    empty                          shift and go to state 27
    declaration                    shift and go to state 28
    decl_body                      shift and go to state 8

state 21

    (88) decl_body -> type_specifier init_declarator_list_opt .

    SEMI            reduce using rule 88 (decl_body -> type_specifier init_declarator_list_opt .)


state 22

    (89) init_declarator_list_opt -> init_declarator_list .
    (92) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            reduce using rule 89 (init_declarator_list_opt -> init_declarator_list .)
    COMMA           shift and go to state 38


state 23

    (90) init_declarator_list_opt -> empty .

    SEMI            reduce using rule 90 (init_declarator_list_opt -> empty .)


state 24

    (91) init_declarator_list -> init_declarator .

    COMMA           reduce using rule 91 (init_declarator_list -> init_declarator .)
    SEMI            reduce using rule 91 (init_declarator_list -> init_declarator .)


state 25

    (7) function_definition -> declarator declaration_list_opt . compound_statement
    (100) compound_statement -> . LBRACE block_item_list_opt RBRACE

    LBRACE          shift and go to state 40

    compound_statement             shift and go to state 39

state 26

    (12) declaration_list_opt -> declaration_list .
    (15) declaration_list -> declaration_list . declaration
    (87) declaration -> . decl_body SEMI
    (88) decl_body -> . type_specifier init_declarator_list_opt
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT

    LBRACE          reduce using rule 12 (declaration_list_opt -> declaration_list .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    declaration                    shift and go to state 41
    decl_body                      shift and go to state 8
    type_specifier                 shift and go to state 29

state 27

    (13) declaration_list_opt -> empty .

    LBRACE          reduce using rule 13 (declaration_list_opt -> empty .)


state 28

    (14) declaration_list -> declaration .

    VOID            reduce using rule 14 (declaration_list -> declaration .)
    CHAR            reduce using rule 14 (declaration_list -> declaration .)
    INT             reduce using rule 14 (declaration_list -> declaration .)
    FLOAT           reduce using rule 14 (declaration_list -> declaration .)
    LBRACE          reduce using rule 14 (declaration_list -> declaration .)


state 29

    (88) decl_body -> type_specifier . init_declarator_list_opt
    (89) init_declarator_list_opt -> . init_declarator_list
    (90) init_declarator_list_opt -> . empty
    (91) init_declarator_list -> . init_declarator
    (92) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (128) empty -> .
    (93) init_declarator -> . declarator
    (94) init_declarator -> . declarator EQUALS initializer
    (16) declarator -> . direct_declarator
    (17) declarator -> . pointer direct_declarator
    (20) direct_declarator -> . identifier
    (21) direct_declarator -> . LPAREN declarator RPAREN
    (22) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (23) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (24) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (18) pointer -> . TIMES
    (19) pointer -> . TIMES pointer
    (25) identifier -> . ID

    SEMI            reduce using rule 128 (empty -> .)
    LPAREN          shift and go to state 16
    TIMES           shift and go to state 17
    ID              shift and go to state 18

    init_declarator_list_opt       shift and go to state 21
    init_declarator_list           shift and go to state 22
    empty                          shift and go to state 23
    init_declarator                shift and go to state 24
    declarator                     shift and go to state 42
    direct_declarator              shift and go to state 13
    pointer                        shift and go to state 14
    identifier                     shift and go to state 15

state 30

    (87) declaration -> decl_body SEMI .

    VOID            reduce using rule 87 (declaration -> decl_body SEMI .)
    CHAR            reduce using rule 87 (declaration -> decl_body SEMI .)
    INT             reduce using rule 87 (declaration -> decl_body SEMI .)
    FLOAT           reduce using rule 87 (declaration -> decl_body SEMI .)
    LPAREN          reduce using rule 87 (declaration -> decl_body SEMI .)
    TIMES           reduce using rule 87 (declaration -> decl_body SEMI .)
    ID              reduce using rule 87 (declaration -> decl_body SEMI .)
    $end            reduce using rule 87 (declaration -> decl_body SEMI .)
    LBRACE          reduce using rule 87 (declaration -> decl_body SEMI .)
    IF              reduce using rule 87 (declaration -> decl_body SEMI .)
    WHILE           reduce using rule 87 (declaration -> decl_body SEMI .)
    FOR             reduce using rule 87 (declaration -> decl_body SEMI .)
    BREAK           reduce using rule 87 (declaration -> decl_body SEMI .)
    RETURN          reduce using rule 87 (declaration -> decl_body SEMI .)
    ASSERT          reduce using rule 87 (declaration -> decl_body SEMI .)
    PRINT           reduce using rule 87 (declaration -> decl_body SEMI .)
    READ            reduce using rule 87 (declaration -> decl_body SEMI .)
    PLUSPLUS        reduce using rule 87 (declaration -> decl_body SEMI .)
    MINUSMINUS      reduce using rule 87 (declaration -> decl_body SEMI .)
    AND             reduce using rule 87 (declaration -> decl_body SEMI .)
    PLUS            reduce using rule 87 (declaration -> decl_body SEMI .)
    MINUS           reduce using rule 87 (declaration -> decl_body SEMI .)
    NOT             reduce using rule 87 (declaration -> decl_body SEMI .)
    ADDRESS         reduce using rule 87 (declaration -> decl_body SEMI .)
    INT_CONST       reduce using rule 87 (declaration -> decl_body SEMI .)
    CHAR_CONST      reduce using rule 87 (declaration -> decl_body SEMI .)
    FLOAT_CONST     reduce using rule 87 (declaration -> decl_body SEMI .)
    STRING          reduce using rule 87 (declaration -> decl_body SEMI .)
    SEMI            reduce using rule 87 (declaration -> decl_body SEMI .)
    RBRACE          reduce using rule 87 (declaration -> decl_body SEMI .)


state 31

    (22) direct_declarator -> direct_declarator LBRACKET . constant_expression_opt RBRACKET
    (30) constant_expression_opt -> . constant_expression
    (31) constant_expression_opt -> . empty
    (32) constant_expression -> . binary_expression
    (128) empty -> .
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    RBRACKET        reduce using rule 128 (empty -> .)
    LPAREN          shift and go to state 53
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    constant_expression_opt        shift and go to state 43
    constant_expression            shift and go to state 44
    empty                          shift and go to state 45
    binary_expression              shift and go to state 46
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 32

    (23) direct_declarator -> direct_declarator LPAREN . parameter_list RPAREN
    (24) direct_declarator -> direct_declarator LPAREN . identifier_list_opt RPAREN
    (84) parameter_list -> . parameter_declaration
    (85) parameter_list -> . parameter_list COMMA parameter_declaration
    (26) identifier_list_opt -> . identifier_list
    (27) identifier_list_opt -> . empty
    (86) parameter_declaration -> . type_specifier declarator
    (28) identifier_list -> . identifier
    (29) identifier_list -> . identifier_list COMMA identifier
    (128) empty -> .
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT
    (25) identifier -> . ID

    RPAREN          reduce using rule 128 (empty -> .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 18

    parameter_list                 shift and go to state 67
    identifier_list_opt            shift and go to state 68
    parameter_declaration          shift and go to state 69
    identifier_list                shift and go to state 70
    empty                          shift and go to state 71
    type_specifier                 shift and go to state 72
    identifier                     shift and go to state 73

state 33

    (17) declarator -> pointer direct_declarator .
    (22) direct_declarator -> direct_declarator . LBRACKET constant_expression_opt RBRACKET
    (23) direct_declarator -> direct_declarator . LPAREN parameter_list RPAREN
    (24) direct_declarator -> direct_declarator . LPAREN identifier_list_opt RPAREN

    VOID            reduce using rule 17 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 17 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 17 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 17 (declarator -> pointer direct_declarator .)
    LBRACE          reduce using rule 17 (declarator -> pointer direct_declarator .)
    EQUALS          reduce using rule 17 (declarator -> pointer direct_declarator .)
    COMMA           reduce using rule 17 (declarator -> pointer direct_declarator .)
    SEMI            reduce using rule 17 (declarator -> pointer direct_declarator .)
    RPAREN          reduce using rule 17 (declarator -> pointer direct_declarator .)
    LBRACKET        shift and go to state 31
    LPAREN          shift and go to state 32


state 34

    (21) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 74


state 35

    (19) pointer -> TIMES pointer .

    LPAREN          reduce using rule 19 (pointer -> TIMES pointer .)
    ID              reduce using rule 19 (pointer -> TIMES pointer .)


state 36

    (6) function_definition -> type_specifier declarator declaration_list_opt . compound_statement
    (100) compound_statement -> . LBRACE block_item_list_opt RBRACE

    LBRACE          shift and go to state 40

    compound_statement             shift and go to state 75

state 37

    (94) init_declarator -> declarator EQUALS . initializer
    (95) initializer -> . assignment_expression
    (96) initializer -> . LBRACE initializer_list RBRACE
    (97) initializer -> . LBRACE initializer_list COMMA RBRACE
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    LBRACE          shift and go to state 78
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    initializer                    shift and go to state 76
    assignment_expression          shift and go to state 77
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 38

    (92) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (93) init_declarator -> . declarator
    (94) init_declarator -> . declarator EQUALS initializer
    (16) declarator -> . direct_declarator
    (17) declarator -> . pointer direct_declarator
    (20) direct_declarator -> . identifier
    (21) direct_declarator -> . LPAREN declarator RPAREN
    (22) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (23) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (24) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (18) pointer -> . TIMES
    (19) pointer -> . TIMES pointer
    (25) identifier -> . ID

    LPAREN          shift and go to state 16
    TIMES           shift and go to state 17
    ID              shift and go to state 18

    init_declarator                shift and go to state 81
    declarator                     shift and go to state 42
    direct_declarator              shift and go to state 13
    pointer                        shift and go to state 14
    identifier                     shift and go to state 15

state 39

    (7) function_definition -> declarator declaration_list_opt compound_statement .

    VOID            reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    CHAR            reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    INT             reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    FLOAT           reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    LPAREN          reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    TIMES           reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    ID              reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    $end            reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)


state 40

    (100) compound_statement -> LBRACE . block_item_list_opt RBRACE
    (101) block_item_list_opt -> . block_item_list
    (102) block_item_list_opt -> . empty
    (103) block_item_list -> . block_item
    (104) block_item_list -> . block_item_list block_item
    (128) empty -> .
    (105) block_item -> . declaration
    (106) block_item -> . statement
    (87) declaration -> . decl_body SEMI
    (107) statement -> . expression_statement
    (108) statement -> . compound_statement
    (109) statement -> . selection_statement
    (110) statement -> . interation_statement
    (111) statement -> . jump_statement
    (112) statement -> . assert_statement
    (113) statement -> . print_statement
    (114) statement -> . read_statement
    (88) decl_body -> . type_specifier init_declarator_list_opt
    (115) expression_statement -> . expression_opt SEMI
    (100) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (118) selection_statement -> . IF LPAREN expression RPAREN statement
    (119) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (120) interation_statement -> . WHILE LPAREN expression RPAREN statement
    (121) interation_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (122) interation_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (123) jump_statement -> . BREAK SEMI
    (124) jump_statement -> . RETURN expression_opt SEMI
    (125) assert_statement -> . ASSERT expression SEMI
    (126) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (127) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT
    (116) expression_opt -> . expression
    (117) expression_opt -> . empty
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    RBRACE          reduce using rule 128 (empty -> .)
    SEMI            reduce using rule 128 (empty -> .)
    LBRACE          shift and go to state 40
    IF              shift and go to state 97
    WHILE           shift and go to state 99
    FOR             shift and go to state 100
    BREAK           shift and go to state 101
    RETURN          shift and go to state 102
    ASSERT          shift and go to state 103
    PRINT           shift and go to state 104
    READ            shift and go to state 105
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    block_item_list_opt            shift and go to state 82
    block_item_list                shift and go to state 83
    empty                          shift and go to state 84
    block_item                     shift and go to state 85
    declaration                    shift and go to state 86
    statement                      shift and go to state 87
    decl_body                      shift and go to state 8
    expression_statement           shift and go to state 88
    compound_statement             shift and go to state 89
    selection_statement            shift and go to state 90
    interation_statement           shift and go to state 91
    jump_statement                 shift and go to state 92
    assert_statement               shift and go to state 93
    print_statement                shift and go to state 94
    read_statement                 shift and go to state 95
    type_specifier                 shift and go to state 29
    expression_opt                 shift and go to state 96
    expression                     shift and go to state 98
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 41

    (15) declaration_list -> declaration_list declaration .

    VOID            reduce using rule 15 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 15 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 15 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 15 (declaration_list -> declaration_list declaration .)
    LBRACE          reduce using rule 15 (declaration_list -> declaration_list declaration .)


state 42

    (93) init_declarator -> declarator .
    (94) init_declarator -> declarator . EQUALS initializer

    COMMA           reduce using rule 93 (init_declarator -> declarator .)
    SEMI            reduce using rule 93 (init_declarator -> declarator .)
    EQUALS          shift and go to state 37


state 43

    (22) direct_declarator -> direct_declarator LBRACKET constant_expression_opt . RBRACKET

    RBRACKET        shift and go to state 107


state 44

    (30) constant_expression_opt -> constant_expression .

    RBRACKET        reduce using rule 30 (constant_expression_opt -> constant_expression .)


state 45

    (31) constant_expression_opt -> empty .

    RBRACKET        reduce using rule 31 (constant_expression_opt -> empty .)


state 46

    (32) constant_expression -> binary_expression .
    (34) binary_expression -> binary_expression . TIMES binary_expression
    (35) binary_expression -> binary_expression . DIVIDE binary_expression
    (36) binary_expression -> binary_expression . MOD binary_expression
    (37) binary_expression -> binary_expression . PLUS binary_expression
    (38) binary_expression -> binary_expression . MINUS binary_expression
    (39) binary_expression -> binary_expression . LESSTHAN binary_expression
    (40) binary_expression -> binary_expression . LESSTHANEQ binary_expression
    (41) binary_expression -> binary_expression . GREATERTHANEQ binary_expression
    (42) binary_expression -> binary_expression . GREATERTHAN binary_expression
    (43) binary_expression -> binary_expression . EQ binary_expression
    (44) binary_expression -> binary_expression . NOTEQ binary_expression
    (45) binary_expression -> binary_expression . AND binary_expression
    (46) binary_expression -> binary_expression . OR binary_expression

    RBRACKET        reduce using rule 32 (constant_expression -> binary_expression .)
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    LESSTHAN        shift and go to state 113
    LESSTHANEQ      shift and go to state 114
    GREATERTHANEQ   shift and go to state 115
    GREATERTHAN     shift and go to state 116
    EQ              shift and go to state 117
    NOTEQ           shift and go to state 118
    AND             shift and go to state 119
    OR              shift and go to state 120


state 47

    (33) binary_expression -> cast_expression .

    TIMES           reduce using rule 33 (binary_expression -> cast_expression .)
    DIVIDE          reduce using rule 33 (binary_expression -> cast_expression .)
    MOD             reduce using rule 33 (binary_expression -> cast_expression .)
    PLUS            reduce using rule 33 (binary_expression -> cast_expression .)
    MINUS           reduce using rule 33 (binary_expression -> cast_expression .)
    LESSTHAN        reduce using rule 33 (binary_expression -> cast_expression .)
    LESSTHANEQ      reduce using rule 33 (binary_expression -> cast_expression .)
    GREATERTHANEQ   reduce using rule 33 (binary_expression -> cast_expression .)
    GREATERTHAN     reduce using rule 33 (binary_expression -> cast_expression .)
    EQ              reduce using rule 33 (binary_expression -> cast_expression .)
    NOTEQ           reduce using rule 33 (binary_expression -> cast_expression .)
    AND             reduce using rule 33 (binary_expression -> cast_expression .)
    OR              reduce using rule 33 (binary_expression -> cast_expression .)
    RBRACKET        reduce using rule 33 (binary_expression -> cast_expression .)
    COMMA           reduce using rule 33 (binary_expression -> cast_expression .)
    SEMI            reduce using rule 33 (binary_expression -> cast_expression .)
    RPAREN          reduce using rule 33 (binary_expression -> cast_expression .)
    RBRACE          reduce using rule 33 (binary_expression -> cast_expression .)


state 48

    (79) unary_operator -> TIMES .

    LPAREN          reduce using rule 79 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 79 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 79 (unary_operator -> TIMES .)
    AND             reduce using rule 79 (unary_operator -> TIMES .)
    TIMES           reduce using rule 79 (unary_operator -> TIMES .)
    PLUS            reduce using rule 79 (unary_operator -> TIMES .)
    MINUS           reduce using rule 79 (unary_operator -> TIMES .)
    NOT             reduce using rule 79 (unary_operator -> TIMES .)
    ADDRESS         reduce using rule 79 (unary_operator -> TIMES .)
    ID              reduce using rule 79 (unary_operator -> TIMES .)
    INT_CONST       reduce using rule 79 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 79 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 79 (unary_operator -> TIMES .)
    STRING          reduce using rule 79 (unary_operator -> TIMES .)


state 49

    (80) unary_operator -> PLUS .

    LPAREN          reduce using rule 80 (unary_operator -> PLUS .)
    PLUSPLUS        reduce using rule 80 (unary_operator -> PLUS .)
    MINUSMINUS      reduce using rule 80 (unary_operator -> PLUS .)
    AND             reduce using rule 80 (unary_operator -> PLUS .)
    TIMES           reduce using rule 80 (unary_operator -> PLUS .)
    PLUS            reduce using rule 80 (unary_operator -> PLUS .)
    MINUS           reduce using rule 80 (unary_operator -> PLUS .)
    NOT             reduce using rule 80 (unary_operator -> PLUS .)
    ADDRESS         reduce using rule 80 (unary_operator -> PLUS .)
    ID              reduce using rule 80 (unary_operator -> PLUS .)
    INT_CONST       reduce using rule 80 (unary_operator -> PLUS .)
    CHAR_CONST      reduce using rule 80 (unary_operator -> PLUS .)
    FLOAT_CONST     reduce using rule 80 (unary_operator -> PLUS .)
    STRING          reduce using rule 80 (unary_operator -> PLUS .)


state 50

    (81) unary_operator -> MINUS .

    LPAREN          reduce using rule 81 (unary_operator -> MINUS .)
    PLUSPLUS        reduce using rule 81 (unary_operator -> MINUS .)
    MINUSMINUS      reduce using rule 81 (unary_operator -> MINUS .)
    AND             reduce using rule 81 (unary_operator -> MINUS .)
    TIMES           reduce using rule 81 (unary_operator -> MINUS .)
    PLUS            reduce using rule 81 (unary_operator -> MINUS .)
    MINUS           reduce using rule 81 (unary_operator -> MINUS .)
    NOT             reduce using rule 81 (unary_operator -> MINUS .)
    ADDRESS         reduce using rule 81 (unary_operator -> MINUS .)
    ID              reduce using rule 81 (unary_operator -> MINUS .)
    INT_CONST       reduce using rule 81 (unary_operator -> MINUS .)
    CHAR_CONST      reduce using rule 81 (unary_operator -> MINUS .)
    FLOAT_CONST     reduce using rule 81 (unary_operator -> MINUS .)
    STRING          reduce using rule 81 (unary_operator -> MINUS .)


state 51

    (78) unary_operator -> AND .

    LPAREN          reduce using rule 78 (unary_operator -> AND .)
    PLUSPLUS        reduce using rule 78 (unary_operator -> AND .)
    MINUSMINUS      reduce using rule 78 (unary_operator -> AND .)
    AND             reduce using rule 78 (unary_operator -> AND .)
    TIMES           reduce using rule 78 (unary_operator -> AND .)
    PLUS            reduce using rule 78 (unary_operator -> AND .)
    MINUS           reduce using rule 78 (unary_operator -> AND .)
    NOT             reduce using rule 78 (unary_operator -> AND .)
    ADDRESS         reduce using rule 78 (unary_operator -> AND .)
    ID              reduce using rule 78 (unary_operator -> AND .)
    INT_CONST       reduce using rule 78 (unary_operator -> AND .)
    CHAR_CONST      reduce using rule 78 (unary_operator -> AND .)
    FLOAT_CONST     reduce using rule 78 (unary_operator -> AND .)
    STRING          reduce using rule 78 (unary_operator -> AND .)


state 52

    (47) cast_expression -> unary_expression .

    TIMES           reduce using rule 47 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 47 (cast_expression -> unary_expression .)
    MOD             reduce using rule 47 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 47 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 47 (cast_expression -> unary_expression .)
    LESSTHAN        reduce using rule 47 (cast_expression -> unary_expression .)
    LESSTHANEQ      reduce using rule 47 (cast_expression -> unary_expression .)
    GREATERTHANEQ   reduce using rule 47 (cast_expression -> unary_expression .)
    GREATERTHAN     reduce using rule 47 (cast_expression -> unary_expression .)
    EQ              reduce using rule 47 (cast_expression -> unary_expression .)
    NOTEQ           reduce using rule 47 (cast_expression -> unary_expression .)
    AND             reduce using rule 47 (cast_expression -> unary_expression .)
    OR              reduce using rule 47 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 47 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 47 (cast_expression -> unary_expression .)
    TIMESEQ         reduce using rule 47 (cast_expression -> unary_expression .)
    DIVEQ           reduce using rule 47 (cast_expression -> unary_expression .)
    MODEQ           reduce using rule 47 (cast_expression -> unary_expression .)
    PLUSEQ          reduce using rule 47 (cast_expression -> unary_expression .)
    MINUSEQ         reduce using rule 47 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 47 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 47 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 47 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 47 (cast_expression -> unary_expression .)


state 53

    (48) cast_expression -> LPAREN . type_specifier RPAREN cast_expression
    (61) primary_expression -> LPAREN . expression RPAREN
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    type_specifier                 shift and go to state 121
    cast_expression                shift and go to state 47
    expression                     shift and go to state 122
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 54

    (49) unary_expression -> postfix_expression .
    (54) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (55) postfix_expression -> postfix_expression . LPAREN RPAREN
    (56) postfix_expression -> postfix_expression . LPAREN argument_expression RPAREN
    (57) postfix_expression -> postfix_expression . PLUSPLUS
    (58) postfix_expression -> postfix_expression . MINUSMINUS

    TIMES           reduce using rule 49 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 49 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 49 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 49 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 49 (unary_expression -> postfix_expression .)
    LESSTHAN        reduce using rule 49 (unary_expression -> postfix_expression .)
    LESSTHANEQ      reduce using rule 49 (unary_expression -> postfix_expression .)
    GREATERTHANEQ   reduce using rule 49 (unary_expression -> postfix_expression .)
    GREATERTHAN     reduce using rule 49 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 49 (unary_expression -> postfix_expression .)
    NOTEQ           reduce using rule 49 (unary_expression -> postfix_expression .)
    AND             reduce using rule 49 (unary_expression -> postfix_expression .)
    OR              reduce using rule 49 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 49 (unary_expression -> postfix_expression .)
    EQUALS          reduce using rule 49 (unary_expression -> postfix_expression .)
    TIMESEQ         reduce using rule 49 (unary_expression -> postfix_expression .)
    DIVEQ           reduce using rule 49 (unary_expression -> postfix_expression .)
    MODEQ           reduce using rule 49 (unary_expression -> postfix_expression .)
    PLUSEQ          reduce using rule 49 (unary_expression -> postfix_expression .)
    MINUSEQ         reduce using rule 49 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 49 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 49 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 49 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 49 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 123
    LPAREN          shift and go to state 124
    PLUSPLUS        shift and go to state 125
    MINUSMINUS      shift and go to state 126


state 55

    (50) unary_expression -> PLUSPLUS . unary_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    LPAREN          shift and go to state 128
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 56

    (51) unary_expression -> MINUSMINUS . unary_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    LPAREN          shift and go to state 128
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    unary_expression               shift and go to state 129
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 57

    (52) unary_expression -> unary_operator . cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    LPAREN          shift and go to state 53
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    unary_operator                 shift and go to state 57
    cast_expression                shift and go to state 130
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 54
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 58

    (53) postfix_expression -> primary_expression .

    LBRACKET        reduce using rule 53 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 53 (postfix_expression -> primary_expression .)
    PLUSPLUS        reduce using rule 53 (postfix_expression -> primary_expression .)
    MINUSMINUS      reduce using rule 53 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 53 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 53 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 53 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 53 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 53 (postfix_expression -> primary_expression .)
    LESSTHAN        reduce using rule 53 (postfix_expression -> primary_expression .)
    LESSTHANEQ      reduce using rule 53 (postfix_expression -> primary_expression .)
    GREATERTHANEQ   reduce using rule 53 (postfix_expression -> primary_expression .)
    GREATERTHAN     reduce using rule 53 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 53 (postfix_expression -> primary_expression .)
    NOTEQ           reduce using rule 53 (postfix_expression -> primary_expression .)
    AND             reduce using rule 53 (postfix_expression -> primary_expression .)
    OR              reduce using rule 53 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 53 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 53 (postfix_expression -> primary_expression .)
    TIMESEQ         reduce using rule 53 (postfix_expression -> primary_expression .)
    DIVEQ           reduce using rule 53 (postfix_expression -> primary_expression .)
    MODEQ           reduce using rule 53 (postfix_expression -> primary_expression .)
    PLUSEQ          reduce using rule 53 (postfix_expression -> primary_expression .)
    MINUSEQ         reduce using rule 53 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 53 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 53 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 53 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 53 (postfix_expression -> primary_expression .)


state 59

    (82) unary_operator -> NOT .

    LPAREN          reduce using rule 82 (unary_operator -> NOT .)
    PLUSPLUS        reduce using rule 82 (unary_operator -> NOT .)
    MINUSMINUS      reduce using rule 82 (unary_operator -> NOT .)
    AND             reduce using rule 82 (unary_operator -> NOT .)
    TIMES           reduce using rule 82 (unary_operator -> NOT .)
    PLUS            reduce using rule 82 (unary_operator -> NOT .)
    MINUS           reduce using rule 82 (unary_operator -> NOT .)
    NOT             reduce using rule 82 (unary_operator -> NOT .)
    ADDRESS         reduce using rule 82 (unary_operator -> NOT .)
    ID              reduce using rule 82 (unary_operator -> NOT .)
    INT_CONST       reduce using rule 82 (unary_operator -> NOT .)
    CHAR_CONST      reduce using rule 82 (unary_operator -> NOT .)
    FLOAT_CONST     reduce using rule 82 (unary_operator -> NOT .)
    STRING          reduce using rule 82 (unary_operator -> NOT .)


state 60

    (83) unary_operator -> ADDRESS .

    LPAREN          reduce using rule 83 (unary_operator -> ADDRESS .)
    PLUSPLUS        reduce using rule 83 (unary_operator -> ADDRESS .)
    MINUSMINUS      reduce using rule 83 (unary_operator -> ADDRESS .)
    AND             reduce using rule 83 (unary_operator -> ADDRESS .)
    TIMES           reduce using rule 83 (unary_operator -> ADDRESS .)
    PLUS            reduce using rule 83 (unary_operator -> ADDRESS .)
    MINUS           reduce using rule 83 (unary_operator -> ADDRESS .)
    NOT             reduce using rule 83 (unary_operator -> ADDRESS .)
    ADDRESS         reduce using rule 83 (unary_operator -> ADDRESS .)
    ID              reduce using rule 83 (unary_operator -> ADDRESS .)
    INT_CONST       reduce using rule 83 (unary_operator -> ADDRESS .)
    CHAR_CONST      reduce using rule 83 (unary_operator -> ADDRESS .)
    FLOAT_CONST     reduce using rule 83 (unary_operator -> ADDRESS .)
    STRING          reduce using rule 83 (unary_operator -> ADDRESS .)


state 61

    (59) primary_expression -> identifier .

    LBRACKET        reduce using rule 59 (primary_expression -> identifier .)
    LPAREN          reduce using rule 59 (primary_expression -> identifier .)
    PLUSPLUS        reduce using rule 59 (primary_expression -> identifier .)
    MINUSMINUS      reduce using rule 59 (primary_expression -> identifier .)
    TIMES           reduce using rule 59 (primary_expression -> identifier .)
    DIVIDE          reduce using rule 59 (primary_expression -> identifier .)
    MOD             reduce using rule 59 (primary_expression -> identifier .)
    PLUS            reduce using rule 59 (primary_expression -> identifier .)
    MINUS           reduce using rule 59 (primary_expression -> identifier .)
    LESSTHAN        reduce using rule 59 (primary_expression -> identifier .)
    LESSTHANEQ      reduce using rule 59 (primary_expression -> identifier .)
    GREATERTHANEQ   reduce using rule 59 (primary_expression -> identifier .)
    GREATERTHAN     reduce using rule 59 (primary_expression -> identifier .)
    EQ              reduce using rule 59 (primary_expression -> identifier .)
    NOTEQ           reduce using rule 59 (primary_expression -> identifier .)
    AND             reduce using rule 59 (primary_expression -> identifier .)
    OR              reduce using rule 59 (primary_expression -> identifier .)
    RBRACKET        reduce using rule 59 (primary_expression -> identifier .)
    EQUALS          reduce using rule 59 (primary_expression -> identifier .)
    TIMESEQ         reduce using rule 59 (primary_expression -> identifier .)
    DIVEQ           reduce using rule 59 (primary_expression -> identifier .)
    MODEQ           reduce using rule 59 (primary_expression -> identifier .)
    PLUSEQ          reduce using rule 59 (primary_expression -> identifier .)
    MINUSEQ         reduce using rule 59 (primary_expression -> identifier .)
    COMMA           reduce using rule 59 (primary_expression -> identifier .)
    SEMI            reduce using rule 59 (primary_expression -> identifier .)
    RPAREN          reduce using rule 59 (primary_expression -> identifier .)
    RBRACE          reduce using rule 59 (primary_expression -> identifier .)


state 62

    (60) primary_expression -> constant .

    LBRACKET        reduce using rule 60 (primary_expression -> constant .)
    LPAREN          reduce using rule 60 (primary_expression -> constant .)
    PLUSPLUS        reduce using rule 60 (primary_expression -> constant .)
    MINUSMINUS      reduce using rule 60 (primary_expression -> constant .)
    TIMES           reduce using rule 60 (primary_expression -> constant .)
    DIVIDE          reduce using rule 60 (primary_expression -> constant .)
    MOD             reduce using rule 60 (primary_expression -> constant .)
    PLUS            reduce using rule 60 (primary_expression -> constant .)
    MINUS           reduce using rule 60 (primary_expression -> constant .)
    LESSTHAN        reduce using rule 60 (primary_expression -> constant .)
    LESSTHANEQ      reduce using rule 60 (primary_expression -> constant .)
    GREATERTHANEQ   reduce using rule 60 (primary_expression -> constant .)
    GREATERTHAN     reduce using rule 60 (primary_expression -> constant .)
    EQ              reduce using rule 60 (primary_expression -> constant .)
    NOTEQ           reduce using rule 60 (primary_expression -> constant .)
    AND             reduce using rule 60 (primary_expression -> constant .)
    OR              reduce using rule 60 (primary_expression -> constant .)
    RBRACKET        reduce using rule 60 (primary_expression -> constant .)
    EQUALS          reduce using rule 60 (primary_expression -> constant .)
    TIMESEQ         reduce using rule 60 (primary_expression -> constant .)
    DIVEQ           reduce using rule 60 (primary_expression -> constant .)
    MODEQ           reduce using rule 60 (primary_expression -> constant .)
    PLUSEQ          reduce using rule 60 (primary_expression -> constant .)
    MINUSEQ         reduce using rule 60 (primary_expression -> constant .)
    COMMA           reduce using rule 60 (primary_expression -> constant .)
    SEMI            reduce using rule 60 (primary_expression -> constant .)
    RPAREN          reduce using rule 60 (primary_expression -> constant .)
    RBRACE          reduce using rule 60 (primary_expression -> constant .)


state 63

    (62) constant -> INT_CONST .

    LBRACKET        reduce using rule 62 (constant -> INT_CONST .)
    LPAREN          reduce using rule 62 (constant -> INT_CONST .)
    PLUSPLUS        reduce using rule 62 (constant -> INT_CONST .)
    MINUSMINUS      reduce using rule 62 (constant -> INT_CONST .)
    TIMES           reduce using rule 62 (constant -> INT_CONST .)
    DIVIDE          reduce using rule 62 (constant -> INT_CONST .)
    MOD             reduce using rule 62 (constant -> INT_CONST .)
    PLUS            reduce using rule 62 (constant -> INT_CONST .)
    MINUS           reduce using rule 62 (constant -> INT_CONST .)
    LESSTHAN        reduce using rule 62 (constant -> INT_CONST .)
    LESSTHANEQ      reduce using rule 62 (constant -> INT_CONST .)
    GREATERTHANEQ   reduce using rule 62 (constant -> INT_CONST .)
    GREATERTHAN     reduce using rule 62 (constant -> INT_CONST .)
    EQ              reduce using rule 62 (constant -> INT_CONST .)
    NOTEQ           reduce using rule 62 (constant -> INT_CONST .)
    AND             reduce using rule 62 (constant -> INT_CONST .)
    OR              reduce using rule 62 (constant -> INT_CONST .)
    RBRACKET        reduce using rule 62 (constant -> INT_CONST .)
    EQUALS          reduce using rule 62 (constant -> INT_CONST .)
    TIMESEQ         reduce using rule 62 (constant -> INT_CONST .)
    DIVEQ           reduce using rule 62 (constant -> INT_CONST .)
    MODEQ           reduce using rule 62 (constant -> INT_CONST .)
    PLUSEQ          reduce using rule 62 (constant -> INT_CONST .)
    MINUSEQ         reduce using rule 62 (constant -> INT_CONST .)
    COMMA           reduce using rule 62 (constant -> INT_CONST .)
    SEMI            reduce using rule 62 (constant -> INT_CONST .)
    RPAREN          reduce using rule 62 (constant -> INT_CONST .)
    RBRACE          reduce using rule 62 (constant -> INT_CONST .)


state 64

    (63) constant -> CHAR_CONST .

    LBRACKET        reduce using rule 63 (constant -> CHAR_CONST .)
    LPAREN          reduce using rule 63 (constant -> CHAR_CONST .)
    PLUSPLUS        reduce using rule 63 (constant -> CHAR_CONST .)
    MINUSMINUS      reduce using rule 63 (constant -> CHAR_CONST .)
    TIMES           reduce using rule 63 (constant -> CHAR_CONST .)
    DIVIDE          reduce using rule 63 (constant -> CHAR_CONST .)
    MOD             reduce using rule 63 (constant -> CHAR_CONST .)
    PLUS            reduce using rule 63 (constant -> CHAR_CONST .)
    MINUS           reduce using rule 63 (constant -> CHAR_CONST .)
    LESSTHAN        reduce using rule 63 (constant -> CHAR_CONST .)
    LESSTHANEQ      reduce using rule 63 (constant -> CHAR_CONST .)
    GREATERTHANEQ   reduce using rule 63 (constant -> CHAR_CONST .)
    GREATERTHAN     reduce using rule 63 (constant -> CHAR_CONST .)
    EQ              reduce using rule 63 (constant -> CHAR_CONST .)
    NOTEQ           reduce using rule 63 (constant -> CHAR_CONST .)
    AND             reduce using rule 63 (constant -> CHAR_CONST .)
    OR              reduce using rule 63 (constant -> CHAR_CONST .)
    RBRACKET        reduce using rule 63 (constant -> CHAR_CONST .)
    EQUALS          reduce using rule 63 (constant -> CHAR_CONST .)
    TIMESEQ         reduce using rule 63 (constant -> CHAR_CONST .)
    DIVEQ           reduce using rule 63 (constant -> CHAR_CONST .)
    MODEQ           reduce using rule 63 (constant -> CHAR_CONST .)
    PLUSEQ          reduce using rule 63 (constant -> CHAR_CONST .)
    MINUSEQ         reduce using rule 63 (constant -> CHAR_CONST .)
    COMMA           reduce using rule 63 (constant -> CHAR_CONST .)
    SEMI            reduce using rule 63 (constant -> CHAR_CONST .)
    RPAREN          reduce using rule 63 (constant -> CHAR_CONST .)
    RBRACE          reduce using rule 63 (constant -> CHAR_CONST .)


state 65

    (64) constant -> FLOAT_CONST .

    LBRACKET        reduce using rule 64 (constant -> FLOAT_CONST .)
    LPAREN          reduce using rule 64 (constant -> FLOAT_CONST .)
    PLUSPLUS        reduce using rule 64 (constant -> FLOAT_CONST .)
    MINUSMINUS      reduce using rule 64 (constant -> FLOAT_CONST .)
    TIMES           reduce using rule 64 (constant -> FLOAT_CONST .)
    DIVIDE          reduce using rule 64 (constant -> FLOAT_CONST .)
    MOD             reduce using rule 64 (constant -> FLOAT_CONST .)
    PLUS            reduce using rule 64 (constant -> FLOAT_CONST .)
    MINUS           reduce using rule 64 (constant -> FLOAT_CONST .)
    LESSTHAN        reduce using rule 64 (constant -> FLOAT_CONST .)
    LESSTHANEQ      reduce using rule 64 (constant -> FLOAT_CONST .)
    GREATERTHANEQ   reduce using rule 64 (constant -> FLOAT_CONST .)
    GREATERTHAN     reduce using rule 64 (constant -> FLOAT_CONST .)
    EQ              reduce using rule 64 (constant -> FLOAT_CONST .)
    NOTEQ           reduce using rule 64 (constant -> FLOAT_CONST .)
    AND             reduce using rule 64 (constant -> FLOAT_CONST .)
    OR              reduce using rule 64 (constant -> FLOAT_CONST .)
    RBRACKET        reduce using rule 64 (constant -> FLOAT_CONST .)
    EQUALS          reduce using rule 64 (constant -> FLOAT_CONST .)
    TIMESEQ         reduce using rule 64 (constant -> FLOAT_CONST .)
    DIVEQ           reduce using rule 64 (constant -> FLOAT_CONST .)
    MODEQ           reduce using rule 64 (constant -> FLOAT_CONST .)
    PLUSEQ          reduce using rule 64 (constant -> FLOAT_CONST .)
    MINUSEQ         reduce using rule 64 (constant -> FLOAT_CONST .)
    COMMA           reduce using rule 64 (constant -> FLOAT_CONST .)
    SEMI            reduce using rule 64 (constant -> FLOAT_CONST .)
    RPAREN          reduce using rule 64 (constant -> FLOAT_CONST .)
    RBRACE          reduce using rule 64 (constant -> FLOAT_CONST .)


state 66

    (65) constant -> STRING .

    LBRACKET        reduce using rule 65 (constant -> STRING .)
    LPAREN          reduce using rule 65 (constant -> STRING .)
    PLUSPLUS        reduce using rule 65 (constant -> STRING .)
    MINUSMINUS      reduce using rule 65 (constant -> STRING .)
    TIMES           reduce using rule 65 (constant -> STRING .)
    DIVIDE          reduce using rule 65 (constant -> STRING .)
    MOD             reduce using rule 65 (constant -> STRING .)
    PLUS            reduce using rule 65 (constant -> STRING .)
    MINUS           reduce using rule 65 (constant -> STRING .)
    LESSTHAN        reduce using rule 65 (constant -> STRING .)
    LESSTHANEQ      reduce using rule 65 (constant -> STRING .)
    GREATERTHANEQ   reduce using rule 65 (constant -> STRING .)
    GREATERTHAN     reduce using rule 65 (constant -> STRING .)
    EQ              reduce using rule 65 (constant -> STRING .)
    NOTEQ           reduce using rule 65 (constant -> STRING .)
    AND             reduce using rule 65 (constant -> STRING .)
    OR              reduce using rule 65 (constant -> STRING .)
    RBRACKET        reduce using rule 65 (constant -> STRING .)
    EQUALS          reduce using rule 65 (constant -> STRING .)
    TIMESEQ         reduce using rule 65 (constant -> STRING .)
    DIVEQ           reduce using rule 65 (constant -> STRING .)
    MODEQ           reduce using rule 65 (constant -> STRING .)
    PLUSEQ          reduce using rule 65 (constant -> STRING .)
    MINUSEQ         reduce using rule 65 (constant -> STRING .)
    COMMA           reduce using rule 65 (constant -> STRING .)
    SEMI            reduce using rule 65 (constant -> STRING .)
    RPAREN          reduce using rule 65 (constant -> STRING .)
    RBRACE          reduce using rule 65 (constant -> STRING .)


state 67

    (23) direct_declarator -> direct_declarator LPAREN parameter_list . RPAREN
    (85) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          shift and go to state 131
    COMMA           shift and go to state 132


state 68

    (24) direct_declarator -> direct_declarator LPAREN identifier_list_opt . RPAREN

    RPAREN          shift and go to state 133


state 69

    (84) parameter_list -> parameter_declaration .

    RPAREN          reduce using rule 84 (parameter_list -> parameter_declaration .)
    COMMA           reduce using rule 84 (parameter_list -> parameter_declaration .)


state 70

    (26) identifier_list_opt -> identifier_list .
    (29) identifier_list -> identifier_list . COMMA identifier

    RPAREN          reduce using rule 26 (identifier_list_opt -> identifier_list .)
    COMMA           shift and go to state 134


state 71

    (27) identifier_list_opt -> empty .

    RPAREN          reduce using rule 27 (identifier_list_opt -> empty .)


state 72

    (86) parameter_declaration -> type_specifier . declarator
    (16) declarator -> . direct_declarator
    (17) declarator -> . pointer direct_declarator
    (20) direct_declarator -> . identifier
    (21) direct_declarator -> . LPAREN declarator RPAREN
    (22) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (23) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (24) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (18) pointer -> . TIMES
    (19) pointer -> . TIMES pointer
    (25) identifier -> . ID

    LPAREN          shift and go to state 16
    TIMES           shift and go to state 17
    ID              shift and go to state 18

    declarator                     shift and go to state 135
    direct_declarator              shift and go to state 13
    pointer                        shift and go to state 14
    identifier                     shift and go to state 15

state 73

    (28) identifier_list -> identifier .

    COMMA           reduce using rule 28 (identifier_list -> identifier .)
    RPAREN          reduce using rule 28 (identifier_list -> identifier .)


state 74

    (21) direct_declarator -> LPAREN declarator RPAREN .

    LBRACKET        reduce using rule 21 (direct_declarator -> LPAREN declarator RPAREN .)
    LPAREN          reduce using rule 21 (direct_declarator -> LPAREN declarator RPAREN .)
    VOID            reduce using rule 21 (direct_declarator -> LPAREN declarator RPAREN .)
    CHAR            reduce using rule 21 (direct_declarator -> LPAREN declarator RPAREN .)
    INT             reduce using rule 21 (direct_declarator -> LPAREN declarator RPAREN .)
    FLOAT           reduce using rule 21 (direct_declarator -> LPAREN declarator RPAREN .)
    LBRACE          reduce using rule 21 (direct_declarator -> LPAREN declarator RPAREN .)
    EQUALS          reduce using rule 21 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 21 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMI            reduce using rule 21 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 21 (direct_declarator -> LPAREN declarator RPAREN .)


state 75

    (6) function_definition -> type_specifier declarator declaration_list_opt compound_statement .

    VOID            reduce using rule 6 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    CHAR            reduce using rule 6 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    INT             reduce using rule 6 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    FLOAT           reduce using rule 6 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    LPAREN          reduce using rule 6 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    TIMES           reduce using rule 6 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    ID              reduce using rule 6 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    $end            reduce using rule 6 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)


state 76

    (94) init_declarator -> declarator EQUALS initializer .

    COMMA           reduce using rule 94 (init_declarator -> declarator EQUALS initializer .)
    SEMI            reduce using rule 94 (init_declarator -> declarator EQUALS initializer .)


state 77

    (95) initializer -> assignment_expression .

    COMMA           reduce using rule 95 (initializer -> assignment_expression .)
    SEMI            reduce using rule 95 (initializer -> assignment_expression .)
    RBRACE          reduce using rule 95 (initializer -> assignment_expression .)


state 78

    (96) initializer -> LBRACE . initializer_list RBRACE
    (97) initializer -> LBRACE . initializer_list COMMA RBRACE
    (98) initializer_list -> . initializer
    (99) initializer_list -> . initializer_list COMMA initializer
    (95) initializer -> . assignment_expression
    (96) initializer -> . LBRACE initializer_list RBRACE
    (97) initializer -> . LBRACE initializer_list COMMA RBRACE
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    LBRACE          shift and go to state 78
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    initializer_list               shift and go to state 136
    initializer                    shift and go to state 137
    assignment_expression          shift and go to state 77
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 79

    (70) assignment_expression -> binary_expression .
    (34) binary_expression -> binary_expression . TIMES binary_expression
    (35) binary_expression -> binary_expression . DIVIDE binary_expression
    (36) binary_expression -> binary_expression . MOD binary_expression
    (37) binary_expression -> binary_expression . PLUS binary_expression
    (38) binary_expression -> binary_expression . MINUS binary_expression
    (39) binary_expression -> binary_expression . LESSTHAN binary_expression
    (40) binary_expression -> binary_expression . LESSTHANEQ binary_expression
    (41) binary_expression -> binary_expression . GREATERTHANEQ binary_expression
    (42) binary_expression -> binary_expression . GREATERTHAN binary_expression
    (43) binary_expression -> binary_expression . EQ binary_expression
    (44) binary_expression -> binary_expression . NOTEQ binary_expression
    (45) binary_expression -> binary_expression . AND binary_expression
    (46) binary_expression -> binary_expression . OR binary_expression

    COMMA           reduce using rule 70 (assignment_expression -> binary_expression .)
    SEMI            reduce using rule 70 (assignment_expression -> binary_expression .)
    RPAREN          reduce using rule 70 (assignment_expression -> binary_expression .)
    RBRACE          reduce using rule 70 (assignment_expression -> binary_expression .)
    RBRACKET        reduce using rule 70 (assignment_expression -> binary_expression .)
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    LESSTHAN        shift and go to state 113
    LESSTHANEQ      shift and go to state 114
    GREATERTHANEQ   shift and go to state 115
    GREATERTHAN     shift and go to state 116
    EQ              shift and go to state 117
    NOTEQ           shift and go to state 118
    AND             shift and go to state 119
    OR              shift and go to state 120


state 80

    (71) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (47) cast_expression -> unary_expression .
    (72) assignment_operator -> . EQUALS
    (73) assignment_operator -> . TIMESEQ
    (74) assignment_operator -> . DIVEQ
    (75) assignment_operator -> . MODEQ
    (76) assignment_operator -> . PLUSEQ
    (77) assignment_operator -> . MINUSEQ

    TIMES           reduce using rule 47 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 47 (cast_expression -> unary_expression .)
    MOD             reduce using rule 47 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 47 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 47 (cast_expression -> unary_expression .)
    LESSTHAN        reduce using rule 47 (cast_expression -> unary_expression .)
    LESSTHANEQ      reduce using rule 47 (cast_expression -> unary_expression .)
    GREATERTHANEQ   reduce using rule 47 (cast_expression -> unary_expression .)
    GREATERTHAN     reduce using rule 47 (cast_expression -> unary_expression .)
    EQ              reduce using rule 47 (cast_expression -> unary_expression .)
    NOTEQ           reduce using rule 47 (cast_expression -> unary_expression .)
    AND             reduce using rule 47 (cast_expression -> unary_expression .)
    OR              reduce using rule 47 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 47 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 47 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 47 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 47 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 47 (cast_expression -> unary_expression .)
    EQUALS          shift and go to state 139
    TIMESEQ         shift and go to state 140
    DIVEQ           shift and go to state 141
    MODEQ           shift and go to state 142
    PLUSEQ          shift and go to state 143
    MINUSEQ         shift and go to state 144

    assignment_operator            shift and go to state 138

state 81

    (92) init_declarator_list -> init_declarator_list COMMA init_declarator .

    COMMA           reduce using rule 92 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    SEMI            reduce using rule 92 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 82

    (100) compound_statement -> LBRACE block_item_list_opt . RBRACE

    RBRACE          shift and go to state 145


state 83

    (101) block_item_list_opt -> block_item_list .
    (104) block_item_list -> block_item_list . block_item
    (105) block_item -> . declaration
    (106) block_item -> . statement
    (87) declaration -> . decl_body SEMI
    (107) statement -> . expression_statement
    (108) statement -> . compound_statement
    (109) statement -> . selection_statement
    (110) statement -> . interation_statement
    (111) statement -> . jump_statement
    (112) statement -> . assert_statement
    (113) statement -> . print_statement
    (114) statement -> . read_statement
    (88) decl_body -> . type_specifier init_declarator_list_opt
    (115) expression_statement -> . expression_opt SEMI
    (100) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (118) selection_statement -> . IF LPAREN expression RPAREN statement
    (119) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (120) interation_statement -> . WHILE LPAREN expression RPAREN statement
    (121) interation_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (122) interation_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (123) jump_statement -> . BREAK SEMI
    (124) jump_statement -> . RETURN expression_opt SEMI
    (125) assert_statement -> . ASSERT expression SEMI
    (126) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (127) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT
    (116) expression_opt -> . expression
    (117) expression_opt -> . empty
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (128) empty -> .
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    RBRACE          reduce using rule 101 (block_item_list_opt -> block_item_list .)
    LBRACE          shift and go to state 40
    IF              shift and go to state 97
    WHILE           shift and go to state 99
    FOR             shift and go to state 100
    BREAK           shift and go to state 101
    RETURN          shift and go to state 102
    ASSERT          shift and go to state 103
    PRINT           shift and go to state 104
    READ            shift and go to state 105
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    SEMI            reduce using rule 128 (empty -> .)
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    block_item                     shift and go to state 146
    declaration                    shift and go to state 86
    statement                      shift and go to state 87
    decl_body                      shift and go to state 8
    expression_statement           shift and go to state 88
    compound_statement             shift and go to state 89
    selection_statement            shift and go to state 90
    interation_statement           shift and go to state 91
    jump_statement                 shift and go to state 92
    assert_statement               shift and go to state 93
    print_statement                shift and go to state 94
    read_statement                 shift and go to state 95
    type_specifier                 shift and go to state 29
    expression_opt                 shift and go to state 96
    expression                     shift and go to state 98
    empty                          shift and go to state 147
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 84

    (102) block_item_list_opt -> empty .
    (117) expression_opt -> empty .

    RBRACE          reduce using rule 102 (block_item_list_opt -> empty .)
    SEMI            reduce using rule 117 (expression_opt -> empty .)


state 85

    (103) block_item_list -> block_item .

    LBRACE          reduce using rule 103 (block_item_list -> block_item .)
    IF              reduce using rule 103 (block_item_list -> block_item .)
    WHILE           reduce using rule 103 (block_item_list -> block_item .)
    FOR             reduce using rule 103 (block_item_list -> block_item .)
    BREAK           reduce using rule 103 (block_item_list -> block_item .)
    RETURN          reduce using rule 103 (block_item_list -> block_item .)
    ASSERT          reduce using rule 103 (block_item_list -> block_item .)
    PRINT           reduce using rule 103 (block_item_list -> block_item .)
    READ            reduce using rule 103 (block_item_list -> block_item .)
    VOID            reduce using rule 103 (block_item_list -> block_item .)
    CHAR            reduce using rule 103 (block_item_list -> block_item .)
    INT             reduce using rule 103 (block_item_list -> block_item .)
    FLOAT           reduce using rule 103 (block_item_list -> block_item .)
    PLUSPLUS        reduce using rule 103 (block_item_list -> block_item .)
    MINUSMINUS      reduce using rule 103 (block_item_list -> block_item .)
    LPAREN          reduce using rule 103 (block_item_list -> block_item .)
    AND             reduce using rule 103 (block_item_list -> block_item .)
    TIMES           reduce using rule 103 (block_item_list -> block_item .)
    PLUS            reduce using rule 103 (block_item_list -> block_item .)
    MINUS           reduce using rule 103 (block_item_list -> block_item .)
    NOT             reduce using rule 103 (block_item_list -> block_item .)
    ADDRESS         reduce using rule 103 (block_item_list -> block_item .)
    ID              reduce using rule 103 (block_item_list -> block_item .)
    INT_CONST       reduce using rule 103 (block_item_list -> block_item .)
    CHAR_CONST      reduce using rule 103 (block_item_list -> block_item .)
    FLOAT_CONST     reduce using rule 103 (block_item_list -> block_item .)
    STRING          reduce using rule 103 (block_item_list -> block_item .)
    SEMI            reduce using rule 103 (block_item_list -> block_item .)
    RBRACE          reduce using rule 103 (block_item_list -> block_item .)


state 86

    (105) block_item -> declaration .

    LBRACE          reduce using rule 105 (block_item -> declaration .)
    IF              reduce using rule 105 (block_item -> declaration .)
    WHILE           reduce using rule 105 (block_item -> declaration .)
    FOR             reduce using rule 105 (block_item -> declaration .)
    BREAK           reduce using rule 105 (block_item -> declaration .)
    RETURN          reduce using rule 105 (block_item -> declaration .)
    ASSERT          reduce using rule 105 (block_item -> declaration .)
    PRINT           reduce using rule 105 (block_item -> declaration .)
    READ            reduce using rule 105 (block_item -> declaration .)
    VOID            reduce using rule 105 (block_item -> declaration .)
    CHAR            reduce using rule 105 (block_item -> declaration .)
    INT             reduce using rule 105 (block_item -> declaration .)
    FLOAT           reduce using rule 105 (block_item -> declaration .)
    PLUSPLUS        reduce using rule 105 (block_item -> declaration .)
    MINUSMINUS      reduce using rule 105 (block_item -> declaration .)
    LPAREN          reduce using rule 105 (block_item -> declaration .)
    AND             reduce using rule 105 (block_item -> declaration .)
    TIMES           reduce using rule 105 (block_item -> declaration .)
    PLUS            reduce using rule 105 (block_item -> declaration .)
    MINUS           reduce using rule 105 (block_item -> declaration .)
    NOT             reduce using rule 105 (block_item -> declaration .)
    ADDRESS         reduce using rule 105 (block_item -> declaration .)
    ID              reduce using rule 105 (block_item -> declaration .)
    INT_CONST       reduce using rule 105 (block_item -> declaration .)
    CHAR_CONST      reduce using rule 105 (block_item -> declaration .)
    FLOAT_CONST     reduce using rule 105 (block_item -> declaration .)
    STRING          reduce using rule 105 (block_item -> declaration .)
    SEMI            reduce using rule 105 (block_item -> declaration .)
    RBRACE          reduce using rule 105 (block_item -> declaration .)


state 87

    (106) block_item -> statement .

    LBRACE          reduce using rule 106 (block_item -> statement .)
    IF              reduce using rule 106 (block_item -> statement .)
    WHILE           reduce using rule 106 (block_item -> statement .)
    FOR             reduce using rule 106 (block_item -> statement .)
    BREAK           reduce using rule 106 (block_item -> statement .)
    RETURN          reduce using rule 106 (block_item -> statement .)
    ASSERT          reduce using rule 106 (block_item -> statement .)
    PRINT           reduce using rule 106 (block_item -> statement .)
    READ            reduce using rule 106 (block_item -> statement .)
    VOID            reduce using rule 106 (block_item -> statement .)
    CHAR            reduce using rule 106 (block_item -> statement .)
    INT             reduce using rule 106 (block_item -> statement .)
    FLOAT           reduce using rule 106 (block_item -> statement .)
    PLUSPLUS        reduce using rule 106 (block_item -> statement .)
    MINUSMINUS      reduce using rule 106 (block_item -> statement .)
    LPAREN          reduce using rule 106 (block_item -> statement .)
    AND             reduce using rule 106 (block_item -> statement .)
    TIMES           reduce using rule 106 (block_item -> statement .)
    PLUS            reduce using rule 106 (block_item -> statement .)
    MINUS           reduce using rule 106 (block_item -> statement .)
    NOT             reduce using rule 106 (block_item -> statement .)
    ADDRESS         reduce using rule 106 (block_item -> statement .)
    ID              reduce using rule 106 (block_item -> statement .)
    INT_CONST       reduce using rule 106 (block_item -> statement .)
    CHAR_CONST      reduce using rule 106 (block_item -> statement .)
    FLOAT_CONST     reduce using rule 106 (block_item -> statement .)
    STRING          reduce using rule 106 (block_item -> statement .)
    SEMI            reduce using rule 106 (block_item -> statement .)
    RBRACE          reduce using rule 106 (block_item -> statement .)


state 88

    (107) statement -> expression_statement .

    LBRACE          reduce using rule 107 (statement -> expression_statement .)
    IF              reduce using rule 107 (statement -> expression_statement .)
    WHILE           reduce using rule 107 (statement -> expression_statement .)
    FOR             reduce using rule 107 (statement -> expression_statement .)
    BREAK           reduce using rule 107 (statement -> expression_statement .)
    RETURN          reduce using rule 107 (statement -> expression_statement .)
    ASSERT          reduce using rule 107 (statement -> expression_statement .)
    PRINT           reduce using rule 107 (statement -> expression_statement .)
    READ            reduce using rule 107 (statement -> expression_statement .)
    VOID            reduce using rule 107 (statement -> expression_statement .)
    CHAR            reduce using rule 107 (statement -> expression_statement .)
    INT             reduce using rule 107 (statement -> expression_statement .)
    FLOAT           reduce using rule 107 (statement -> expression_statement .)
    PLUSPLUS        reduce using rule 107 (statement -> expression_statement .)
    MINUSMINUS      reduce using rule 107 (statement -> expression_statement .)
    LPAREN          reduce using rule 107 (statement -> expression_statement .)
    AND             reduce using rule 107 (statement -> expression_statement .)
    TIMES           reduce using rule 107 (statement -> expression_statement .)
    PLUS            reduce using rule 107 (statement -> expression_statement .)
    MINUS           reduce using rule 107 (statement -> expression_statement .)
    NOT             reduce using rule 107 (statement -> expression_statement .)
    ADDRESS         reduce using rule 107 (statement -> expression_statement .)
    ID              reduce using rule 107 (statement -> expression_statement .)
    INT_CONST       reduce using rule 107 (statement -> expression_statement .)
    CHAR_CONST      reduce using rule 107 (statement -> expression_statement .)
    FLOAT_CONST     reduce using rule 107 (statement -> expression_statement .)
    STRING          reduce using rule 107 (statement -> expression_statement .)
    SEMI            reduce using rule 107 (statement -> expression_statement .)
    RBRACE          reduce using rule 107 (statement -> expression_statement .)
    ELSE            reduce using rule 107 (statement -> expression_statement .)


state 89

    (108) statement -> compound_statement .

    LBRACE          reduce using rule 108 (statement -> compound_statement .)
    IF              reduce using rule 108 (statement -> compound_statement .)
    WHILE           reduce using rule 108 (statement -> compound_statement .)
    FOR             reduce using rule 108 (statement -> compound_statement .)
    BREAK           reduce using rule 108 (statement -> compound_statement .)
    RETURN          reduce using rule 108 (statement -> compound_statement .)
    ASSERT          reduce using rule 108 (statement -> compound_statement .)
    PRINT           reduce using rule 108 (statement -> compound_statement .)
    READ            reduce using rule 108 (statement -> compound_statement .)
    VOID            reduce using rule 108 (statement -> compound_statement .)
    CHAR            reduce using rule 108 (statement -> compound_statement .)
    INT             reduce using rule 108 (statement -> compound_statement .)
    FLOAT           reduce using rule 108 (statement -> compound_statement .)
    PLUSPLUS        reduce using rule 108 (statement -> compound_statement .)
    MINUSMINUS      reduce using rule 108 (statement -> compound_statement .)
    LPAREN          reduce using rule 108 (statement -> compound_statement .)
    AND             reduce using rule 108 (statement -> compound_statement .)
    TIMES           reduce using rule 108 (statement -> compound_statement .)
    PLUS            reduce using rule 108 (statement -> compound_statement .)
    MINUS           reduce using rule 108 (statement -> compound_statement .)
    NOT             reduce using rule 108 (statement -> compound_statement .)
    ADDRESS         reduce using rule 108 (statement -> compound_statement .)
    ID              reduce using rule 108 (statement -> compound_statement .)
    INT_CONST       reduce using rule 108 (statement -> compound_statement .)
    CHAR_CONST      reduce using rule 108 (statement -> compound_statement .)
    FLOAT_CONST     reduce using rule 108 (statement -> compound_statement .)
    STRING          reduce using rule 108 (statement -> compound_statement .)
    SEMI            reduce using rule 108 (statement -> compound_statement .)
    RBRACE          reduce using rule 108 (statement -> compound_statement .)
    ELSE            reduce using rule 108 (statement -> compound_statement .)


state 90

    (109) statement -> selection_statement .

    LBRACE          reduce using rule 109 (statement -> selection_statement .)
    IF              reduce using rule 109 (statement -> selection_statement .)
    WHILE           reduce using rule 109 (statement -> selection_statement .)
    FOR             reduce using rule 109 (statement -> selection_statement .)
    BREAK           reduce using rule 109 (statement -> selection_statement .)
    RETURN          reduce using rule 109 (statement -> selection_statement .)
    ASSERT          reduce using rule 109 (statement -> selection_statement .)
    PRINT           reduce using rule 109 (statement -> selection_statement .)
    READ            reduce using rule 109 (statement -> selection_statement .)
    VOID            reduce using rule 109 (statement -> selection_statement .)
    CHAR            reduce using rule 109 (statement -> selection_statement .)
    INT             reduce using rule 109 (statement -> selection_statement .)
    FLOAT           reduce using rule 109 (statement -> selection_statement .)
    PLUSPLUS        reduce using rule 109 (statement -> selection_statement .)
    MINUSMINUS      reduce using rule 109 (statement -> selection_statement .)
    LPAREN          reduce using rule 109 (statement -> selection_statement .)
    AND             reduce using rule 109 (statement -> selection_statement .)
    TIMES           reduce using rule 109 (statement -> selection_statement .)
    PLUS            reduce using rule 109 (statement -> selection_statement .)
    MINUS           reduce using rule 109 (statement -> selection_statement .)
    NOT             reduce using rule 109 (statement -> selection_statement .)
    ADDRESS         reduce using rule 109 (statement -> selection_statement .)
    ID              reduce using rule 109 (statement -> selection_statement .)
    INT_CONST       reduce using rule 109 (statement -> selection_statement .)
    CHAR_CONST      reduce using rule 109 (statement -> selection_statement .)
    FLOAT_CONST     reduce using rule 109 (statement -> selection_statement .)
    STRING          reduce using rule 109 (statement -> selection_statement .)
    SEMI            reduce using rule 109 (statement -> selection_statement .)
    RBRACE          reduce using rule 109 (statement -> selection_statement .)
    ELSE            reduce using rule 109 (statement -> selection_statement .)


state 91

    (110) statement -> interation_statement .

    LBRACE          reduce using rule 110 (statement -> interation_statement .)
    IF              reduce using rule 110 (statement -> interation_statement .)
    WHILE           reduce using rule 110 (statement -> interation_statement .)
    FOR             reduce using rule 110 (statement -> interation_statement .)
    BREAK           reduce using rule 110 (statement -> interation_statement .)
    RETURN          reduce using rule 110 (statement -> interation_statement .)
    ASSERT          reduce using rule 110 (statement -> interation_statement .)
    PRINT           reduce using rule 110 (statement -> interation_statement .)
    READ            reduce using rule 110 (statement -> interation_statement .)
    VOID            reduce using rule 110 (statement -> interation_statement .)
    CHAR            reduce using rule 110 (statement -> interation_statement .)
    INT             reduce using rule 110 (statement -> interation_statement .)
    FLOAT           reduce using rule 110 (statement -> interation_statement .)
    PLUSPLUS        reduce using rule 110 (statement -> interation_statement .)
    MINUSMINUS      reduce using rule 110 (statement -> interation_statement .)
    LPAREN          reduce using rule 110 (statement -> interation_statement .)
    AND             reduce using rule 110 (statement -> interation_statement .)
    TIMES           reduce using rule 110 (statement -> interation_statement .)
    PLUS            reduce using rule 110 (statement -> interation_statement .)
    MINUS           reduce using rule 110 (statement -> interation_statement .)
    NOT             reduce using rule 110 (statement -> interation_statement .)
    ADDRESS         reduce using rule 110 (statement -> interation_statement .)
    ID              reduce using rule 110 (statement -> interation_statement .)
    INT_CONST       reduce using rule 110 (statement -> interation_statement .)
    CHAR_CONST      reduce using rule 110 (statement -> interation_statement .)
    FLOAT_CONST     reduce using rule 110 (statement -> interation_statement .)
    STRING          reduce using rule 110 (statement -> interation_statement .)
    SEMI            reduce using rule 110 (statement -> interation_statement .)
    RBRACE          reduce using rule 110 (statement -> interation_statement .)
    ELSE            reduce using rule 110 (statement -> interation_statement .)


state 92

    (111) statement -> jump_statement .

    LBRACE          reduce using rule 111 (statement -> jump_statement .)
    IF              reduce using rule 111 (statement -> jump_statement .)
    WHILE           reduce using rule 111 (statement -> jump_statement .)
    FOR             reduce using rule 111 (statement -> jump_statement .)
    BREAK           reduce using rule 111 (statement -> jump_statement .)
    RETURN          reduce using rule 111 (statement -> jump_statement .)
    ASSERT          reduce using rule 111 (statement -> jump_statement .)
    PRINT           reduce using rule 111 (statement -> jump_statement .)
    READ            reduce using rule 111 (statement -> jump_statement .)
    VOID            reduce using rule 111 (statement -> jump_statement .)
    CHAR            reduce using rule 111 (statement -> jump_statement .)
    INT             reduce using rule 111 (statement -> jump_statement .)
    FLOAT           reduce using rule 111 (statement -> jump_statement .)
    PLUSPLUS        reduce using rule 111 (statement -> jump_statement .)
    MINUSMINUS      reduce using rule 111 (statement -> jump_statement .)
    LPAREN          reduce using rule 111 (statement -> jump_statement .)
    AND             reduce using rule 111 (statement -> jump_statement .)
    TIMES           reduce using rule 111 (statement -> jump_statement .)
    PLUS            reduce using rule 111 (statement -> jump_statement .)
    MINUS           reduce using rule 111 (statement -> jump_statement .)
    NOT             reduce using rule 111 (statement -> jump_statement .)
    ADDRESS         reduce using rule 111 (statement -> jump_statement .)
    ID              reduce using rule 111 (statement -> jump_statement .)
    INT_CONST       reduce using rule 111 (statement -> jump_statement .)
    CHAR_CONST      reduce using rule 111 (statement -> jump_statement .)
    FLOAT_CONST     reduce using rule 111 (statement -> jump_statement .)
    STRING          reduce using rule 111 (statement -> jump_statement .)
    SEMI            reduce using rule 111 (statement -> jump_statement .)
    RBRACE          reduce using rule 111 (statement -> jump_statement .)
    ELSE            reduce using rule 111 (statement -> jump_statement .)


state 93

    (112) statement -> assert_statement .

    LBRACE          reduce using rule 112 (statement -> assert_statement .)
    IF              reduce using rule 112 (statement -> assert_statement .)
    WHILE           reduce using rule 112 (statement -> assert_statement .)
    FOR             reduce using rule 112 (statement -> assert_statement .)
    BREAK           reduce using rule 112 (statement -> assert_statement .)
    RETURN          reduce using rule 112 (statement -> assert_statement .)
    ASSERT          reduce using rule 112 (statement -> assert_statement .)
    PRINT           reduce using rule 112 (statement -> assert_statement .)
    READ            reduce using rule 112 (statement -> assert_statement .)
    VOID            reduce using rule 112 (statement -> assert_statement .)
    CHAR            reduce using rule 112 (statement -> assert_statement .)
    INT             reduce using rule 112 (statement -> assert_statement .)
    FLOAT           reduce using rule 112 (statement -> assert_statement .)
    PLUSPLUS        reduce using rule 112 (statement -> assert_statement .)
    MINUSMINUS      reduce using rule 112 (statement -> assert_statement .)
    LPAREN          reduce using rule 112 (statement -> assert_statement .)
    AND             reduce using rule 112 (statement -> assert_statement .)
    TIMES           reduce using rule 112 (statement -> assert_statement .)
    PLUS            reduce using rule 112 (statement -> assert_statement .)
    MINUS           reduce using rule 112 (statement -> assert_statement .)
    NOT             reduce using rule 112 (statement -> assert_statement .)
    ADDRESS         reduce using rule 112 (statement -> assert_statement .)
    ID              reduce using rule 112 (statement -> assert_statement .)
    INT_CONST       reduce using rule 112 (statement -> assert_statement .)
    CHAR_CONST      reduce using rule 112 (statement -> assert_statement .)
    FLOAT_CONST     reduce using rule 112 (statement -> assert_statement .)
    STRING          reduce using rule 112 (statement -> assert_statement .)
    SEMI            reduce using rule 112 (statement -> assert_statement .)
    RBRACE          reduce using rule 112 (statement -> assert_statement .)
    ELSE            reduce using rule 112 (statement -> assert_statement .)


state 94

    (113) statement -> print_statement .

    LBRACE          reduce using rule 113 (statement -> print_statement .)
    IF              reduce using rule 113 (statement -> print_statement .)
    WHILE           reduce using rule 113 (statement -> print_statement .)
    FOR             reduce using rule 113 (statement -> print_statement .)
    BREAK           reduce using rule 113 (statement -> print_statement .)
    RETURN          reduce using rule 113 (statement -> print_statement .)
    ASSERT          reduce using rule 113 (statement -> print_statement .)
    PRINT           reduce using rule 113 (statement -> print_statement .)
    READ            reduce using rule 113 (statement -> print_statement .)
    VOID            reduce using rule 113 (statement -> print_statement .)
    CHAR            reduce using rule 113 (statement -> print_statement .)
    INT             reduce using rule 113 (statement -> print_statement .)
    FLOAT           reduce using rule 113 (statement -> print_statement .)
    PLUSPLUS        reduce using rule 113 (statement -> print_statement .)
    MINUSMINUS      reduce using rule 113 (statement -> print_statement .)
    LPAREN          reduce using rule 113 (statement -> print_statement .)
    AND             reduce using rule 113 (statement -> print_statement .)
    TIMES           reduce using rule 113 (statement -> print_statement .)
    PLUS            reduce using rule 113 (statement -> print_statement .)
    MINUS           reduce using rule 113 (statement -> print_statement .)
    NOT             reduce using rule 113 (statement -> print_statement .)
    ADDRESS         reduce using rule 113 (statement -> print_statement .)
    ID              reduce using rule 113 (statement -> print_statement .)
    INT_CONST       reduce using rule 113 (statement -> print_statement .)
    CHAR_CONST      reduce using rule 113 (statement -> print_statement .)
    FLOAT_CONST     reduce using rule 113 (statement -> print_statement .)
    STRING          reduce using rule 113 (statement -> print_statement .)
    SEMI            reduce using rule 113 (statement -> print_statement .)
    RBRACE          reduce using rule 113 (statement -> print_statement .)
    ELSE            reduce using rule 113 (statement -> print_statement .)


state 95

    (114) statement -> read_statement .

    LBRACE          reduce using rule 114 (statement -> read_statement .)
    IF              reduce using rule 114 (statement -> read_statement .)
    WHILE           reduce using rule 114 (statement -> read_statement .)
    FOR             reduce using rule 114 (statement -> read_statement .)
    BREAK           reduce using rule 114 (statement -> read_statement .)
    RETURN          reduce using rule 114 (statement -> read_statement .)
    ASSERT          reduce using rule 114 (statement -> read_statement .)
    PRINT           reduce using rule 114 (statement -> read_statement .)
    READ            reduce using rule 114 (statement -> read_statement .)
    VOID            reduce using rule 114 (statement -> read_statement .)
    CHAR            reduce using rule 114 (statement -> read_statement .)
    INT             reduce using rule 114 (statement -> read_statement .)
    FLOAT           reduce using rule 114 (statement -> read_statement .)
    PLUSPLUS        reduce using rule 114 (statement -> read_statement .)
    MINUSMINUS      reduce using rule 114 (statement -> read_statement .)
    LPAREN          reduce using rule 114 (statement -> read_statement .)
    AND             reduce using rule 114 (statement -> read_statement .)
    TIMES           reduce using rule 114 (statement -> read_statement .)
    PLUS            reduce using rule 114 (statement -> read_statement .)
    MINUS           reduce using rule 114 (statement -> read_statement .)
    NOT             reduce using rule 114 (statement -> read_statement .)
    ADDRESS         reduce using rule 114 (statement -> read_statement .)
    ID              reduce using rule 114 (statement -> read_statement .)
    INT_CONST       reduce using rule 114 (statement -> read_statement .)
    CHAR_CONST      reduce using rule 114 (statement -> read_statement .)
    FLOAT_CONST     reduce using rule 114 (statement -> read_statement .)
    STRING          reduce using rule 114 (statement -> read_statement .)
    SEMI            reduce using rule 114 (statement -> read_statement .)
    RBRACE          reduce using rule 114 (statement -> read_statement .)
    ELSE            reduce using rule 114 (statement -> read_statement .)


state 96

    (115) expression_statement -> expression_opt . SEMI

    SEMI            shift and go to state 148


state 97

    (118) selection_statement -> IF . LPAREN expression RPAREN statement
    (119) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 149


state 98

    (116) expression_opt -> expression .
    (67) expression -> expression . COMMA assignment_expression

    SEMI            reduce using rule 116 (expression_opt -> expression .)
    RPAREN          reduce using rule 116 (expression_opt -> expression .)
    COMMA           shift and go to state 150


state 99

    (120) interation_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 151


state 100

    (121) interation_statement -> FOR . LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (122) interation_statement -> FOR . LPAREN declaration expression_opt SEMI expression_opt RPAREN statement

    LPAREN          shift and go to state 152


state 101

    (123) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 153


state 102

    (124) jump_statement -> RETURN . expression_opt SEMI
    (116) expression_opt -> . expression
    (117) expression_opt -> . empty
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (128) empty -> .
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    SEMI            reduce using rule 128 (empty -> .)
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    expression_opt                 shift and go to state 154
    expression                     shift and go to state 98
    empty                          shift and go to state 147
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 103

    (125) assert_statement -> ASSERT . expression SEMI
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    expression                     shift and go to state 155
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 104

    (126) print_statement -> PRINT . LPAREN expression_opt RPAREN SEMI

    LPAREN          shift and go to state 156


state 105

    (127) read_statement -> READ . LPAREN argument_expression RPAREN SEMI

    LPAREN          shift and go to state 157


state 106

    (66) expression -> assignment_expression .

    COMMA           reduce using rule 66 (expression -> assignment_expression .)
    SEMI            reduce using rule 66 (expression -> assignment_expression .)
    RPAREN          reduce using rule 66 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 66 (expression -> assignment_expression .)


state 107

    (22) direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .

    LBRACKET        reduce using rule 22 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    LPAREN          reduce using rule 22 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    VOID            reduce using rule 22 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    CHAR            reduce using rule 22 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    INT             reduce using rule 22 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    FLOAT           reduce using rule 22 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    LBRACE          reduce using rule 22 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    EQUALS          reduce using rule 22 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    COMMA           reduce using rule 22 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    SEMI            reduce using rule 22 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    RPAREN          reduce using rule 22 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)


state 108

    (34) binary_expression -> binary_expression TIMES . binary_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    LPAREN          shift and go to state 53
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    binary_expression              shift and go to state 158
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 109

    (35) binary_expression -> binary_expression DIVIDE . binary_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    LPAREN          shift and go to state 53
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    binary_expression              shift and go to state 159
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 110

    (36) binary_expression -> binary_expression MOD . binary_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    LPAREN          shift and go to state 53
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    binary_expression              shift and go to state 160
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 111

    (37) binary_expression -> binary_expression PLUS . binary_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    LPAREN          shift and go to state 53
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    binary_expression              shift and go to state 161
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 112

    (38) binary_expression -> binary_expression MINUS . binary_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    LPAREN          shift and go to state 53
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    binary_expression              shift and go to state 162
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 113

    (39) binary_expression -> binary_expression LESSTHAN . binary_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    LPAREN          shift and go to state 53
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    binary_expression              shift and go to state 163
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 114

    (40) binary_expression -> binary_expression LESSTHANEQ . binary_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    LPAREN          shift and go to state 53
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    binary_expression              shift and go to state 164
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 115

    (41) binary_expression -> binary_expression GREATERTHANEQ . binary_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    LPAREN          shift and go to state 53
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    binary_expression              shift and go to state 165
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 116

    (42) binary_expression -> binary_expression GREATERTHAN . binary_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    LPAREN          shift and go to state 53
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    binary_expression              shift and go to state 166
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 117

    (43) binary_expression -> binary_expression EQ . binary_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    LPAREN          shift and go to state 53
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    binary_expression              shift and go to state 167
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 118

    (44) binary_expression -> binary_expression NOTEQ . binary_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    LPAREN          shift and go to state 53
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    binary_expression              shift and go to state 168
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 119

    (45) binary_expression -> binary_expression AND . binary_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    LPAREN          shift and go to state 53
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    binary_expression              shift and go to state 169
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 120

    (46) binary_expression -> binary_expression OR . binary_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    LPAREN          shift and go to state 53
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    binary_expression              shift and go to state 170
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 121

    (48) cast_expression -> LPAREN type_specifier . RPAREN cast_expression

    RPAREN          shift and go to state 171


state 122

    (61) primary_expression -> LPAREN expression . RPAREN
    (67) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 172
    COMMA           shift and go to state 150


state 123

    (54) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    postfix_expression             shift and go to state 54
    expression                     shift and go to state 173
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 47
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 124

    (55) postfix_expression -> postfix_expression LPAREN . RPAREN
    (56) postfix_expression -> postfix_expression LPAREN . argument_expression RPAREN
    (68) argument_expression -> . assignment_expression
    (69) argument_expression -> . argument_expression COMMA assignment_expression
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    RPAREN          shift and go to state 174
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    postfix_expression             shift and go to state 54
    argument_expression            shift and go to state 175
    assignment_expression          shift and go to state 176
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 47
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 125

    (57) postfix_expression -> postfix_expression PLUSPLUS .

    LBRACKET        reduce using rule 57 (postfix_expression -> postfix_expression PLUSPLUS .)
    LPAREN          reduce using rule 57 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSPLUS        reduce using rule 57 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSMINUS      reduce using rule 57 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMES           reduce using rule 57 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVIDE          reduce using rule 57 (postfix_expression -> postfix_expression PLUSPLUS .)
    MOD             reduce using rule 57 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUS            reduce using rule 57 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUS           reduce using rule 57 (postfix_expression -> postfix_expression PLUSPLUS .)
    LESSTHAN        reduce using rule 57 (postfix_expression -> postfix_expression PLUSPLUS .)
    LESSTHANEQ      reduce using rule 57 (postfix_expression -> postfix_expression PLUSPLUS .)
    GREATERTHANEQ   reduce using rule 57 (postfix_expression -> postfix_expression PLUSPLUS .)
    GREATERTHAN     reduce using rule 57 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQ              reduce using rule 57 (postfix_expression -> postfix_expression PLUSPLUS .)
    NOTEQ           reduce using rule 57 (postfix_expression -> postfix_expression PLUSPLUS .)
    AND             reduce using rule 57 (postfix_expression -> postfix_expression PLUSPLUS .)
    OR              reduce using rule 57 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACKET        reduce using rule 57 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQUALS          reduce using rule 57 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMESEQ         reduce using rule 57 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVEQ           reduce using rule 57 (postfix_expression -> postfix_expression PLUSPLUS .)
    MODEQ           reduce using rule 57 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSEQ          reduce using rule 57 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSEQ         reduce using rule 57 (postfix_expression -> postfix_expression PLUSPLUS .)
    COMMA           reduce using rule 57 (postfix_expression -> postfix_expression PLUSPLUS .)
    SEMI            reduce using rule 57 (postfix_expression -> postfix_expression PLUSPLUS .)
    RPAREN          reduce using rule 57 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACE          reduce using rule 57 (postfix_expression -> postfix_expression PLUSPLUS .)


state 126

    (58) postfix_expression -> postfix_expression MINUSMINUS .

    LBRACKET        reduce using rule 58 (postfix_expression -> postfix_expression MINUSMINUS .)
    LPAREN          reduce using rule 58 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSPLUS        reduce using rule 58 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSMINUS      reduce using rule 58 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMES           reduce using rule 58 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVIDE          reduce using rule 58 (postfix_expression -> postfix_expression MINUSMINUS .)
    MOD             reduce using rule 58 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUS            reduce using rule 58 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUS           reduce using rule 58 (postfix_expression -> postfix_expression MINUSMINUS .)
    LESSTHAN        reduce using rule 58 (postfix_expression -> postfix_expression MINUSMINUS .)
    LESSTHANEQ      reduce using rule 58 (postfix_expression -> postfix_expression MINUSMINUS .)
    GREATERTHANEQ   reduce using rule 58 (postfix_expression -> postfix_expression MINUSMINUS .)
    GREATERTHAN     reduce using rule 58 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQ              reduce using rule 58 (postfix_expression -> postfix_expression MINUSMINUS .)
    NOTEQ           reduce using rule 58 (postfix_expression -> postfix_expression MINUSMINUS .)
    AND             reduce using rule 58 (postfix_expression -> postfix_expression MINUSMINUS .)
    OR              reduce using rule 58 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACKET        reduce using rule 58 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQUALS          reduce using rule 58 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMESEQ         reduce using rule 58 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVEQ           reduce using rule 58 (postfix_expression -> postfix_expression MINUSMINUS .)
    MODEQ           reduce using rule 58 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSEQ          reduce using rule 58 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSEQ         reduce using rule 58 (postfix_expression -> postfix_expression MINUSMINUS .)
    COMMA           reduce using rule 58 (postfix_expression -> postfix_expression MINUSMINUS .)
    SEMI            reduce using rule 58 (postfix_expression -> postfix_expression MINUSMINUS .)
    RPAREN          reduce using rule 58 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACE          reduce using rule 58 (postfix_expression -> postfix_expression MINUSMINUS .)


state 127

    (50) unary_expression -> PLUSPLUS unary_expression .

    TIMES           reduce using rule 50 (unary_expression -> PLUSPLUS unary_expression .)
    DIVIDE          reduce using rule 50 (unary_expression -> PLUSPLUS unary_expression .)
    MOD             reduce using rule 50 (unary_expression -> PLUSPLUS unary_expression .)
    PLUS            reduce using rule 50 (unary_expression -> PLUSPLUS unary_expression .)
    MINUS           reduce using rule 50 (unary_expression -> PLUSPLUS unary_expression .)
    LESSTHAN        reduce using rule 50 (unary_expression -> PLUSPLUS unary_expression .)
    LESSTHANEQ      reduce using rule 50 (unary_expression -> PLUSPLUS unary_expression .)
    GREATERTHANEQ   reduce using rule 50 (unary_expression -> PLUSPLUS unary_expression .)
    GREATERTHAN     reduce using rule 50 (unary_expression -> PLUSPLUS unary_expression .)
    EQ              reduce using rule 50 (unary_expression -> PLUSPLUS unary_expression .)
    NOTEQ           reduce using rule 50 (unary_expression -> PLUSPLUS unary_expression .)
    AND             reduce using rule 50 (unary_expression -> PLUSPLUS unary_expression .)
    OR              reduce using rule 50 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACKET        reduce using rule 50 (unary_expression -> PLUSPLUS unary_expression .)
    EQUALS          reduce using rule 50 (unary_expression -> PLUSPLUS unary_expression .)
    TIMESEQ         reduce using rule 50 (unary_expression -> PLUSPLUS unary_expression .)
    DIVEQ           reduce using rule 50 (unary_expression -> PLUSPLUS unary_expression .)
    MODEQ           reduce using rule 50 (unary_expression -> PLUSPLUS unary_expression .)
    PLUSEQ          reduce using rule 50 (unary_expression -> PLUSPLUS unary_expression .)
    MINUSEQ         reduce using rule 50 (unary_expression -> PLUSPLUS unary_expression .)
    COMMA           reduce using rule 50 (unary_expression -> PLUSPLUS unary_expression .)
    SEMI            reduce using rule 50 (unary_expression -> PLUSPLUS unary_expression .)
    RPAREN          reduce using rule 50 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACE          reduce using rule 50 (unary_expression -> PLUSPLUS unary_expression .)


state 128

    (61) primary_expression -> LPAREN . expression RPAREN
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    expression                     shift and go to state 122
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 129

    (51) unary_expression -> MINUSMINUS unary_expression .

    TIMES           reduce using rule 51 (unary_expression -> MINUSMINUS unary_expression .)
    DIVIDE          reduce using rule 51 (unary_expression -> MINUSMINUS unary_expression .)
    MOD             reduce using rule 51 (unary_expression -> MINUSMINUS unary_expression .)
    PLUS            reduce using rule 51 (unary_expression -> MINUSMINUS unary_expression .)
    MINUS           reduce using rule 51 (unary_expression -> MINUSMINUS unary_expression .)
    LESSTHAN        reduce using rule 51 (unary_expression -> MINUSMINUS unary_expression .)
    LESSTHANEQ      reduce using rule 51 (unary_expression -> MINUSMINUS unary_expression .)
    GREATERTHANEQ   reduce using rule 51 (unary_expression -> MINUSMINUS unary_expression .)
    GREATERTHAN     reduce using rule 51 (unary_expression -> MINUSMINUS unary_expression .)
    EQ              reduce using rule 51 (unary_expression -> MINUSMINUS unary_expression .)
    NOTEQ           reduce using rule 51 (unary_expression -> MINUSMINUS unary_expression .)
    AND             reduce using rule 51 (unary_expression -> MINUSMINUS unary_expression .)
    OR              reduce using rule 51 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACKET        reduce using rule 51 (unary_expression -> MINUSMINUS unary_expression .)
    EQUALS          reduce using rule 51 (unary_expression -> MINUSMINUS unary_expression .)
    TIMESEQ         reduce using rule 51 (unary_expression -> MINUSMINUS unary_expression .)
    DIVEQ           reduce using rule 51 (unary_expression -> MINUSMINUS unary_expression .)
    MODEQ           reduce using rule 51 (unary_expression -> MINUSMINUS unary_expression .)
    PLUSEQ          reduce using rule 51 (unary_expression -> MINUSMINUS unary_expression .)
    MINUSEQ         reduce using rule 51 (unary_expression -> MINUSMINUS unary_expression .)
    COMMA           reduce using rule 51 (unary_expression -> MINUSMINUS unary_expression .)
    SEMI            reduce using rule 51 (unary_expression -> MINUSMINUS unary_expression .)
    RPAREN          reduce using rule 51 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACE          reduce using rule 51 (unary_expression -> MINUSMINUS unary_expression .)


state 130

    (52) unary_expression -> unary_operator cast_expression .

    TIMES           reduce using rule 52 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 52 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 52 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 52 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 52 (unary_expression -> unary_operator cast_expression .)
    LESSTHAN        reduce using rule 52 (unary_expression -> unary_operator cast_expression .)
    LESSTHANEQ      reduce using rule 52 (unary_expression -> unary_operator cast_expression .)
    GREATERTHANEQ   reduce using rule 52 (unary_expression -> unary_operator cast_expression .)
    GREATERTHAN     reduce using rule 52 (unary_expression -> unary_operator cast_expression .)
    EQ              reduce using rule 52 (unary_expression -> unary_operator cast_expression .)
    NOTEQ           reduce using rule 52 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 52 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 52 (unary_expression -> unary_operator cast_expression .)
    RBRACKET        reduce using rule 52 (unary_expression -> unary_operator cast_expression .)
    EQUALS          reduce using rule 52 (unary_expression -> unary_operator cast_expression .)
    TIMESEQ         reduce using rule 52 (unary_expression -> unary_operator cast_expression .)
    DIVEQ           reduce using rule 52 (unary_expression -> unary_operator cast_expression .)
    MODEQ           reduce using rule 52 (unary_expression -> unary_operator cast_expression .)
    PLUSEQ          reduce using rule 52 (unary_expression -> unary_operator cast_expression .)
    MINUSEQ         reduce using rule 52 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 52 (unary_expression -> unary_operator cast_expression .)
    SEMI            reduce using rule 52 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 52 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 52 (unary_expression -> unary_operator cast_expression .)


state 131

    (23) direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .

    LBRACKET        reduce using rule 23 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    LPAREN          reduce using rule 23 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    VOID            reduce using rule 23 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    CHAR            reduce using rule 23 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    INT             reduce using rule 23 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    FLOAT           reduce using rule 23 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    LBRACE          reduce using rule 23 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    EQUALS          reduce using rule 23 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 23 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    SEMI            reduce using rule 23 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 23 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)


state 132

    (85) parameter_list -> parameter_list COMMA . parameter_declaration
    (86) parameter_declaration -> . type_specifier declarator
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    parameter_declaration          shift and go to state 177
    type_specifier                 shift and go to state 72

state 133

    (24) direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .

    LBRACKET        reduce using rule 24 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    LPAREN          reduce using rule 24 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    VOID            reduce using rule 24 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    CHAR            reduce using rule 24 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    INT             reduce using rule 24 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    FLOAT           reduce using rule 24 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    LBRACE          reduce using rule 24 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    EQUALS          reduce using rule 24 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    COMMA           reduce using rule 24 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    SEMI            reduce using rule 24 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    RPAREN          reduce using rule 24 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)


state 134

    (29) identifier_list -> identifier_list COMMA . identifier
    (25) identifier -> . ID

    ID              shift and go to state 18

    identifier                     shift and go to state 178

state 135

    (86) parameter_declaration -> type_specifier declarator .

    RPAREN          reduce using rule 86 (parameter_declaration -> type_specifier declarator .)
    COMMA           reduce using rule 86 (parameter_declaration -> type_specifier declarator .)


state 136

    (96) initializer -> LBRACE initializer_list . RBRACE
    (97) initializer -> LBRACE initializer_list . COMMA RBRACE
    (99) initializer_list -> initializer_list . COMMA initializer

    RBRACE          shift and go to state 179
    COMMA           shift and go to state 180


state 137

    (98) initializer_list -> initializer .

    RBRACE          reduce using rule 98 (initializer_list -> initializer .)
    COMMA           reduce using rule 98 (initializer_list -> initializer .)


state 138

    (71) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    unary_expression               shift and go to state 80
    assignment_expression          shift and go to state 181
    binary_expression              shift and go to state 79
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 139

    (72) assignment_operator -> EQUALS .

    PLUSPLUS        reduce using rule 72 (assignment_operator -> EQUALS .)
    MINUSMINUS      reduce using rule 72 (assignment_operator -> EQUALS .)
    LPAREN          reduce using rule 72 (assignment_operator -> EQUALS .)
    AND             reduce using rule 72 (assignment_operator -> EQUALS .)
    TIMES           reduce using rule 72 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 72 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 72 (assignment_operator -> EQUALS .)
    NOT             reduce using rule 72 (assignment_operator -> EQUALS .)
    ADDRESS         reduce using rule 72 (assignment_operator -> EQUALS .)
    ID              reduce using rule 72 (assignment_operator -> EQUALS .)
    INT_CONST       reduce using rule 72 (assignment_operator -> EQUALS .)
    CHAR_CONST      reduce using rule 72 (assignment_operator -> EQUALS .)
    FLOAT_CONST     reduce using rule 72 (assignment_operator -> EQUALS .)
    STRING          reduce using rule 72 (assignment_operator -> EQUALS .)


state 140

    (73) assignment_operator -> TIMESEQ .

    PLUSPLUS        reduce using rule 73 (assignment_operator -> TIMESEQ .)
    MINUSMINUS      reduce using rule 73 (assignment_operator -> TIMESEQ .)
    LPAREN          reduce using rule 73 (assignment_operator -> TIMESEQ .)
    AND             reduce using rule 73 (assignment_operator -> TIMESEQ .)
    TIMES           reduce using rule 73 (assignment_operator -> TIMESEQ .)
    PLUS            reduce using rule 73 (assignment_operator -> TIMESEQ .)
    MINUS           reduce using rule 73 (assignment_operator -> TIMESEQ .)
    NOT             reduce using rule 73 (assignment_operator -> TIMESEQ .)
    ADDRESS         reduce using rule 73 (assignment_operator -> TIMESEQ .)
    ID              reduce using rule 73 (assignment_operator -> TIMESEQ .)
    INT_CONST       reduce using rule 73 (assignment_operator -> TIMESEQ .)
    CHAR_CONST      reduce using rule 73 (assignment_operator -> TIMESEQ .)
    FLOAT_CONST     reduce using rule 73 (assignment_operator -> TIMESEQ .)
    STRING          reduce using rule 73 (assignment_operator -> TIMESEQ .)


state 141

    (74) assignment_operator -> DIVEQ .

    PLUSPLUS        reduce using rule 74 (assignment_operator -> DIVEQ .)
    MINUSMINUS      reduce using rule 74 (assignment_operator -> DIVEQ .)
    LPAREN          reduce using rule 74 (assignment_operator -> DIVEQ .)
    AND             reduce using rule 74 (assignment_operator -> DIVEQ .)
    TIMES           reduce using rule 74 (assignment_operator -> DIVEQ .)
    PLUS            reduce using rule 74 (assignment_operator -> DIVEQ .)
    MINUS           reduce using rule 74 (assignment_operator -> DIVEQ .)
    NOT             reduce using rule 74 (assignment_operator -> DIVEQ .)
    ADDRESS         reduce using rule 74 (assignment_operator -> DIVEQ .)
    ID              reduce using rule 74 (assignment_operator -> DIVEQ .)
    INT_CONST       reduce using rule 74 (assignment_operator -> DIVEQ .)
    CHAR_CONST      reduce using rule 74 (assignment_operator -> DIVEQ .)
    FLOAT_CONST     reduce using rule 74 (assignment_operator -> DIVEQ .)
    STRING          reduce using rule 74 (assignment_operator -> DIVEQ .)


state 142

    (75) assignment_operator -> MODEQ .

    PLUSPLUS        reduce using rule 75 (assignment_operator -> MODEQ .)
    MINUSMINUS      reduce using rule 75 (assignment_operator -> MODEQ .)
    LPAREN          reduce using rule 75 (assignment_operator -> MODEQ .)
    AND             reduce using rule 75 (assignment_operator -> MODEQ .)
    TIMES           reduce using rule 75 (assignment_operator -> MODEQ .)
    PLUS            reduce using rule 75 (assignment_operator -> MODEQ .)
    MINUS           reduce using rule 75 (assignment_operator -> MODEQ .)
    NOT             reduce using rule 75 (assignment_operator -> MODEQ .)
    ADDRESS         reduce using rule 75 (assignment_operator -> MODEQ .)
    ID              reduce using rule 75 (assignment_operator -> MODEQ .)
    INT_CONST       reduce using rule 75 (assignment_operator -> MODEQ .)
    CHAR_CONST      reduce using rule 75 (assignment_operator -> MODEQ .)
    FLOAT_CONST     reduce using rule 75 (assignment_operator -> MODEQ .)
    STRING          reduce using rule 75 (assignment_operator -> MODEQ .)


state 143

    (76) assignment_operator -> PLUSEQ .

    PLUSPLUS        reduce using rule 76 (assignment_operator -> PLUSEQ .)
    MINUSMINUS      reduce using rule 76 (assignment_operator -> PLUSEQ .)
    LPAREN          reduce using rule 76 (assignment_operator -> PLUSEQ .)
    AND             reduce using rule 76 (assignment_operator -> PLUSEQ .)
    TIMES           reduce using rule 76 (assignment_operator -> PLUSEQ .)
    PLUS            reduce using rule 76 (assignment_operator -> PLUSEQ .)
    MINUS           reduce using rule 76 (assignment_operator -> PLUSEQ .)
    NOT             reduce using rule 76 (assignment_operator -> PLUSEQ .)
    ADDRESS         reduce using rule 76 (assignment_operator -> PLUSEQ .)
    ID              reduce using rule 76 (assignment_operator -> PLUSEQ .)
    INT_CONST       reduce using rule 76 (assignment_operator -> PLUSEQ .)
    CHAR_CONST      reduce using rule 76 (assignment_operator -> PLUSEQ .)
    FLOAT_CONST     reduce using rule 76 (assignment_operator -> PLUSEQ .)
    STRING          reduce using rule 76 (assignment_operator -> PLUSEQ .)


state 144

    (77) assignment_operator -> MINUSEQ .

    PLUSPLUS        reduce using rule 77 (assignment_operator -> MINUSEQ .)
    MINUSMINUS      reduce using rule 77 (assignment_operator -> MINUSEQ .)
    LPAREN          reduce using rule 77 (assignment_operator -> MINUSEQ .)
    AND             reduce using rule 77 (assignment_operator -> MINUSEQ .)
    TIMES           reduce using rule 77 (assignment_operator -> MINUSEQ .)
    PLUS            reduce using rule 77 (assignment_operator -> MINUSEQ .)
    MINUS           reduce using rule 77 (assignment_operator -> MINUSEQ .)
    NOT             reduce using rule 77 (assignment_operator -> MINUSEQ .)
    ADDRESS         reduce using rule 77 (assignment_operator -> MINUSEQ .)
    ID              reduce using rule 77 (assignment_operator -> MINUSEQ .)
    INT_CONST       reduce using rule 77 (assignment_operator -> MINUSEQ .)
    CHAR_CONST      reduce using rule 77 (assignment_operator -> MINUSEQ .)
    FLOAT_CONST     reduce using rule 77 (assignment_operator -> MINUSEQ .)
    STRING          reduce using rule 77 (assignment_operator -> MINUSEQ .)


state 145

    (100) compound_statement -> LBRACE block_item_list_opt RBRACE .

    VOID            reduce using rule 100 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    CHAR            reduce using rule 100 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    INT             reduce using rule 100 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    FLOAT           reduce using rule 100 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    LPAREN          reduce using rule 100 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    TIMES           reduce using rule 100 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    ID              reduce using rule 100 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    $end            reduce using rule 100 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    LBRACE          reduce using rule 100 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    IF              reduce using rule 100 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    WHILE           reduce using rule 100 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    FOR             reduce using rule 100 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    BREAK           reduce using rule 100 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    RETURN          reduce using rule 100 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    ASSERT          reduce using rule 100 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    PRINT           reduce using rule 100 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    READ            reduce using rule 100 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    PLUSPLUS        reduce using rule 100 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    MINUSMINUS      reduce using rule 100 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    AND             reduce using rule 100 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    PLUS            reduce using rule 100 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    MINUS           reduce using rule 100 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    NOT             reduce using rule 100 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    ADDRESS         reduce using rule 100 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    INT_CONST       reduce using rule 100 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    CHAR_CONST      reduce using rule 100 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    FLOAT_CONST     reduce using rule 100 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    STRING          reduce using rule 100 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    SEMI            reduce using rule 100 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    RBRACE          reduce using rule 100 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    ELSE            reduce using rule 100 (compound_statement -> LBRACE block_item_list_opt RBRACE .)


state 146

    (104) block_item_list -> block_item_list block_item .

    LBRACE          reduce using rule 104 (block_item_list -> block_item_list block_item .)
    IF              reduce using rule 104 (block_item_list -> block_item_list block_item .)
    WHILE           reduce using rule 104 (block_item_list -> block_item_list block_item .)
    FOR             reduce using rule 104 (block_item_list -> block_item_list block_item .)
    BREAK           reduce using rule 104 (block_item_list -> block_item_list block_item .)
    RETURN          reduce using rule 104 (block_item_list -> block_item_list block_item .)
    ASSERT          reduce using rule 104 (block_item_list -> block_item_list block_item .)
    PRINT           reduce using rule 104 (block_item_list -> block_item_list block_item .)
    READ            reduce using rule 104 (block_item_list -> block_item_list block_item .)
    VOID            reduce using rule 104 (block_item_list -> block_item_list block_item .)
    CHAR            reduce using rule 104 (block_item_list -> block_item_list block_item .)
    INT             reduce using rule 104 (block_item_list -> block_item_list block_item .)
    FLOAT           reduce using rule 104 (block_item_list -> block_item_list block_item .)
    PLUSPLUS        reduce using rule 104 (block_item_list -> block_item_list block_item .)
    MINUSMINUS      reduce using rule 104 (block_item_list -> block_item_list block_item .)
    LPAREN          reduce using rule 104 (block_item_list -> block_item_list block_item .)
    AND             reduce using rule 104 (block_item_list -> block_item_list block_item .)
    TIMES           reduce using rule 104 (block_item_list -> block_item_list block_item .)
    PLUS            reduce using rule 104 (block_item_list -> block_item_list block_item .)
    MINUS           reduce using rule 104 (block_item_list -> block_item_list block_item .)
    NOT             reduce using rule 104 (block_item_list -> block_item_list block_item .)
    ADDRESS         reduce using rule 104 (block_item_list -> block_item_list block_item .)
    ID              reduce using rule 104 (block_item_list -> block_item_list block_item .)
    INT_CONST       reduce using rule 104 (block_item_list -> block_item_list block_item .)
    CHAR_CONST      reduce using rule 104 (block_item_list -> block_item_list block_item .)
    FLOAT_CONST     reduce using rule 104 (block_item_list -> block_item_list block_item .)
    STRING          reduce using rule 104 (block_item_list -> block_item_list block_item .)
    SEMI            reduce using rule 104 (block_item_list -> block_item_list block_item .)
    RBRACE          reduce using rule 104 (block_item_list -> block_item_list block_item .)


state 147

    (117) expression_opt -> empty .

    SEMI            reduce using rule 117 (expression_opt -> empty .)
    RPAREN          reduce using rule 117 (expression_opt -> empty .)


state 148

    (115) expression_statement -> expression_opt SEMI .

    LBRACE          reduce using rule 115 (expression_statement -> expression_opt SEMI .)
    IF              reduce using rule 115 (expression_statement -> expression_opt SEMI .)
    WHILE           reduce using rule 115 (expression_statement -> expression_opt SEMI .)
    FOR             reduce using rule 115 (expression_statement -> expression_opt SEMI .)
    BREAK           reduce using rule 115 (expression_statement -> expression_opt SEMI .)
    RETURN          reduce using rule 115 (expression_statement -> expression_opt SEMI .)
    ASSERT          reduce using rule 115 (expression_statement -> expression_opt SEMI .)
    PRINT           reduce using rule 115 (expression_statement -> expression_opt SEMI .)
    READ            reduce using rule 115 (expression_statement -> expression_opt SEMI .)
    VOID            reduce using rule 115 (expression_statement -> expression_opt SEMI .)
    CHAR            reduce using rule 115 (expression_statement -> expression_opt SEMI .)
    INT             reduce using rule 115 (expression_statement -> expression_opt SEMI .)
    FLOAT           reduce using rule 115 (expression_statement -> expression_opt SEMI .)
    PLUSPLUS        reduce using rule 115 (expression_statement -> expression_opt SEMI .)
    MINUSMINUS      reduce using rule 115 (expression_statement -> expression_opt SEMI .)
    LPAREN          reduce using rule 115 (expression_statement -> expression_opt SEMI .)
    AND             reduce using rule 115 (expression_statement -> expression_opt SEMI .)
    TIMES           reduce using rule 115 (expression_statement -> expression_opt SEMI .)
    PLUS            reduce using rule 115 (expression_statement -> expression_opt SEMI .)
    MINUS           reduce using rule 115 (expression_statement -> expression_opt SEMI .)
    NOT             reduce using rule 115 (expression_statement -> expression_opt SEMI .)
    ADDRESS         reduce using rule 115 (expression_statement -> expression_opt SEMI .)
    ID              reduce using rule 115 (expression_statement -> expression_opt SEMI .)
    INT_CONST       reduce using rule 115 (expression_statement -> expression_opt SEMI .)
    CHAR_CONST      reduce using rule 115 (expression_statement -> expression_opt SEMI .)
    FLOAT_CONST     reduce using rule 115 (expression_statement -> expression_opt SEMI .)
    STRING          reduce using rule 115 (expression_statement -> expression_opt SEMI .)
    SEMI            reduce using rule 115 (expression_statement -> expression_opt SEMI .)
    RBRACE          reduce using rule 115 (expression_statement -> expression_opt SEMI .)
    ELSE            reduce using rule 115 (expression_statement -> expression_opt SEMI .)


state 149

    (118) selection_statement -> IF LPAREN . expression RPAREN statement
    (119) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    expression                     shift and go to state 182
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 150

    (67) expression -> expression COMMA . assignment_expression
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    assignment_expression          shift and go to state 183
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 151

    (120) interation_statement -> WHILE LPAREN . expression RPAREN statement
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    expression                     shift and go to state 184
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 152

    (121) interation_statement -> FOR LPAREN . expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (122) interation_statement -> FOR LPAREN . declaration expression_opt SEMI expression_opt RPAREN statement
    (116) expression_opt -> . expression
    (117) expression_opt -> . empty
    (87) declaration -> . decl_body SEMI
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (128) empty -> .
    (88) decl_body -> . type_specifier init_declarator_list_opt
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    SEMI            reduce using rule 128 (empty -> .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    expression_opt                 shift and go to state 185
    declaration                    shift and go to state 186
    expression                     shift and go to state 98
    empty                          shift and go to state 147
    decl_body                      shift and go to state 8
    assignment_expression          shift and go to state 106
    type_specifier                 shift and go to state 29
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 153

    (123) jump_statement -> BREAK SEMI .

    LBRACE          reduce using rule 123 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 123 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 123 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 123 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 123 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 123 (jump_statement -> BREAK SEMI .)
    ASSERT          reduce using rule 123 (jump_statement -> BREAK SEMI .)
    PRINT           reduce using rule 123 (jump_statement -> BREAK SEMI .)
    READ            reduce using rule 123 (jump_statement -> BREAK SEMI .)
    VOID            reduce using rule 123 (jump_statement -> BREAK SEMI .)
    CHAR            reduce using rule 123 (jump_statement -> BREAK SEMI .)
    INT             reduce using rule 123 (jump_statement -> BREAK SEMI .)
    FLOAT           reduce using rule 123 (jump_statement -> BREAK SEMI .)
    PLUSPLUS        reduce using rule 123 (jump_statement -> BREAK SEMI .)
    MINUSMINUS      reduce using rule 123 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 123 (jump_statement -> BREAK SEMI .)
    AND             reduce using rule 123 (jump_statement -> BREAK SEMI .)
    TIMES           reduce using rule 123 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 123 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 123 (jump_statement -> BREAK SEMI .)
    NOT             reduce using rule 123 (jump_statement -> BREAK SEMI .)
    ADDRESS         reduce using rule 123 (jump_statement -> BREAK SEMI .)
    ID              reduce using rule 123 (jump_statement -> BREAK SEMI .)
    INT_CONST       reduce using rule 123 (jump_statement -> BREAK SEMI .)
    CHAR_CONST      reduce using rule 123 (jump_statement -> BREAK SEMI .)
    FLOAT_CONST     reduce using rule 123 (jump_statement -> BREAK SEMI .)
    STRING          reduce using rule 123 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 123 (jump_statement -> BREAK SEMI .)
    RBRACE          reduce using rule 123 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 123 (jump_statement -> BREAK SEMI .)


state 154

    (124) jump_statement -> RETURN expression_opt . SEMI

    SEMI            shift and go to state 187


state 155

    (125) assert_statement -> ASSERT expression . SEMI
    (67) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 188
    COMMA           shift and go to state 150


state 156

    (126) print_statement -> PRINT LPAREN . expression_opt RPAREN SEMI
    (116) expression_opt -> . expression
    (117) expression_opt -> . empty
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (128) empty -> .
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    RPAREN          reduce using rule 128 (empty -> .)
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    expression_opt                 shift and go to state 189
    expression                     shift and go to state 98
    empty                          shift and go to state 147
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 157

    (127) read_statement -> READ LPAREN . argument_expression RPAREN SEMI
    (68) argument_expression -> . assignment_expression
    (69) argument_expression -> . argument_expression COMMA assignment_expression
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    argument_expression            shift and go to state 190
    assignment_expression          shift and go to state 176
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 158

    (34) binary_expression -> binary_expression TIMES binary_expression .
    (34) binary_expression -> binary_expression . TIMES binary_expression
    (35) binary_expression -> binary_expression . DIVIDE binary_expression
    (36) binary_expression -> binary_expression . MOD binary_expression
    (37) binary_expression -> binary_expression . PLUS binary_expression
    (38) binary_expression -> binary_expression . MINUS binary_expression
    (39) binary_expression -> binary_expression . LESSTHAN binary_expression
    (40) binary_expression -> binary_expression . LESSTHANEQ binary_expression
    (41) binary_expression -> binary_expression . GREATERTHANEQ binary_expression
    (42) binary_expression -> binary_expression . GREATERTHAN binary_expression
    (43) binary_expression -> binary_expression . EQ binary_expression
    (44) binary_expression -> binary_expression . NOTEQ binary_expression
    (45) binary_expression -> binary_expression . AND binary_expression
    (46) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 34 (binary_expression -> binary_expression TIMES binary_expression .)
    DIVIDE          reduce using rule 34 (binary_expression -> binary_expression TIMES binary_expression .)
    MOD             reduce using rule 34 (binary_expression -> binary_expression TIMES binary_expression .)
    PLUS            reduce using rule 34 (binary_expression -> binary_expression TIMES binary_expression .)
    MINUS           reduce using rule 34 (binary_expression -> binary_expression TIMES binary_expression .)
    LESSTHAN        reduce using rule 34 (binary_expression -> binary_expression TIMES binary_expression .)
    LESSTHANEQ      reduce using rule 34 (binary_expression -> binary_expression TIMES binary_expression .)
    GREATERTHANEQ   reduce using rule 34 (binary_expression -> binary_expression TIMES binary_expression .)
    GREATERTHAN     reduce using rule 34 (binary_expression -> binary_expression TIMES binary_expression .)
    EQ              reduce using rule 34 (binary_expression -> binary_expression TIMES binary_expression .)
    NOTEQ           reduce using rule 34 (binary_expression -> binary_expression TIMES binary_expression .)
    AND             reduce using rule 34 (binary_expression -> binary_expression TIMES binary_expression .)
    OR              reduce using rule 34 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACKET        reduce using rule 34 (binary_expression -> binary_expression TIMES binary_expression .)
    COMMA           reduce using rule 34 (binary_expression -> binary_expression TIMES binary_expression .)
    SEMI            reduce using rule 34 (binary_expression -> binary_expression TIMES binary_expression .)
    RPAREN          reduce using rule 34 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACE          reduce using rule 34 (binary_expression -> binary_expression TIMES binary_expression .)

  ! TIMES           [ shift and go to state 108 ]
  ! DIVIDE          [ shift and go to state 109 ]
  ! MOD             [ shift and go to state 110 ]
  ! PLUS            [ shift and go to state 111 ]
  ! MINUS           [ shift and go to state 112 ]
  ! LESSTHAN        [ shift and go to state 113 ]
  ! LESSTHANEQ      [ shift and go to state 114 ]
  ! GREATERTHANEQ   [ shift and go to state 115 ]
  ! GREATERTHAN     [ shift and go to state 116 ]
  ! EQ              [ shift and go to state 117 ]
  ! NOTEQ           [ shift and go to state 118 ]
  ! AND             [ shift and go to state 119 ]
  ! OR              [ shift and go to state 120 ]


state 159

    (35) binary_expression -> binary_expression DIVIDE binary_expression .
    (34) binary_expression -> binary_expression . TIMES binary_expression
    (35) binary_expression -> binary_expression . DIVIDE binary_expression
    (36) binary_expression -> binary_expression . MOD binary_expression
    (37) binary_expression -> binary_expression . PLUS binary_expression
    (38) binary_expression -> binary_expression . MINUS binary_expression
    (39) binary_expression -> binary_expression . LESSTHAN binary_expression
    (40) binary_expression -> binary_expression . LESSTHANEQ binary_expression
    (41) binary_expression -> binary_expression . GREATERTHANEQ binary_expression
    (42) binary_expression -> binary_expression . GREATERTHAN binary_expression
    (43) binary_expression -> binary_expression . EQ binary_expression
    (44) binary_expression -> binary_expression . NOTEQ binary_expression
    (45) binary_expression -> binary_expression . AND binary_expression
    (46) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 35 (binary_expression -> binary_expression DIVIDE binary_expression .)
    DIVIDE          reduce using rule 35 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MOD             reduce using rule 35 (binary_expression -> binary_expression DIVIDE binary_expression .)
    PLUS            reduce using rule 35 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MINUS           reduce using rule 35 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LESSTHAN        reduce using rule 35 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LESSTHANEQ      reduce using rule 35 (binary_expression -> binary_expression DIVIDE binary_expression .)
    GREATERTHANEQ   reduce using rule 35 (binary_expression -> binary_expression DIVIDE binary_expression .)
    GREATERTHAN     reduce using rule 35 (binary_expression -> binary_expression DIVIDE binary_expression .)
    EQ              reduce using rule 35 (binary_expression -> binary_expression DIVIDE binary_expression .)
    NOTEQ           reduce using rule 35 (binary_expression -> binary_expression DIVIDE binary_expression .)
    AND             reduce using rule 35 (binary_expression -> binary_expression DIVIDE binary_expression .)
    OR              reduce using rule 35 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACKET        reduce using rule 35 (binary_expression -> binary_expression DIVIDE binary_expression .)
    COMMA           reduce using rule 35 (binary_expression -> binary_expression DIVIDE binary_expression .)
    SEMI            reduce using rule 35 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RPAREN          reduce using rule 35 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACE          reduce using rule 35 (binary_expression -> binary_expression DIVIDE binary_expression .)

  ! TIMES           [ shift and go to state 108 ]
  ! DIVIDE          [ shift and go to state 109 ]
  ! MOD             [ shift and go to state 110 ]
  ! PLUS            [ shift and go to state 111 ]
  ! MINUS           [ shift and go to state 112 ]
  ! LESSTHAN        [ shift and go to state 113 ]
  ! LESSTHANEQ      [ shift and go to state 114 ]
  ! GREATERTHANEQ   [ shift and go to state 115 ]
  ! GREATERTHAN     [ shift and go to state 116 ]
  ! EQ              [ shift and go to state 117 ]
  ! NOTEQ           [ shift and go to state 118 ]
  ! AND             [ shift and go to state 119 ]
  ! OR              [ shift and go to state 120 ]


state 160

    (36) binary_expression -> binary_expression MOD binary_expression .
    (34) binary_expression -> binary_expression . TIMES binary_expression
    (35) binary_expression -> binary_expression . DIVIDE binary_expression
    (36) binary_expression -> binary_expression . MOD binary_expression
    (37) binary_expression -> binary_expression . PLUS binary_expression
    (38) binary_expression -> binary_expression . MINUS binary_expression
    (39) binary_expression -> binary_expression . LESSTHAN binary_expression
    (40) binary_expression -> binary_expression . LESSTHANEQ binary_expression
    (41) binary_expression -> binary_expression . GREATERTHANEQ binary_expression
    (42) binary_expression -> binary_expression . GREATERTHAN binary_expression
    (43) binary_expression -> binary_expression . EQ binary_expression
    (44) binary_expression -> binary_expression . NOTEQ binary_expression
    (45) binary_expression -> binary_expression . AND binary_expression
    (46) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 36 (binary_expression -> binary_expression MOD binary_expression .)
    DIVIDE          reduce using rule 36 (binary_expression -> binary_expression MOD binary_expression .)
    MOD             reduce using rule 36 (binary_expression -> binary_expression MOD binary_expression .)
    PLUS            reduce using rule 36 (binary_expression -> binary_expression MOD binary_expression .)
    MINUS           reduce using rule 36 (binary_expression -> binary_expression MOD binary_expression .)
    LESSTHAN        reduce using rule 36 (binary_expression -> binary_expression MOD binary_expression .)
    LESSTHANEQ      reduce using rule 36 (binary_expression -> binary_expression MOD binary_expression .)
    GREATERTHANEQ   reduce using rule 36 (binary_expression -> binary_expression MOD binary_expression .)
    GREATERTHAN     reduce using rule 36 (binary_expression -> binary_expression MOD binary_expression .)
    EQ              reduce using rule 36 (binary_expression -> binary_expression MOD binary_expression .)
    NOTEQ           reduce using rule 36 (binary_expression -> binary_expression MOD binary_expression .)
    AND             reduce using rule 36 (binary_expression -> binary_expression MOD binary_expression .)
    OR              reduce using rule 36 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACKET        reduce using rule 36 (binary_expression -> binary_expression MOD binary_expression .)
    COMMA           reduce using rule 36 (binary_expression -> binary_expression MOD binary_expression .)
    SEMI            reduce using rule 36 (binary_expression -> binary_expression MOD binary_expression .)
    RPAREN          reduce using rule 36 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACE          reduce using rule 36 (binary_expression -> binary_expression MOD binary_expression .)

  ! TIMES           [ shift and go to state 108 ]
  ! DIVIDE          [ shift and go to state 109 ]
  ! MOD             [ shift and go to state 110 ]
  ! PLUS            [ shift and go to state 111 ]
  ! MINUS           [ shift and go to state 112 ]
  ! LESSTHAN        [ shift and go to state 113 ]
  ! LESSTHANEQ      [ shift and go to state 114 ]
  ! GREATERTHANEQ   [ shift and go to state 115 ]
  ! GREATERTHAN     [ shift and go to state 116 ]
  ! EQ              [ shift and go to state 117 ]
  ! NOTEQ           [ shift and go to state 118 ]
  ! AND             [ shift and go to state 119 ]
  ! OR              [ shift and go to state 120 ]


state 161

    (37) binary_expression -> binary_expression PLUS binary_expression .
    (34) binary_expression -> binary_expression . TIMES binary_expression
    (35) binary_expression -> binary_expression . DIVIDE binary_expression
    (36) binary_expression -> binary_expression . MOD binary_expression
    (37) binary_expression -> binary_expression . PLUS binary_expression
    (38) binary_expression -> binary_expression . MINUS binary_expression
    (39) binary_expression -> binary_expression . LESSTHAN binary_expression
    (40) binary_expression -> binary_expression . LESSTHANEQ binary_expression
    (41) binary_expression -> binary_expression . GREATERTHANEQ binary_expression
    (42) binary_expression -> binary_expression . GREATERTHAN binary_expression
    (43) binary_expression -> binary_expression . EQ binary_expression
    (44) binary_expression -> binary_expression . NOTEQ binary_expression
    (45) binary_expression -> binary_expression . AND binary_expression
    (46) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 37 (binary_expression -> binary_expression PLUS binary_expression .)
    MINUS           reduce using rule 37 (binary_expression -> binary_expression PLUS binary_expression .)
    LESSTHAN        reduce using rule 37 (binary_expression -> binary_expression PLUS binary_expression .)
    LESSTHANEQ      reduce using rule 37 (binary_expression -> binary_expression PLUS binary_expression .)
    GREATERTHANEQ   reduce using rule 37 (binary_expression -> binary_expression PLUS binary_expression .)
    GREATERTHAN     reduce using rule 37 (binary_expression -> binary_expression PLUS binary_expression .)
    EQ              reduce using rule 37 (binary_expression -> binary_expression PLUS binary_expression .)
    NOTEQ           reduce using rule 37 (binary_expression -> binary_expression PLUS binary_expression .)
    AND             reduce using rule 37 (binary_expression -> binary_expression PLUS binary_expression .)
    OR              reduce using rule 37 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACKET        reduce using rule 37 (binary_expression -> binary_expression PLUS binary_expression .)
    COMMA           reduce using rule 37 (binary_expression -> binary_expression PLUS binary_expression .)
    SEMI            reduce using rule 37 (binary_expression -> binary_expression PLUS binary_expression .)
    RPAREN          reduce using rule 37 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACE          reduce using rule 37 (binary_expression -> binary_expression PLUS binary_expression .)
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110

  ! TIMES           [ reduce using rule 37 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 37 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! MOD             [ reduce using rule 37 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! PLUS            [ shift and go to state 111 ]
  ! MINUS           [ shift and go to state 112 ]
  ! LESSTHAN        [ shift and go to state 113 ]
  ! LESSTHANEQ      [ shift and go to state 114 ]
  ! GREATERTHANEQ   [ shift and go to state 115 ]
  ! GREATERTHAN     [ shift and go to state 116 ]
  ! EQ              [ shift and go to state 117 ]
  ! NOTEQ           [ shift and go to state 118 ]
  ! AND             [ shift and go to state 119 ]
  ! OR              [ shift and go to state 120 ]


state 162

    (38) binary_expression -> binary_expression MINUS binary_expression .
    (34) binary_expression -> binary_expression . TIMES binary_expression
    (35) binary_expression -> binary_expression . DIVIDE binary_expression
    (36) binary_expression -> binary_expression . MOD binary_expression
    (37) binary_expression -> binary_expression . PLUS binary_expression
    (38) binary_expression -> binary_expression . MINUS binary_expression
    (39) binary_expression -> binary_expression . LESSTHAN binary_expression
    (40) binary_expression -> binary_expression . LESSTHANEQ binary_expression
    (41) binary_expression -> binary_expression . GREATERTHANEQ binary_expression
    (42) binary_expression -> binary_expression . GREATERTHAN binary_expression
    (43) binary_expression -> binary_expression . EQ binary_expression
    (44) binary_expression -> binary_expression . NOTEQ binary_expression
    (45) binary_expression -> binary_expression . AND binary_expression
    (46) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 38 (binary_expression -> binary_expression MINUS binary_expression .)
    MINUS           reduce using rule 38 (binary_expression -> binary_expression MINUS binary_expression .)
    LESSTHAN        reduce using rule 38 (binary_expression -> binary_expression MINUS binary_expression .)
    LESSTHANEQ      reduce using rule 38 (binary_expression -> binary_expression MINUS binary_expression .)
    GREATERTHANEQ   reduce using rule 38 (binary_expression -> binary_expression MINUS binary_expression .)
    GREATERTHAN     reduce using rule 38 (binary_expression -> binary_expression MINUS binary_expression .)
    EQ              reduce using rule 38 (binary_expression -> binary_expression MINUS binary_expression .)
    NOTEQ           reduce using rule 38 (binary_expression -> binary_expression MINUS binary_expression .)
    AND             reduce using rule 38 (binary_expression -> binary_expression MINUS binary_expression .)
    OR              reduce using rule 38 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACKET        reduce using rule 38 (binary_expression -> binary_expression MINUS binary_expression .)
    COMMA           reduce using rule 38 (binary_expression -> binary_expression MINUS binary_expression .)
    SEMI            reduce using rule 38 (binary_expression -> binary_expression MINUS binary_expression .)
    RPAREN          reduce using rule 38 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACE          reduce using rule 38 (binary_expression -> binary_expression MINUS binary_expression .)
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110

  ! TIMES           [ reduce using rule 38 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 38 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! MOD             [ reduce using rule 38 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! PLUS            [ shift and go to state 111 ]
  ! MINUS           [ shift and go to state 112 ]
  ! LESSTHAN        [ shift and go to state 113 ]
  ! LESSTHANEQ      [ shift and go to state 114 ]
  ! GREATERTHANEQ   [ shift and go to state 115 ]
  ! GREATERTHAN     [ shift and go to state 116 ]
  ! EQ              [ shift and go to state 117 ]
  ! NOTEQ           [ shift and go to state 118 ]
  ! AND             [ shift and go to state 119 ]
  ! OR              [ shift and go to state 120 ]


state 163

    (39) binary_expression -> binary_expression LESSTHAN binary_expression .
    (34) binary_expression -> binary_expression . TIMES binary_expression
    (35) binary_expression -> binary_expression . DIVIDE binary_expression
    (36) binary_expression -> binary_expression . MOD binary_expression
    (37) binary_expression -> binary_expression . PLUS binary_expression
    (38) binary_expression -> binary_expression . MINUS binary_expression
    (39) binary_expression -> binary_expression . LESSTHAN binary_expression
    (40) binary_expression -> binary_expression . LESSTHANEQ binary_expression
    (41) binary_expression -> binary_expression . GREATERTHANEQ binary_expression
    (42) binary_expression -> binary_expression . GREATERTHAN binary_expression
    (43) binary_expression -> binary_expression . EQ binary_expression
    (44) binary_expression -> binary_expression . NOTEQ binary_expression
    (45) binary_expression -> binary_expression . AND binary_expression
    (46) binary_expression -> binary_expression . OR binary_expression

    LESSTHAN        reduce using rule 39 (binary_expression -> binary_expression LESSTHAN binary_expression .)
    LESSTHANEQ      reduce using rule 39 (binary_expression -> binary_expression LESSTHAN binary_expression .)
    GREATERTHANEQ   reduce using rule 39 (binary_expression -> binary_expression LESSTHAN binary_expression .)
    GREATERTHAN     reduce using rule 39 (binary_expression -> binary_expression LESSTHAN binary_expression .)
    EQ              reduce using rule 39 (binary_expression -> binary_expression LESSTHAN binary_expression .)
    NOTEQ           reduce using rule 39 (binary_expression -> binary_expression LESSTHAN binary_expression .)
    AND             reduce using rule 39 (binary_expression -> binary_expression LESSTHAN binary_expression .)
    OR              reduce using rule 39 (binary_expression -> binary_expression LESSTHAN binary_expression .)
    RBRACKET        reduce using rule 39 (binary_expression -> binary_expression LESSTHAN binary_expression .)
    COMMA           reduce using rule 39 (binary_expression -> binary_expression LESSTHAN binary_expression .)
    SEMI            reduce using rule 39 (binary_expression -> binary_expression LESSTHAN binary_expression .)
    RPAREN          reduce using rule 39 (binary_expression -> binary_expression LESSTHAN binary_expression .)
    RBRACE          reduce using rule 39 (binary_expression -> binary_expression LESSTHAN binary_expression .)
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112

  ! TIMES           [ reduce using rule 39 (binary_expression -> binary_expression LESSTHAN binary_expression .) ]
  ! DIVIDE          [ reduce using rule 39 (binary_expression -> binary_expression LESSTHAN binary_expression .) ]
  ! MOD             [ reduce using rule 39 (binary_expression -> binary_expression LESSTHAN binary_expression .) ]
  ! PLUS            [ reduce using rule 39 (binary_expression -> binary_expression LESSTHAN binary_expression .) ]
  ! MINUS           [ reduce using rule 39 (binary_expression -> binary_expression LESSTHAN binary_expression .) ]
  ! LESSTHAN        [ shift and go to state 113 ]
  ! LESSTHANEQ      [ shift and go to state 114 ]
  ! GREATERTHANEQ   [ shift and go to state 115 ]
  ! GREATERTHAN     [ shift and go to state 116 ]
  ! EQ              [ shift and go to state 117 ]
  ! NOTEQ           [ shift and go to state 118 ]
  ! AND             [ shift and go to state 119 ]
  ! OR              [ shift and go to state 120 ]


state 164

    (40) binary_expression -> binary_expression LESSTHANEQ binary_expression .
    (34) binary_expression -> binary_expression . TIMES binary_expression
    (35) binary_expression -> binary_expression . DIVIDE binary_expression
    (36) binary_expression -> binary_expression . MOD binary_expression
    (37) binary_expression -> binary_expression . PLUS binary_expression
    (38) binary_expression -> binary_expression . MINUS binary_expression
    (39) binary_expression -> binary_expression . LESSTHAN binary_expression
    (40) binary_expression -> binary_expression . LESSTHANEQ binary_expression
    (41) binary_expression -> binary_expression . GREATERTHANEQ binary_expression
    (42) binary_expression -> binary_expression . GREATERTHAN binary_expression
    (43) binary_expression -> binary_expression . EQ binary_expression
    (44) binary_expression -> binary_expression . NOTEQ binary_expression
    (45) binary_expression -> binary_expression . AND binary_expression
    (46) binary_expression -> binary_expression . OR binary_expression

    LESSTHAN        reduce using rule 40 (binary_expression -> binary_expression LESSTHANEQ binary_expression .)
    LESSTHANEQ      reduce using rule 40 (binary_expression -> binary_expression LESSTHANEQ binary_expression .)
    GREATERTHANEQ   reduce using rule 40 (binary_expression -> binary_expression LESSTHANEQ binary_expression .)
    GREATERTHAN     reduce using rule 40 (binary_expression -> binary_expression LESSTHANEQ binary_expression .)
    EQ              reduce using rule 40 (binary_expression -> binary_expression LESSTHANEQ binary_expression .)
    NOTEQ           reduce using rule 40 (binary_expression -> binary_expression LESSTHANEQ binary_expression .)
    AND             reduce using rule 40 (binary_expression -> binary_expression LESSTHANEQ binary_expression .)
    OR              reduce using rule 40 (binary_expression -> binary_expression LESSTHANEQ binary_expression .)
    RBRACKET        reduce using rule 40 (binary_expression -> binary_expression LESSTHANEQ binary_expression .)
    COMMA           reduce using rule 40 (binary_expression -> binary_expression LESSTHANEQ binary_expression .)
    SEMI            reduce using rule 40 (binary_expression -> binary_expression LESSTHANEQ binary_expression .)
    RPAREN          reduce using rule 40 (binary_expression -> binary_expression LESSTHANEQ binary_expression .)
    RBRACE          reduce using rule 40 (binary_expression -> binary_expression LESSTHANEQ binary_expression .)
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112

  ! TIMES           [ reduce using rule 40 (binary_expression -> binary_expression LESSTHANEQ binary_expression .) ]
  ! DIVIDE          [ reduce using rule 40 (binary_expression -> binary_expression LESSTHANEQ binary_expression .) ]
  ! MOD             [ reduce using rule 40 (binary_expression -> binary_expression LESSTHANEQ binary_expression .) ]
  ! PLUS            [ reduce using rule 40 (binary_expression -> binary_expression LESSTHANEQ binary_expression .) ]
  ! MINUS           [ reduce using rule 40 (binary_expression -> binary_expression LESSTHANEQ binary_expression .) ]
  ! LESSTHAN        [ shift and go to state 113 ]
  ! LESSTHANEQ      [ shift and go to state 114 ]
  ! GREATERTHANEQ   [ shift and go to state 115 ]
  ! GREATERTHAN     [ shift and go to state 116 ]
  ! EQ              [ shift and go to state 117 ]
  ! NOTEQ           [ shift and go to state 118 ]
  ! AND             [ shift and go to state 119 ]
  ! OR              [ shift and go to state 120 ]


state 165

    (41) binary_expression -> binary_expression GREATERTHANEQ binary_expression .
    (34) binary_expression -> binary_expression . TIMES binary_expression
    (35) binary_expression -> binary_expression . DIVIDE binary_expression
    (36) binary_expression -> binary_expression . MOD binary_expression
    (37) binary_expression -> binary_expression . PLUS binary_expression
    (38) binary_expression -> binary_expression . MINUS binary_expression
    (39) binary_expression -> binary_expression . LESSTHAN binary_expression
    (40) binary_expression -> binary_expression . LESSTHANEQ binary_expression
    (41) binary_expression -> binary_expression . GREATERTHANEQ binary_expression
    (42) binary_expression -> binary_expression . GREATERTHAN binary_expression
    (43) binary_expression -> binary_expression . EQ binary_expression
    (44) binary_expression -> binary_expression . NOTEQ binary_expression
    (45) binary_expression -> binary_expression . AND binary_expression
    (46) binary_expression -> binary_expression . OR binary_expression

    LESSTHAN        reduce using rule 41 (binary_expression -> binary_expression GREATERTHANEQ binary_expression .)
    LESSTHANEQ      reduce using rule 41 (binary_expression -> binary_expression GREATERTHANEQ binary_expression .)
    GREATERTHANEQ   reduce using rule 41 (binary_expression -> binary_expression GREATERTHANEQ binary_expression .)
    GREATERTHAN     reduce using rule 41 (binary_expression -> binary_expression GREATERTHANEQ binary_expression .)
    EQ              reduce using rule 41 (binary_expression -> binary_expression GREATERTHANEQ binary_expression .)
    NOTEQ           reduce using rule 41 (binary_expression -> binary_expression GREATERTHANEQ binary_expression .)
    AND             reduce using rule 41 (binary_expression -> binary_expression GREATERTHANEQ binary_expression .)
    OR              reduce using rule 41 (binary_expression -> binary_expression GREATERTHANEQ binary_expression .)
    RBRACKET        reduce using rule 41 (binary_expression -> binary_expression GREATERTHANEQ binary_expression .)
    COMMA           reduce using rule 41 (binary_expression -> binary_expression GREATERTHANEQ binary_expression .)
    SEMI            reduce using rule 41 (binary_expression -> binary_expression GREATERTHANEQ binary_expression .)
    RPAREN          reduce using rule 41 (binary_expression -> binary_expression GREATERTHANEQ binary_expression .)
    RBRACE          reduce using rule 41 (binary_expression -> binary_expression GREATERTHANEQ binary_expression .)
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112

  ! TIMES           [ reduce using rule 41 (binary_expression -> binary_expression GREATERTHANEQ binary_expression .) ]
  ! DIVIDE          [ reduce using rule 41 (binary_expression -> binary_expression GREATERTHANEQ binary_expression .) ]
  ! MOD             [ reduce using rule 41 (binary_expression -> binary_expression GREATERTHANEQ binary_expression .) ]
  ! PLUS            [ reduce using rule 41 (binary_expression -> binary_expression GREATERTHANEQ binary_expression .) ]
  ! MINUS           [ reduce using rule 41 (binary_expression -> binary_expression GREATERTHANEQ binary_expression .) ]
  ! LESSTHAN        [ shift and go to state 113 ]
  ! LESSTHANEQ      [ shift and go to state 114 ]
  ! GREATERTHANEQ   [ shift and go to state 115 ]
  ! GREATERTHAN     [ shift and go to state 116 ]
  ! EQ              [ shift and go to state 117 ]
  ! NOTEQ           [ shift and go to state 118 ]
  ! AND             [ shift and go to state 119 ]
  ! OR              [ shift and go to state 120 ]


state 166

    (42) binary_expression -> binary_expression GREATERTHAN binary_expression .
    (34) binary_expression -> binary_expression . TIMES binary_expression
    (35) binary_expression -> binary_expression . DIVIDE binary_expression
    (36) binary_expression -> binary_expression . MOD binary_expression
    (37) binary_expression -> binary_expression . PLUS binary_expression
    (38) binary_expression -> binary_expression . MINUS binary_expression
    (39) binary_expression -> binary_expression . LESSTHAN binary_expression
    (40) binary_expression -> binary_expression . LESSTHANEQ binary_expression
    (41) binary_expression -> binary_expression . GREATERTHANEQ binary_expression
    (42) binary_expression -> binary_expression . GREATERTHAN binary_expression
    (43) binary_expression -> binary_expression . EQ binary_expression
    (44) binary_expression -> binary_expression . NOTEQ binary_expression
    (45) binary_expression -> binary_expression . AND binary_expression
    (46) binary_expression -> binary_expression . OR binary_expression

    LESSTHAN        reduce using rule 42 (binary_expression -> binary_expression GREATERTHAN binary_expression .)
    LESSTHANEQ      reduce using rule 42 (binary_expression -> binary_expression GREATERTHAN binary_expression .)
    GREATERTHANEQ   reduce using rule 42 (binary_expression -> binary_expression GREATERTHAN binary_expression .)
    GREATERTHAN     reduce using rule 42 (binary_expression -> binary_expression GREATERTHAN binary_expression .)
    EQ              reduce using rule 42 (binary_expression -> binary_expression GREATERTHAN binary_expression .)
    NOTEQ           reduce using rule 42 (binary_expression -> binary_expression GREATERTHAN binary_expression .)
    AND             reduce using rule 42 (binary_expression -> binary_expression GREATERTHAN binary_expression .)
    OR              reduce using rule 42 (binary_expression -> binary_expression GREATERTHAN binary_expression .)
    RBRACKET        reduce using rule 42 (binary_expression -> binary_expression GREATERTHAN binary_expression .)
    COMMA           reduce using rule 42 (binary_expression -> binary_expression GREATERTHAN binary_expression .)
    SEMI            reduce using rule 42 (binary_expression -> binary_expression GREATERTHAN binary_expression .)
    RPAREN          reduce using rule 42 (binary_expression -> binary_expression GREATERTHAN binary_expression .)
    RBRACE          reduce using rule 42 (binary_expression -> binary_expression GREATERTHAN binary_expression .)
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112

  ! TIMES           [ reduce using rule 42 (binary_expression -> binary_expression GREATERTHAN binary_expression .) ]
  ! DIVIDE          [ reduce using rule 42 (binary_expression -> binary_expression GREATERTHAN binary_expression .) ]
  ! MOD             [ reduce using rule 42 (binary_expression -> binary_expression GREATERTHAN binary_expression .) ]
  ! PLUS            [ reduce using rule 42 (binary_expression -> binary_expression GREATERTHAN binary_expression .) ]
  ! MINUS           [ reduce using rule 42 (binary_expression -> binary_expression GREATERTHAN binary_expression .) ]
  ! LESSTHAN        [ shift and go to state 113 ]
  ! LESSTHANEQ      [ shift and go to state 114 ]
  ! GREATERTHANEQ   [ shift and go to state 115 ]
  ! GREATERTHAN     [ shift and go to state 116 ]
  ! EQ              [ shift and go to state 117 ]
  ! NOTEQ           [ shift and go to state 118 ]
  ! AND             [ shift and go to state 119 ]
  ! OR              [ shift and go to state 120 ]


state 167

    (43) binary_expression -> binary_expression EQ binary_expression .
    (34) binary_expression -> binary_expression . TIMES binary_expression
    (35) binary_expression -> binary_expression . DIVIDE binary_expression
    (36) binary_expression -> binary_expression . MOD binary_expression
    (37) binary_expression -> binary_expression . PLUS binary_expression
    (38) binary_expression -> binary_expression . MINUS binary_expression
    (39) binary_expression -> binary_expression . LESSTHAN binary_expression
    (40) binary_expression -> binary_expression . LESSTHANEQ binary_expression
    (41) binary_expression -> binary_expression . GREATERTHANEQ binary_expression
    (42) binary_expression -> binary_expression . GREATERTHAN binary_expression
    (43) binary_expression -> binary_expression . EQ binary_expression
    (44) binary_expression -> binary_expression . NOTEQ binary_expression
    (45) binary_expression -> binary_expression . AND binary_expression
    (46) binary_expression -> binary_expression . OR binary_expression

    EQ              reduce using rule 43 (binary_expression -> binary_expression EQ binary_expression .)
    NOTEQ           reduce using rule 43 (binary_expression -> binary_expression EQ binary_expression .)
    AND             reduce using rule 43 (binary_expression -> binary_expression EQ binary_expression .)
    OR              reduce using rule 43 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACKET        reduce using rule 43 (binary_expression -> binary_expression EQ binary_expression .)
    COMMA           reduce using rule 43 (binary_expression -> binary_expression EQ binary_expression .)
    SEMI            reduce using rule 43 (binary_expression -> binary_expression EQ binary_expression .)
    RPAREN          reduce using rule 43 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACE          reduce using rule 43 (binary_expression -> binary_expression EQ binary_expression .)
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    LESSTHAN        shift and go to state 113
    LESSTHANEQ      shift and go to state 114
    GREATERTHANEQ   shift and go to state 115
    GREATERTHAN     shift and go to state 116

  ! TIMES           [ reduce using rule 43 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! DIVIDE          [ reduce using rule 43 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MOD             [ reduce using rule 43 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! PLUS            [ reduce using rule 43 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MINUS           [ reduce using rule 43 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LESSTHAN        [ reduce using rule 43 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LESSTHANEQ      [ reduce using rule 43 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! GREATERTHANEQ   [ reduce using rule 43 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! GREATERTHAN     [ reduce using rule 43 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! EQ              [ shift and go to state 117 ]
  ! NOTEQ           [ shift and go to state 118 ]
  ! AND             [ shift and go to state 119 ]
  ! OR              [ shift and go to state 120 ]


state 168

    (44) binary_expression -> binary_expression NOTEQ binary_expression .
    (34) binary_expression -> binary_expression . TIMES binary_expression
    (35) binary_expression -> binary_expression . DIVIDE binary_expression
    (36) binary_expression -> binary_expression . MOD binary_expression
    (37) binary_expression -> binary_expression . PLUS binary_expression
    (38) binary_expression -> binary_expression . MINUS binary_expression
    (39) binary_expression -> binary_expression . LESSTHAN binary_expression
    (40) binary_expression -> binary_expression . LESSTHANEQ binary_expression
    (41) binary_expression -> binary_expression . GREATERTHANEQ binary_expression
    (42) binary_expression -> binary_expression . GREATERTHAN binary_expression
    (43) binary_expression -> binary_expression . EQ binary_expression
    (44) binary_expression -> binary_expression . NOTEQ binary_expression
    (45) binary_expression -> binary_expression . AND binary_expression
    (46) binary_expression -> binary_expression . OR binary_expression

    EQ              reduce using rule 44 (binary_expression -> binary_expression NOTEQ binary_expression .)
    NOTEQ           reduce using rule 44 (binary_expression -> binary_expression NOTEQ binary_expression .)
    AND             reduce using rule 44 (binary_expression -> binary_expression NOTEQ binary_expression .)
    OR              reduce using rule 44 (binary_expression -> binary_expression NOTEQ binary_expression .)
    RBRACKET        reduce using rule 44 (binary_expression -> binary_expression NOTEQ binary_expression .)
    COMMA           reduce using rule 44 (binary_expression -> binary_expression NOTEQ binary_expression .)
    SEMI            reduce using rule 44 (binary_expression -> binary_expression NOTEQ binary_expression .)
    RPAREN          reduce using rule 44 (binary_expression -> binary_expression NOTEQ binary_expression .)
    RBRACE          reduce using rule 44 (binary_expression -> binary_expression NOTEQ binary_expression .)
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    LESSTHAN        shift and go to state 113
    LESSTHANEQ      shift and go to state 114
    GREATERTHANEQ   shift and go to state 115
    GREATERTHAN     shift and go to state 116

  ! TIMES           [ reduce using rule 44 (binary_expression -> binary_expression NOTEQ binary_expression .) ]
  ! DIVIDE          [ reduce using rule 44 (binary_expression -> binary_expression NOTEQ binary_expression .) ]
  ! MOD             [ reduce using rule 44 (binary_expression -> binary_expression NOTEQ binary_expression .) ]
  ! PLUS            [ reduce using rule 44 (binary_expression -> binary_expression NOTEQ binary_expression .) ]
  ! MINUS           [ reduce using rule 44 (binary_expression -> binary_expression NOTEQ binary_expression .) ]
  ! LESSTHAN        [ reduce using rule 44 (binary_expression -> binary_expression NOTEQ binary_expression .) ]
  ! LESSTHANEQ      [ reduce using rule 44 (binary_expression -> binary_expression NOTEQ binary_expression .) ]
  ! GREATERTHANEQ   [ reduce using rule 44 (binary_expression -> binary_expression NOTEQ binary_expression .) ]
  ! GREATERTHAN     [ reduce using rule 44 (binary_expression -> binary_expression NOTEQ binary_expression .) ]
  ! EQ              [ shift and go to state 117 ]
  ! NOTEQ           [ shift and go to state 118 ]
  ! AND             [ shift and go to state 119 ]
  ! OR              [ shift and go to state 120 ]


state 169

    (45) binary_expression -> binary_expression AND binary_expression .
    (34) binary_expression -> binary_expression . TIMES binary_expression
    (35) binary_expression -> binary_expression . DIVIDE binary_expression
    (36) binary_expression -> binary_expression . MOD binary_expression
    (37) binary_expression -> binary_expression . PLUS binary_expression
    (38) binary_expression -> binary_expression . MINUS binary_expression
    (39) binary_expression -> binary_expression . LESSTHAN binary_expression
    (40) binary_expression -> binary_expression . LESSTHANEQ binary_expression
    (41) binary_expression -> binary_expression . GREATERTHANEQ binary_expression
    (42) binary_expression -> binary_expression . GREATERTHAN binary_expression
    (43) binary_expression -> binary_expression . EQ binary_expression
    (44) binary_expression -> binary_expression . NOTEQ binary_expression
    (45) binary_expression -> binary_expression . AND binary_expression
    (46) binary_expression -> binary_expression . OR binary_expression

    AND             reduce using rule 45 (binary_expression -> binary_expression AND binary_expression .)
    OR              reduce using rule 45 (binary_expression -> binary_expression AND binary_expression .)
    RBRACKET        reduce using rule 45 (binary_expression -> binary_expression AND binary_expression .)
    COMMA           reduce using rule 45 (binary_expression -> binary_expression AND binary_expression .)
    SEMI            reduce using rule 45 (binary_expression -> binary_expression AND binary_expression .)
    RPAREN          reduce using rule 45 (binary_expression -> binary_expression AND binary_expression .)
    RBRACE          reduce using rule 45 (binary_expression -> binary_expression AND binary_expression .)
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    LESSTHAN        shift and go to state 113
    LESSTHANEQ      shift and go to state 114
    GREATERTHANEQ   shift and go to state 115
    GREATERTHAN     shift and go to state 116
    EQ              shift and go to state 117
    NOTEQ           shift and go to state 118

  ! TIMES           [ reduce using rule 45 (binary_expression -> binary_expression AND binary_expression .) ]
  ! DIVIDE          [ reduce using rule 45 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MOD             [ reduce using rule 45 (binary_expression -> binary_expression AND binary_expression .) ]
  ! PLUS            [ reduce using rule 45 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MINUS           [ reduce using rule 45 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LESSTHAN        [ reduce using rule 45 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LESSTHANEQ      [ reduce using rule 45 (binary_expression -> binary_expression AND binary_expression .) ]
  ! GREATERTHANEQ   [ reduce using rule 45 (binary_expression -> binary_expression AND binary_expression .) ]
  ! GREATERTHAN     [ reduce using rule 45 (binary_expression -> binary_expression AND binary_expression .) ]
  ! EQ              [ reduce using rule 45 (binary_expression -> binary_expression AND binary_expression .) ]
  ! NOTEQ           [ reduce using rule 45 (binary_expression -> binary_expression AND binary_expression .) ]
  ! AND             [ shift and go to state 119 ]
  ! OR              [ shift and go to state 120 ]


state 170

    (46) binary_expression -> binary_expression OR binary_expression .
    (34) binary_expression -> binary_expression . TIMES binary_expression
    (35) binary_expression -> binary_expression . DIVIDE binary_expression
    (36) binary_expression -> binary_expression . MOD binary_expression
    (37) binary_expression -> binary_expression . PLUS binary_expression
    (38) binary_expression -> binary_expression . MINUS binary_expression
    (39) binary_expression -> binary_expression . LESSTHAN binary_expression
    (40) binary_expression -> binary_expression . LESSTHANEQ binary_expression
    (41) binary_expression -> binary_expression . GREATERTHANEQ binary_expression
    (42) binary_expression -> binary_expression . GREATERTHAN binary_expression
    (43) binary_expression -> binary_expression . EQ binary_expression
    (44) binary_expression -> binary_expression . NOTEQ binary_expression
    (45) binary_expression -> binary_expression . AND binary_expression
    (46) binary_expression -> binary_expression . OR binary_expression

    OR              reduce using rule 46 (binary_expression -> binary_expression OR binary_expression .)
    RBRACKET        reduce using rule 46 (binary_expression -> binary_expression OR binary_expression .)
    COMMA           reduce using rule 46 (binary_expression -> binary_expression OR binary_expression .)
    SEMI            reduce using rule 46 (binary_expression -> binary_expression OR binary_expression .)
    RPAREN          reduce using rule 46 (binary_expression -> binary_expression OR binary_expression .)
    RBRACE          reduce using rule 46 (binary_expression -> binary_expression OR binary_expression .)
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 109
    MOD             shift and go to state 110
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    LESSTHAN        shift and go to state 113
    LESSTHANEQ      shift and go to state 114
    GREATERTHANEQ   shift and go to state 115
    GREATERTHAN     shift and go to state 116
    EQ              shift and go to state 117
    NOTEQ           shift and go to state 118
    AND             shift and go to state 119

  ! TIMES           [ reduce using rule 46 (binary_expression -> binary_expression OR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 46 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MOD             [ reduce using rule 46 (binary_expression -> binary_expression OR binary_expression .) ]
  ! PLUS            [ reduce using rule 46 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MINUS           [ reduce using rule 46 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LESSTHAN        [ reduce using rule 46 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LESSTHANEQ      [ reduce using rule 46 (binary_expression -> binary_expression OR binary_expression .) ]
  ! GREATERTHANEQ   [ reduce using rule 46 (binary_expression -> binary_expression OR binary_expression .) ]
  ! GREATERTHAN     [ reduce using rule 46 (binary_expression -> binary_expression OR binary_expression .) ]
  ! EQ              [ reduce using rule 46 (binary_expression -> binary_expression OR binary_expression .) ]
  ! NOTEQ           [ reduce using rule 46 (binary_expression -> binary_expression OR binary_expression .) ]
  ! AND             [ reduce using rule 46 (binary_expression -> binary_expression OR binary_expression .) ]
  ! OR              [ shift and go to state 120 ]


state 171

    (48) cast_expression -> LPAREN type_specifier RPAREN . cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    LPAREN          shift and go to state 53
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    cast_expression                shift and go to state 191
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 172

    (61) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 61 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 61 (primary_expression -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 61 (primary_expression -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 61 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 61 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 61 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 61 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 61 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 61 (primary_expression -> LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 61 (primary_expression -> LPAREN expression RPAREN .)
    LESSTHANEQ      reduce using rule 61 (primary_expression -> LPAREN expression RPAREN .)
    GREATERTHANEQ   reduce using rule 61 (primary_expression -> LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 61 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 61 (primary_expression -> LPAREN expression RPAREN .)
    NOTEQ           reduce using rule 61 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 61 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 61 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 61 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 61 (primary_expression -> LPAREN expression RPAREN .)
    TIMESEQ         reduce using rule 61 (primary_expression -> LPAREN expression RPAREN .)
    DIVEQ           reduce using rule 61 (primary_expression -> LPAREN expression RPAREN .)
    MODEQ           reduce using rule 61 (primary_expression -> LPAREN expression RPAREN .)
    PLUSEQ          reduce using rule 61 (primary_expression -> LPAREN expression RPAREN .)
    MINUSEQ         reduce using rule 61 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 61 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 61 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 61 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 61 (primary_expression -> LPAREN expression RPAREN .)


state 173

    (54) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (67) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 192
    COMMA           shift and go to state 150


state 174

    (55) postfix_expression -> postfix_expression LPAREN RPAREN .

    LBRACKET        reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSPLUS        reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSMINUS      reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES           reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDE          reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD             reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LESSTHAN        reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LESSTHANEQ      reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GREATERTHANEQ   reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GREATERTHAN     reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ              reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NOTEQ           reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND             reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR              reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUALS          reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMESEQ         reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVEQ           reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODEQ           reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSEQ          reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSEQ         reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMI            reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 55 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 175

    (56) postfix_expression -> postfix_expression LPAREN argument_expression . RPAREN
    (69) argument_expression -> argument_expression . COMMA assignment_expression

    RPAREN          shift and go to state 193
    COMMA           shift and go to state 194


state 176

    (68) argument_expression -> assignment_expression .

    RPAREN          reduce using rule 68 (argument_expression -> assignment_expression .)
    COMMA           reduce using rule 68 (argument_expression -> assignment_expression .)


state 177

    (85) parameter_list -> parameter_list COMMA parameter_declaration .

    RPAREN          reduce using rule 85 (parameter_list -> parameter_list COMMA parameter_declaration .)
    COMMA           reduce using rule 85 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 178

    (29) identifier_list -> identifier_list COMMA identifier .

    COMMA           reduce using rule 29 (identifier_list -> identifier_list COMMA identifier .)
    RPAREN          reduce using rule 29 (identifier_list -> identifier_list COMMA identifier .)


state 179

    (96) initializer -> LBRACE initializer_list RBRACE .

    COMMA           reduce using rule 96 (initializer -> LBRACE initializer_list RBRACE .)
    SEMI            reduce using rule 96 (initializer -> LBRACE initializer_list RBRACE .)
    RBRACE          reduce using rule 96 (initializer -> LBRACE initializer_list RBRACE .)


state 180

    (97) initializer -> LBRACE initializer_list COMMA . RBRACE
    (99) initializer_list -> initializer_list COMMA . initializer
    (95) initializer -> . assignment_expression
    (96) initializer -> . LBRACE initializer_list RBRACE
    (97) initializer -> . LBRACE initializer_list COMMA RBRACE
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    RBRACE          shift and go to state 195
    LBRACE          shift and go to state 78
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    initializer                    shift and go to state 196
    assignment_expression          shift and go to state 77
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 181

    (71) assignment_expression -> unary_expression assignment_operator assignment_expression .

    COMMA           reduce using rule 71 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMI            reduce using rule 71 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 71 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 71 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 71 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 182

    (118) selection_statement -> IF LPAREN expression . RPAREN statement
    (119) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (67) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 197
    COMMA           shift and go to state 150


state 183

    (67) expression -> expression COMMA assignment_expression .

    COMMA           reduce using rule 67 (expression -> expression COMMA assignment_expression .)
    SEMI            reduce using rule 67 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 67 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 67 (expression -> expression COMMA assignment_expression .)


state 184

    (120) interation_statement -> WHILE LPAREN expression . RPAREN statement
    (67) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 198
    COMMA           shift and go to state 150


state 185

    (121) interation_statement -> FOR LPAREN expression_opt . SEMI expression_opt SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 199


state 186

    (122) interation_statement -> FOR LPAREN declaration . expression_opt SEMI expression_opt RPAREN statement
    (116) expression_opt -> . expression
    (117) expression_opt -> . empty
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (128) empty -> .
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    SEMI            reduce using rule 128 (empty -> .)
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    expression_opt                 shift and go to state 200
    expression                     shift and go to state 98
    empty                          shift and go to state 147
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 187

    (124) jump_statement -> RETURN expression_opt SEMI .

    LBRACE          reduce using rule 124 (jump_statement -> RETURN expression_opt SEMI .)
    IF              reduce using rule 124 (jump_statement -> RETURN expression_opt SEMI .)
    WHILE           reduce using rule 124 (jump_statement -> RETURN expression_opt SEMI .)
    FOR             reduce using rule 124 (jump_statement -> RETURN expression_opt SEMI .)
    BREAK           reduce using rule 124 (jump_statement -> RETURN expression_opt SEMI .)
    RETURN          reduce using rule 124 (jump_statement -> RETURN expression_opt SEMI .)
    ASSERT          reduce using rule 124 (jump_statement -> RETURN expression_opt SEMI .)
    PRINT           reduce using rule 124 (jump_statement -> RETURN expression_opt SEMI .)
    READ            reduce using rule 124 (jump_statement -> RETURN expression_opt SEMI .)
    VOID            reduce using rule 124 (jump_statement -> RETURN expression_opt SEMI .)
    CHAR            reduce using rule 124 (jump_statement -> RETURN expression_opt SEMI .)
    INT             reduce using rule 124 (jump_statement -> RETURN expression_opt SEMI .)
    FLOAT           reduce using rule 124 (jump_statement -> RETURN expression_opt SEMI .)
    PLUSPLUS        reduce using rule 124 (jump_statement -> RETURN expression_opt SEMI .)
    MINUSMINUS      reduce using rule 124 (jump_statement -> RETURN expression_opt SEMI .)
    LPAREN          reduce using rule 124 (jump_statement -> RETURN expression_opt SEMI .)
    AND             reduce using rule 124 (jump_statement -> RETURN expression_opt SEMI .)
    TIMES           reduce using rule 124 (jump_statement -> RETURN expression_opt SEMI .)
    PLUS            reduce using rule 124 (jump_statement -> RETURN expression_opt SEMI .)
    MINUS           reduce using rule 124 (jump_statement -> RETURN expression_opt SEMI .)
    NOT             reduce using rule 124 (jump_statement -> RETURN expression_opt SEMI .)
    ADDRESS         reduce using rule 124 (jump_statement -> RETURN expression_opt SEMI .)
    ID              reduce using rule 124 (jump_statement -> RETURN expression_opt SEMI .)
    INT_CONST       reduce using rule 124 (jump_statement -> RETURN expression_opt SEMI .)
    CHAR_CONST      reduce using rule 124 (jump_statement -> RETURN expression_opt SEMI .)
    FLOAT_CONST     reduce using rule 124 (jump_statement -> RETURN expression_opt SEMI .)
    STRING          reduce using rule 124 (jump_statement -> RETURN expression_opt SEMI .)
    SEMI            reduce using rule 124 (jump_statement -> RETURN expression_opt SEMI .)
    RBRACE          reduce using rule 124 (jump_statement -> RETURN expression_opt SEMI .)
    ELSE            reduce using rule 124 (jump_statement -> RETURN expression_opt SEMI .)


state 188

    (125) assert_statement -> ASSERT expression SEMI .

    LBRACE          reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    IF              reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    WHILE           reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    FOR             reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    BREAK           reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    RETURN          reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    ASSERT          reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    PRINT           reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    READ            reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    VOID            reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    CHAR            reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    INT             reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    FLOAT           reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    PLUSPLUS        reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    MINUSMINUS      reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    LPAREN          reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    AND             reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    TIMES           reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    PLUS            reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    MINUS           reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    NOT             reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    ADDRESS         reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    ID              reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    INT_CONST       reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    CHAR_CONST      reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    FLOAT_CONST     reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    STRING          reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    SEMI            reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    RBRACE          reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    ELSE            reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)


state 189

    (126) print_statement -> PRINT LPAREN expression_opt . RPAREN SEMI

    RPAREN          shift and go to state 201


state 190

    (127) read_statement -> READ LPAREN argument_expression . RPAREN SEMI
    (69) argument_expression -> argument_expression . COMMA assignment_expression

    RPAREN          shift and go to state 202
    COMMA           shift and go to state 194


state 191

    (48) cast_expression -> LPAREN type_specifier RPAREN cast_expression .

    TIMES           reduce using rule 48 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIVIDE          reduce using rule 48 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MOD             reduce using rule 48 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PLUS            reduce using rule 48 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MINUS           reduce using rule 48 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LESSTHAN        reduce using rule 48 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LESSTHANEQ      reduce using rule 48 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    GREATERTHANEQ   reduce using rule 48 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    GREATERTHAN     reduce using rule 48 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQ              reduce using rule 48 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    NOTEQ           reduce using rule 48 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    AND             reduce using rule 48 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    OR              reduce using rule 48 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RBRACKET        reduce using rule 48 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    COMMA           reduce using rule 48 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    SEMI            reduce using rule 48 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RPAREN          reduce using rule 48 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQUALS          reduce using rule 48 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    TIMESEQ         reduce using rule 48 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIVEQ           reduce using rule 48 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MODEQ           reduce using rule 48 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PLUSEQ          reduce using rule 48 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MINUSEQ         reduce using rule 48 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RBRACE          reduce using rule 48 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)


state 192

    (54) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 54 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 54 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 54 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 54 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 54 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 54 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 54 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 54 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 54 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LESSTHAN        reduce using rule 54 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LESSTHANEQ      reduce using rule 54 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GREATERTHANEQ   reduce using rule 54 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GREATERTHAN     reduce using rule 54 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 54 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NOTEQ           reduce using rule 54 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 54 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 54 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 54 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 54 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMESEQ         reduce using rule 54 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVEQ           reduce using rule 54 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MODEQ           reduce using rule 54 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSEQ          reduce using rule 54 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSEQ         reduce using rule 54 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 54 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 54 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 54 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 54 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 193

    (56) postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .

    LBRACKET        reduce using rule 56 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LPAREN          reduce using rule 56 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    PLUSPLUS        reduce using rule 56 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MINUSMINUS      reduce using rule 56 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    TIMES           reduce using rule 56 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    DIVIDE          reduce using rule 56 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MOD             reduce using rule 56 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    PLUS            reduce using rule 56 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MINUS           reduce using rule 56 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LESSTHAN        reduce using rule 56 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LESSTHANEQ      reduce using rule 56 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    GREATERTHANEQ   reduce using rule 56 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    GREATERTHAN     reduce using rule 56 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    EQ              reduce using rule 56 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    NOTEQ           reduce using rule 56 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    AND             reduce using rule 56 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    OR              reduce using rule 56 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RBRACKET        reduce using rule 56 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    EQUALS          reduce using rule 56 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    TIMESEQ         reduce using rule 56 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    DIVEQ           reduce using rule 56 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MODEQ           reduce using rule 56 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    PLUSEQ          reduce using rule 56 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MINUSEQ         reduce using rule 56 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    COMMA           reduce using rule 56 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    SEMI            reduce using rule 56 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RPAREN          reduce using rule 56 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RBRACE          reduce using rule 56 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)


state 194

    (69) argument_expression -> argument_expression COMMA . assignment_expression
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    assignment_expression          shift and go to state 203
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 195

    (97) initializer -> LBRACE initializer_list COMMA RBRACE .

    COMMA           reduce using rule 97 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    SEMI            reduce using rule 97 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    RBRACE          reduce using rule 97 (initializer -> LBRACE initializer_list COMMA RBRACE .)


state 196

    (99) initializer_list -> initializer_list COMMA initializer .

    RBRACE          reduce using rule 99 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 99 (initializer_list -> initializer_list COMMA initializer .)


state 197

    (118) selection_statement -> IF LPAREN expression RPAREN . statement
    (119) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (107) statement -> . expression_statement
    (108) statement -> . compound_statement
    (109) statement -> . selection_statement
    (110) statement -> . interation_statement
    (111) statement -> . jump_statement
    (112) statement -> . assert_statement
    (113) statement -> . print_statement
    (114) statement -> . read_statement
    (115) expression_statement -> . expression_opt SEMI
    (100) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (118) selection_statement -> . IF LPAREN expression RPAREN statement
    (119) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (120) interation_statement -> . WHILE LPAREN expression RPAREN statement
    (121) interation_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (122) interation_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (123) jump_statement -> . BREAK SEMI
    (124) jump_statement -> . RETURN expression_opt SEMI
    (125) assert_statement -> . ASSERT expression SEMI
    (126) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (127) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (116) expression_opt -> . expression
    (117) expression_opt -> . empty
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (128) empty -> .
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    LBRACE          shift and go to state 40
    IF              shift and go to state 97
    WHILE           shift and go to state 99
    FOR             shift and go to state 100
    BREAK           shift and go to state 101
    RETURN          shift and go to state 102
    ASSERT          shift and go to state 103
    PRINT           shift and go to state 104
    READ            shift and go to state 105
    SEMI            reduce using rule 128 (empty -> .)
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    expression                     shift and go to state 98
    statement                      shift and go to state 204
    expression_statement           shift and go to state 88
    compound_statement             shift and go to state 89
    selection_statement            shift and go to state 90
    interation_statement           shift and go to state 91
    jump_statement                 shift and go to state 92
    assert_statement               shift and go to state 93
    print_statement                shift and go to state 94
    read_statement                 shift and go to state 95
    expression_opt                 shift and go to state 96
    empty                          shift and go to state 147
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 198

    (120) interation_statement -> WHILE LPAREN expression RPAREN . statement
    (107) statement -> . expression_statement
    (108) statement -> . compound_statement
    (109) statement -> . selection_statement
    (110) statement -> . interation_statement
    (111) statement -> . jump_statement
    (112) statement -> . assert_statement
    (113) statement -> . print_statement
    (114) statement -> . read_statement
    (115) expression_statement -> . expression_opt SEMI
    (100) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (118) selection_statement -> . IF LPAREN expression RPAREN statement
    (119) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (120) interation_statement -> . WHILE LPAREN expression RPAREN statement
    (121) interation_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (122) interation_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (123) jump_statement -> . BREAK SEMI
    (124) jump_statement -> . RETURN expression_opt SEMI
    (125) assert_statement -> . ASSERT expression SEMI
    (126) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (127) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (116) expression_opt -> . expression
    (117) expression_opt -> . empty
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (128) empty -> .
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    LBRACE          shift and go to state 40
    IF              shift and go to state 97
    WHILE           shift and go to state 99
    FOR             shift and go to state 100
    BREAK           shift and go to state 101
    RETURN          shift and go to state 102
    ASSERT          shift and go to state 103
    PRINT           shift and go to state 104
    READ            shift and go to state 105
    SEMI            reduce using rule 128 (empty -> .)
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    expression                     shift and go to state 98
    statement                      shift and go to state 205
    expression_statement           shift and go to state 88
    compound_statement             shift and go to state 89
    selection_statement            shift and go to state 90
    interation_statement           shift and go to state 91
    jump_statement                 shift and go to state 92
    assert_statement               shift and go to state 93
    print_statement                shift and go to state 94
    read_statement                 shift and go to state 95
    expression_opt                 shift and go to state 96
    empty                          shift and go to state 147
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 199

    (121) interation_statement -> FOR LPAREN expression_opt SEMI . expression_opt SEMI expression_opt RPAREN statement
    (116) expression_opt -> . expression
    (117) expression_opt -> . empty
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (128) empty -> .
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    SEMI            reduce using rule 128 (empty -> .)
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    expression_opt                 shift and go to state 206
    expression                     shift and go to state 98
    empty                          shift and go to state 147
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 200

    (122) interation_statement -> FOR LPAREN declaration expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 207


state 201

    (126) print_statement -> PRINT LPAREN expression_opt RPAREN . SEMI

    SEMI            shift and go to state 208


state 202

    (127) read_statement -> READ LPAREN argument_expression RPAREN . SEMI

    SEMI            shift and go to state 209


state 203

    (69) argument_expression -> argument_expression COMMA assignment_expression .

    RPAREN          reduce using rule 69 (argument_expression -> argument_expression COMMA assignment_expression .)
    COMMA           reduce using rule 69 (argument_expression -> argument_expression COMMA assignment_expression .)


state 204

    (118) selection_statement -> IF LPAREN expression RPAREN statement .
    (119) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    LBRACE          reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ASSERT          reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement .)
    READ            reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOID            reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AND             reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ADDRESS         reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 210

  ! ELSE            [ reduce using rule 118 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 205

    (120) interation_statement -> WHILE LPAREN expression RPAREN statement .

    LBRACE          reduce using rule 120 (interation_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 120 (interation_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 120 (interation_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 120 (interation_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 120 (interation_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 120 (interation_statement -> WHILE LPAREN expression RPAREN statement .)
    ASSERT          reduce using rule 120 (interation_statement -> WHILE LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 120 (interation_statement -> WHILE LPAREN expression RPAREN statement .)
    READ            reduce using rule 120 (interation_statement -> WHILE LPAREN expression RPAREN statement .)
    VOID            reduce using rule 120 (interation_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 120 (interation_statement -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 120 (interation_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 120 (interation_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 120 (interation_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 120 (interation_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 120 (interation_statement -> WHILE LPAREN expression RPAREN statement .)
    AND             reduce using rule 120 (interation_statement -> WHILE LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 120 (interation_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 120 (interation_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 120 (interation_statement -> WHILE LPAREN expression RPAREN statement .)
    NOT             reduce using rule 120 (interation_statement -> WHILE LPAREN expression RPAREN statement .)
    ADDRESS         reduce using rule 120 (interation_statement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 120 (interation_statement -> WHILE LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 120 (interation_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 120 (interation_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 120 (interation_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING          reduce using rule 120 (interation_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 120 (interation_statement -> WHILE LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 120 (interation_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 120 (interation_statement -> WHILE LPAREN expression RPAREN statement .)


state 206

    (121) interation_statement -> FOR LPAREN expression_opt SEMI expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 211


state 207

    (122) interation_statement -> FOR LPAREN declaration expression_opt SEMI . expression_opt RPAREN statement
    (116) expression_opt -> . expression
    (117) expression_opt -> . empty
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (128) empty -> .
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    RPAREN          reduce using rule 128 (empty -> .)
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    expression_opt                 shift and go to state 212
    expression                     shift and go to state 98
    empty                          shift and go to state 147
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 208

    (126) print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .

    LBRACE          reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    IF              reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    WHILE           reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    FOR             reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    BREAK           reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    RETURN          reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    ASSERT          reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    PRINT           reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    READ            reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    VOID            reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    CHAR            reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    INT             reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    FLOAT           reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    PLUSPLUS        reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    MINUSMINUS      reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    LPAREN          reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    AND             reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    TIMES           reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    PLUS            reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    MINUS           reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    NOT             reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    ADDRESS         reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    ID              reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    INT_CONST       reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    CHAR_CONST      reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    FLOAT_CONST     reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    STRING          reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    SEMI            reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    RBRACE          reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    ELSE            reduce using rule 126 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)


state 209

    (127) read_statement -> READ LPAREN argument_expression RPAREN SEMI .

    LBRACE          reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    IF              reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    WHILE           reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    FOR             reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    BREAK           reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    RETURN          reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ASSERT          reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PRINT           reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    READ            reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    VOID            reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    CHAR            reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    INT             reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    FLOAT           reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PLUSPLUS        reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    MINUSMINUS      reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    LPAREN          reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    AND             reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    TIMES           reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PLUS            reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    MINUS           reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    NOT             reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ADDRESS         reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ID              reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    INT_CONST       reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    CHAR_CONST      reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    FLOAT_CONST     reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    STRING          reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    SEMI            reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    RBRACE          reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ELSE            reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)


state 210

    (119) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (107) statement -> . expression_statement
    (108) statement -> . compound_statement
    (109) statement -> . selection_statement
    (110) statement -> . interation_statement
    (111) statement -> . jump_statement
    (112) statement -> . assert_statement
    (113) statement -> . print_statement
    (114) statement -> . read_statement
    (115) expression_statement -> . expression_opt SEMI
    (100) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (118) selection_statement -> . IF LPAREN expression RPAREN statement
    (119) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (120) interation_statement -> . WHILE LPAREN expression RPAREN statement
    (121) interation_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (122) interation_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (123) jump_statement -> . BREAK SEMI
    (124) jump_statement -> . RETURN expression_opt SEMI
    (125) assert_statement -> . ASSERT expression SEMI
    (126) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (127) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (116) expression_opt -> . expression
    (117) expression_opt -> . empty
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (128) empty -> .
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    LBRACE          shift and go to state 40
    IF              shift and go to state 97
    WHILE           shift and go to state 99
    FOR             shift and go to state 100
    BREAK           shift and go to state 101
    RETURN          shift and go to state 102
    ASSERT          shift and go to state 103
    PRINT           shift and go to state 104
    READ            shift and go to state 105
    SEMI            reduce using rule 128 (empty -> .)
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    expression                     shift and go to state 98
    statement                      shift and go to state 213
    expression_statement           shift and go to state 88
    compound_statement             shift and go to state 89
    selection_statement            shift and go to state 90
    interation_statement           shift and go to state 91
    jump_statement                 shift and go to state 92
    assert_statement               shift and go to state 93
    print_statement                shift and go to state 94
    read_statement                 shift and go to state 95
    expression_opt                 shift and go to state 96
    empty                          shift and go to state 147
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 211

    (121) interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI . expression_opt RPAREN statement
    (116) expression_opt -> . expression
    (117) expression_opt -> . empty
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (128) empty -> .
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    RPAREN          reduce using rule 128 (empty -> .)
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    expression_opt                 shift and go to state 214
    expression                     shift and go to state 98
    empty                          shift and go to state 147
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 212

    (122) interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 215


state 213

    (119) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    LBRACE          reduce using rule 119 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 119 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 119 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 119 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 119 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 119 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ASSERT          reduce using rule 119 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PRINT           reduce using rule 119 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    READ            reduce using rule 119 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOID            reduce using rule 119 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR            reduce using rule 119 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT             reduce using rule 119 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 119 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUSPLUS        reduce using rule 119 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUSMINUS      reduce using rule 119 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 119 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AND             reduce using rule 119 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TIMES           reduce using rule 119 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 119 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 119 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 119 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ADDRESS         reduce using rule 119 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 119 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT_CONST       reduce using rule 119 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR_CONST      reduce using rule 119 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT_CONST     reduce using rule 119 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 119 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMI            reduce using rule 119 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBRACE          reduce using rule 119 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 119 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 214

    (121) interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 216


state 215

    (122) interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN . statement
    (107) statement -> . expression_statement
    (108) statement -> . compound_statement
    (109) statement -> . selection_statement
    (110) statement -> . interation_statement
    (111) statement -> . jump_statement
    (112) statement -> . assert_statement
    (113) statement -> . print_statement
    (114) statement -> . read_statement
    (115) expression_statement -> . expression_opt SEMI
    (100) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (118) selection_statement -> . IF LPAREN expression RPAREN statement
    (119) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (120) interation_statement -> . WHILE LPAREN expression RPAREN statement
    (121) interation_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (122) interation_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (123) jump_statement -> . BREAK SEMI
    (124) jump_statement -> . RETURN expression_opt SEMI
    (125) assert_statement -> . ASSERT expression SEMI
    (126) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (127) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (116) expression_opt -> . expression
    (117) expression_opt -> . empty
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (128) empty -> .
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    LBRACE          shift and go to state 40
    IF              shift and go to state 97
    WHILE           shift and go to state 99
    FOR             shift and go to state 100
    BREAK           shift and go to state 101
    RETURN          shift and go to state 102
    ASSERT          shift and go to state 103
    PRINT           shift and go to state 104
    READ            shift and go to state 105
    SEMI            reduce using rule 128 (empty -> .)
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    expression_opt                 shift and go to state 96
    statement                      shift and go to state 217
    expression_statement           shift and go to state 88
    compound_statement             shift and go to state 89
    selection_statement            shift and go to state 90
    interation_statement           shift and go to state 91
    jump_statement                 shift and go to state 92
    assert_statement               shift and go to state 93
    print_statement                shift and go to state 94
    read_statement                 shift and go to state 95
    expression                     shift and go to state 98
    empty                          shift and go to state 147
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 216

    (121) interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN . statement
    (107) statement -> . expression_statement
    (108) statement -> . compound_statement
    (109) statement -> . selection_statement
    (110) statement -> . interation_statement
    (111) statement -> . jump_statement
    (112) statement -> . assert_statement
    (113) statement -> . print_statement
    (114) statement -> . read_statement
    (115) expression_statement -> . expression_opt SEMI
    (100) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (118) selection_statement -> . IF LPAREN expression RPAREN statement
    (119) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (120) interation_statement -> . WHILE LPAREN expression RPAREN statement
    (121) interation_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (122) interation_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (123) jump_statement -> . BREAK SEMI
    (124) jump_statement -> . RETURN expression_opt SEMI
    (125) assert_statement -> . ASSERT expression SEMI
    (126) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (127) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (116) expression_opt -> . expression
    (117) expression_opt -> . empty
    (66) expression -> . assignment_expression
    (67) expression -> . expression COMMA assignment_expression
    (128) empty -> .
    (70) assignment_expression -> . binary_expression
    (71) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (33) binary_expression -> . cast_expression
    (34) binary_expression -> . binary_expression TIMES binary_expression
    (35) binary_expression -> . binary_expression DIVIDE binary_expression
    (36) binary_expression -> . binary_expression MOD binary_expression
    (37) binary_expression -> . binary_expression PLUS binary_expression
    (38) binary_expression -> . binary_expression MINUS binary_expression
    (39) binary_expression -> . binary_expression LESSTHAN binary_expression
    (40) binary_expression -> . binary_expression LESSTHANEQ binary_expression
    (41) binary_expression -> . binary_expression GREATERTHANEQ binary_expression
    (42) binary_expression -> . binary_expression GREATERTHAN binary_expression
    (43) binary_expression -> . binary_expression EQ binary_expression
    (44) binary_expression -> . binary_expression NOTEQ binary_expression
    (45) binary_expression -> . binary_expression AND binary_expression
    (46) binary_expression -> . binary_expression OR binary_expression
    (49) unary_expression -> . postfix_expression
    (50) unary_expression -> . PLUSPLUS unary_expression
    (51) unary_expression -> . MINUSMINUS unary_expression
    (52) unary_expression -> . unary_operator cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (53) postfix_expression -> . primary_expression
    (54) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (55) postfix_expression -> . postfix_expression LPAREN RPAREN
    (56) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (57) postfix_expression -> . postfix_expression PLUSPLUS
    (58) postfix_expression -> . postfix_expression MINUSMINUS
    (78) unary_operator -> . AND
    (79) unary_operator -> . TIMES
    (80) unary_operator -> . PLUS
    (81) unary_operator -> . MINUS
    (82) unary_operator -> . NOT
    (83) unary_operator -> . ADDRESS
    (59) primary_expression -> . identifier
    (60) primary_expression -> . constant
    (61) primary_expression -> . LPAREN expression RPAREN
    (25) identifier -> . ID
    (62) constant -> . INT_CONST
    (63) constant -> . CHAR_CONST
    (64) constant -> . FLOAT_CONST
    (65) constant -> . STRING

    LBRACE          shift and go to state 40
    IF              shift and go to state 97
    WHILE           shift and go to state 99
    FOR             shift and go to state 100
    BREAK           shift and go to state 101
    RETURN          shift and go to state 102
    ASSERT          shift and go to state 103
    PRINT           shift and go to state 104
    READ            shift and go to state 105
    SEMI            reduce using rule 128 (empty -> .)
    PLUSPLUS        shift and go to state 55
    MINUSMINUS      shift and go to state 56
    LPAREN          shift and go to state 53
    AND             shift and go to state 51
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ADDRESS         shift and go to state 60
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    expression_opt                 shift and go to state 96
    statement                      shift and go to state 218
    expression_statement           shift and go to state 88
    compound_statement             shift and go to state 89
    selection_statement            shift and go to state 90
    interation_statement           shift and go to state 91
    jump_statement                 shift and go to state 92
    assert_statement               shift and go to state 93
    print_statement                shift and go to state 94
    read_statement                 shift and go to state 95
    expression                     shift and go to state 98
    empty                          shift and go to state 147
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 57
    primary_expression             shift and go to state 58
    identifier                     shift and go to state 61
    constant                       shift and go to state 62

state 217

    (122) interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .

    LBRACE          reduce using rule 122 (interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    IF              reduce using rule 122 (interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 122 (interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 122 (interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 122 (interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 122 (interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ASSERT          reduce using rule 122 (interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PRINT           reduce using rule 122 (interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    READ            reduce using rule 122 (interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    VOID            reduce using rule 122 (interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    CHAR            reduce using rule 122 (interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    INT             reduce using rule 122 (interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT           reduce using rule 122 (interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PLUSPLUS        reduce using rule 122 (interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    MINUSMINUS      reduce using rule 122 (interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 122 (interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    AND             reduce using rule 122 (interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    TIMES           reduce using rule 122 (interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PLUS            reduce using rule 122 (interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    MINUS           reduce using rule 122 (interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    NOT             reduce using rule 122 (interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ADDRESS         reduce using rule 122 (interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ID              reduce using rule 122 (interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST       reduce using rule 122 (interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    CHAR_CONST      reduce using rule 122 (interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT_CONST     reduce using rule 122 (interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    STRING          reduce using rule 122 (interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 122 (interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    RBRACE          reduce using rule 122 (interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 122 (interation_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)


state 218

    (121) interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .

    LBRACE          reduce using rule 121 (interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    IF              reduce using rule 121 (interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 121 (interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 121 (interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 121 (interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 121 (interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ASSERT          reduce using rule 121 (interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PRINT           reduce using rule 121 (interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    READ            reduce using rule 121 (interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    VOID            reduce using rule 121 (interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CHAR            reduce using rule 121 (interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT             reduce using rule 121 (interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT           reduce using rule 121 (interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUSPLUS        reduce using rule 121 (interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MINUSMINUS      reduce using rule 121 (interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 121 (interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    AND             reduce using rule 121 (interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    TIMES           reduce using rule 121 (interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUS            reduce using rule 121 (interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MINUS           reduce using rule 121 (interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    NOT             reduce using rule 121 (interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ADDRESS         reduce using rule 121 (interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ID              reduce using rule 121 (interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST       reduce using rule 121 (interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CHAR_CONST      reduce using rule 121 (interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT_CONST     reduce using rule 121 (interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    STRING          reduce using rule 121 (interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 121 (interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RBRACE          reduce using rule 121 (interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 121 (interation_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 204 resolved as shift
