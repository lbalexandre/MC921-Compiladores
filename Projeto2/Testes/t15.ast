Program: 
    GlobalDecl: 
        Decl: ID(name='z',  coord=<uc_ast.Coord object at 0x7f05562eb7d0>,  type=Type(),  scope=1,  kind='var'  )
            VarDecl: ID(name='z',  coord=<uc_ast.Coord object at 0x7f05562eb7d0>,  type=Type(),  scope=1,  kind='var'  ), Type(), 
                Type: [type(int)]   @ 1:1
            Constant: Type(), 3   @ 1:9
        Decl: ID(name='t',  coord=<uc_ast.Coord object at 0x7f05562ebb50>,  type=Type(),  scope=1,  kind='var'  )
            VarDecl: ID(name='t',  coord=<uc_ast.Coord object at 0x7f05562ebb50>,  type=Type(),  scope=1,  kind='var'  ), Type(), 
                Type: [type(int)]   @ 1:1
            Constant: Type(), 4   @ 1:15
    FuncDef: 
        Type: [type(int)]   @ 3:1
        Decl: ID(name='g',  coord=<uc_ast.Coord object at 0x7f05562b9dd0>,  type=Type(),  scope=1,  kind='func'  )
            FuncDecl: 
                ParamList: 
                    Decl: ID(name='t',  coord=<uc_ast.Coord object at 0x7f05562b9f50>,  type=Type(),  scope=2,  kind='var'  )
                        VarDecl: ID(name='t',  coord=<uc_ast.Coord object at 0x7f05562b9f50>,  type=Type(),  scope=2,  kind='var'  ), Type(), 
                            Type: [type(int)]   @ 3:8
                VarDecl: ID(name='g',  coord=<uc_ast.Coord object at 0x7f05562b9dd0>,  type=Type(),  scope=1,  kind='func'  ), Type(), 
                    Type: [type(int)]   @ 3:1
        Compound:    @ 3:1
            Decl: ID(name='x',  coord=<uc_ast.Coord object at 0x7f05562c2110>,  type=Type(),  scope=2,  kind='var'  )
                VarDecl: ID(name='x',  coord=<uc_ast.Coord object at 0x7f05562c2110>,  type=Type(),  scope=2,  kind='var'  ), Type(), 
                    Type: [type(int)]   @ 4:2
            Assignment: *=   @ 5:2
                ID: t   @ 5:2
                Constant: Type(), 2   @ 5:7
            Assignment: =   @ 6:2
                ID: x   @ 6:2
                BinaryOp: *   @ 6:6
                    Constant: Type(), 2   @ 6:6
                    ID: t   @ 6:8
            Assignment: =   @ 7:2
                ID: z   @ 7:2
                BinaryOp: +   @ 7:6
                    ID: x   @ 7:6
                    Constant: Type(), 1   @ 7:8
            Return:    @ 8:2
                ID: x   @ 8:9
    FuncDef: 
        Type: [type(int)]   @ 11:1
        Decl: ID(name='main',  coord=<uc_ast.Coord object at 0x7f05562c2590>,  type=Type(),  scope=1,  kind='func'  )
            FuncDecl: 
                VarDecl: ID(name='main',  coord=<uc_ast.Coord object at 0x7f05562c2590>,  type=Type(),  scope=1,  kind='func'  ), Type(), 
                    Type: [type(int)]   @ 11:1
        Compound:    @ 11:1
            Decl: ID(name='i',  coord=<uc_ast.Coord object at 0x7f05562c2790>,  type=Type(),  scope=2,  kind='var'  )
                VarDecl: ID(name='i',  coord=<uc_ast.Coord object at 0x7f05562c2790>,  type=Type(),  scope=2,  kind='var'  ), Type(), 
                    Type: [type(int)]   @ 12:5
            Decl: ID(name='j',  coord=<uc_ast.Coord object at 0x7f05562c2850>,  type=Type(),  scope=2,  kind='var'  )
                VarDecl: ID(name='j',  coord=<uc_ast.Coord object at 0x7f05562c2850>,  type=Type(),  scope=2,  kind='var'  ), Type(), 
                    Type: [type(int)]   @ 12:5
            Decl: ID(name='k',  coord=<uc_ast.Coord object at 0x7f05562c28d0>,  type=Type(),  scope=2,  kind='var'  )
                VarDecl: ID(name='k',  coord=<uc_ast.Coord object at 0x7f05562c28d0>,  type=Type(),  scope=2,  kind='var'  ), Type(), 
                    Type: [type(int)]   @ 12:5
            Assignment: =   @ 13:5
                ID: i   @ 13:5
                FuncCall:    @ 13:9
                    ID: g   @ 13:9
                    ID: t   @ 13:11
            Assignment: =   @ 14:5
                ID: j   @ 14:5
                FuncCall:    @ 14:9
                    ID: g   @ 14:9
                    ID: z   @ 14:11
            Assignment: =   @ 15:5
                ID: k   @ 15:5
                FuncCall:    @ 15:9
                    ID: g   @ 15:9
                    BinaryOp: +   @ 15:11
                        ID: t   @ 15:11
                        ID: z   @ 15:13
            Assert:    @ 16:5
                BinaryOp: &&   @ 16:12
                    BinaryOp: &&   @ 16:12
                        BinaryOp: ==   @ 16:12
                            ID: i   @ 16:12
                            Constant: Type(), 16   @ 16:17
                        BinaryOp: ==   @ 16:23
                            ID: j   @ 16:23
                            Constant: Type(), 68   @ 16:28
                    BinaryOp: ==   @ 16:34
                        ID: k   @ 16:34
                        Constant: Type(), 292   @ 16:39
            Return:    @ 17:5
                Constant: Type(), 0   @ 17:12
